<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gitea on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/gitea/</link><description>Recent content in Gitea on 小惡魔 - AppleBOY</description><generator>Hugo</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 04 Jan 2025 10:04:38 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/gitea/feed.xml" rel="self" type="application/rss+xml"/><item><title>Git Software Development Guidelines: Improving Team Collaboration</title><link>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-en/</link><pubDate>Sat, 04 Jan 2025 10:04:38 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-en/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> is a distributed version control system developed by &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a> for managing the source code of the Linux kernel. Git is designed for speed, data integrity, support for non-linear development (multiple branches), and strong branch management, making it widely used in software development. To effectively use Git, it is important to not only be familiar with its basic operations but also to master its workflow for better collaborative development. This article introduces some Git software development guidelines to help teams improve collaboration efficiency.&lt;/p>
&lt;p>Due to the complexity of team development, using Git can become more challenging. To enhance team collaboration efficiency, we need to establish a set of Git software development guidelines to standardize team members&amp;rsquo; operations and ensure the stability and maintainability of the codebase. Adhering to certain principles can accelerate the development process, reduce errors, and improve code quality.&lt;/p>
&lt;h2 id="git-software-development-workflow">Git Software Development Workflow&lt;/h2>
&lt;p>Below is a simple Git software development workflow diagram, illustrating how team members collaborate in development:&lt;/p>
&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-01-04/git-flow.png" alt="logo">&lt;/p>
&lt;p>The above workflow may not be suitable for all teams, but it can serve as a reference and be adjusted according to actual situations. Next, we will introduce some Git software development guidelines to help teams improve collaboration efficiency.&lt;/p></description></item><item><title>Git 軟體開發指南：提高團隊協作的關鍵</title><link>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-zh-tw/</link><pubDate>Sat, 04 Jan 2025 09:04:38 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-zh-tw/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> 是一個分散式版本控制系統，由 &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a> 開發，用於管理 Linux 核心的原始碼。Git 的設計目標是速度、資料完整性、支援非線性開發（多分支）、強大的分支管理等，因此廣泛地應用於軟體開發領域。而要有效地使用 Git，除了熟悉 Git 的基本操作外，更重要的是要掌握 Git 的工作流程，這樣才能更好地協作開發。本文將介紹一些 Git 軟體開發指南，幫助團隊提高協作效率。&lt;/p>
&lt;p>由於團隊開發的複雜性，Git 的使用也變得更加困難。為了提高團隊協作的效率，我們需要制定一套 Git 軟體開發指南，以規範團隊成員的操作行為，確保代碼庫的穩定性和可維護性。大家遵守一定的原則，可以加速開發進程，減少錯誤，提高代碼品質。&lt;/p>
&lt;h2 id="git-軟體開發流程圖">Git 軟體開發流程圖&lt;/h2>
&lt;p>以下是一個簡單的 Git 軟體開發流程圖，用於說明團隊成員之間如何協作開發：&lt;/p>
&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-01-04/git-flow.png" alt="logo">&lt;/p>
&lt;p>上面流程不一定適用於所有的團隊，但是可以作為參考，根據實際情況進行調整。接下來，我們將介紹一些 Git 軟體開發指南，幫助團隊提高協作效率。&lt;/p></description></item><item><title>Learning Go Language with GitLab API</title><link>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-en/</link><pubDate>Sat, 16 Nov 2024 15:15:56 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-en/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2024-11-16/gitlab-flow.png" alt="logo">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>People often ask me how to learn &lt;a href="https://go.dev/">Go language&lt;/a>, and I usually suggest they start with a real project to quickly learn the language&amp;rsquo;s features. Personally, I started with small projects and gradually expanded their scope, from contributing to documentation to open-source projects, then learning how to modify the source code, and finally writing my own project. This learning method allows you to become familiar with the features of the Go language more quickly.&lt;/p></description></item><item><title>使用 GitLab API 學習 Go 語言</title><link>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-zh-tw/</link><pubDate>Sat, 16 Nov 2024 12:32:46 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-zh-tw/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2024-11-16/gitlab-flow.png" alt="logo">&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>常有人問我如何學習 &lt;a href="https://go.dev/">Go 語言&lt;/a>，我通常建議他們從實際專案開始，這樣可以更快掌握語言特性。我個人也是先寫小專案，再逐步擴大範圍，從貢獻文件到開源專案，進而學習如何修改原始碼，最後再自己寫一個專案。這樣的學習方式能讓你更快熟悉 Go 語言的特性。&lt;/p></description></item></channel></rss>