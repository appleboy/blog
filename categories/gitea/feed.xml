<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gitea on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/gitea/</link><description>Recent content in Gitea on 小惡魔 - AppleBOY</description><generator>Hugo</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 15 Mar 2025 12:22:24 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/gitea/feed.xml" rel="self" type="application/rss+xml"/><item><title>Integrating Gitea with Jira Software Development Workflow</title><link>https://blog.wu-boy.com/2025/03/gitea-jira-integration-en/</link><pubDate>Sat, 15 Mar 2025 12:22:24 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/03/gitea-jira-integration-en/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-03-15/blog-logo.png" alt="blog logo">&lt;/p>
&lt;p>Before we begin, let&amp;rsquo;s understand what &lt;a href="https://about.gitea.com/">Gitea&lt;/a> and &lt;a href="https://www.atlassian.com/software/jira">Jira&lt;/a> are. I recommend reading &amp;ldquo;&lt;a href="https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-en/">Git Software Development Guide: Key to Improving Team Collaboration&lt;/a>&amp;rdquo; first to better understand the following content.&lt;/p>
&lt;p>&lt;a href="https://about.gitea.com/">Gitea&lt;/a> is a lightweight self-hosted Git server developed in Go language, offering teams an easy-to-deploy code management solution. Besides supporting multiple operating systems like Linux, Windows, and macOS, it features comprehensive code review, issue tracking, and Wiki functionalities that significantly enhance team collaboration efficiency.&lt;/p>
&lt;p>&lt;a href="https://www.atlassian.com/software/jira">Jira&lt;/a> is a professional project management and issue tracking system developed by Atlassian. Widely adopted by software development teams, Jira not only provides complete issue tracking functionality but also supports agile development processes (such as Scrum and Kanban) and rich data analytics features, effectively helping teams manage project progress and improve collaboration quality.&lt;/p></description></item><item><title>Gitea 與 Jira 軟體開發流程整合</title><link>https://blog.wu-boy.com/2025/03/gitea-jira-integration-zh-tw/</link><pubDate>Sat, 15 Mar 2025 08:42:24 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/03/gitea-jira-integration-zh-tw/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-03-15/blog-logo.png" alt="blog logo">&lt;/p>
&lt;p>在開始本文前，讓我們先來了解 &lt;a href="https://about.gitea.com/">Gitea&lt;/a> 和 &lt;a href="https://www.atlassian.com/software/jira">Jira&lt;/a> 這兩個工具。建議您可以先閱讀『&lt;a href="https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-zh-tw/">Git 軟體開發指南：提高團隊協作的關鍵&lt;/a>』，以更好地理解後續內容。&lt;/p>
&lt;p>&lt;a href="https://about.gitea.com/">Gitea&lt;/a> 是一套以 Go 語言開發的輕量級自架式 Git 伺服器，為團隊提供了便於部署的程式碼管理方案。系統除了支援 Linux、Windows 和 macOS 等多種作業系統外，還具備完善的程式碼審查、問題追蹤和 Wiki 等功能，能大幅提升團隊的協作開發效率。&lt;/p>
&lt;p>&lt;a href="https://www.atlassian.com/software/jira">Jira&lt;/a> 是 Atlassian 公司開發的專業級專案管理與問題追蹤系統。作為軟體開發團隊廣泛採用的工具，Jira 不僅提供完整的問題追蹤功能，還支援敏捷開發流程（如 Scrum 和 Kanban）以及豐富的數據分析功能，有效協助團隊管理專案進度並提升協作品質。&lt;/p></description></item><item><title>Git Software Development Guidelines: Improving Team Collaboration</title><link>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-en/</link><pubDate>Sat, 04 Jan 2025 10:04:38 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-en/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> is a powerful distributed version control system created by &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a>, initially designed for managing the Linux kernel source code. Its exceptional features include lightning-fast processing, robust data integrity, seamless support for non-linear development through branching, and sophisticated branch management capabilities. These characteristics make Git an essential tool in modern software development. While mastering basic Git operations is important, understanding its workflow is crucial for achieving optimal team collaboration. This article presents comprehensive Git software development guidelines to enhance team productivity.&lt;/p>
&lt;p>As development teams expand, Git workflows naturally become more intricate. To maintain smooth collaboration, implementing well-structured Git development guidelines becomes essential. These guidelines help regulate team members&amp;rsquo; actions, ensuring code repository stability and maintainability. When properly followed, they not only expedite development cycles but also minimize errors and enhance overall code quality.&lt;/p>
&lt;h2 id="git-software-development-workflow">Git Software Development Workflow&lt;/h2>
&lt;p>The following diagram illustrates a streamlined Git development workflow that demonstrates effective team collaboration:&lt;/p>
&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-01-04/git-flow.png" alt="logo">&lt;/p>
&lt;p>While this workflow may not suit all teams, it serves as a reference that can be adjusted according to specific circumstances. Let&amp;rsquo;s explore some Git software development guidelines that help improve team collaboration efficiency.&lt;/p></description></item><item><title>Git 軟體開發指南：提高團隊協作的關鍵</title><link>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-zh-tw/</link><pubDate>Sat, 04 Jan 2025 09:04:38 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2025/01/git-software-development-guide-key-to-improving-team-collaboration-zh-tw/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Git">Git&lt;/a> 是一套分散式版本控制系統，由 &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a> 所開發，主要用於管理 Linux 核心的原始碼。Git 的主要特色包含了快速的處理速度、完整的資料保護、支援多分支的非線性開發，以及強大的分支管理功能，這些特色使其成為軟體開發領域中不可或缺的工具。要有效地運用 Git，除了要熟悉基本操作外，更重要的是要掌握其工作流程，才能達到最佳的團隊協作效果。本文將為您介紹一套實用的 Git 軟體開發指南，協助團隊提升協作效率。&lt;/p>
&lt;p>隨著團隊規模的擴大，Git 的使用也變得更加複雜。為了確保團隊協作的順暢，我們必須建立一套完整的 Git 軟體開發指南，規範團隊成員的操作行為，以維持程式碼庫的穩定性與可維護性。遵循這些規範不僅能加快開發進度，更能減少錯誤發生的機會，進而提升程式碼品質。&lt;/p>
&lt;h2 id="git-軟體開發流程圖">Git 軟體開發流程圖&lt;/h2>
&lt;p>以下是一個簡單的 Git 軟體開發流程圖，用於說明團隊成員之間如何協作開發：&lt;/p>
&lt;p>&lt;img src="https://blog.wu-boy.com/images/2025-01-04/git-flow.png" alt="logo">&lt;/p>
&lt;p>上述流程不一定適用於所有團隊，但可作為參考，並根據實際情況進行調整。接下來，我們將介紹一些 Git 軟體開發指南，幫助團隊提高協作效率。&lt;/p></description></item><item><title>Learning Go Language with GitLab API</title><link>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-en/</link><pubDate>Sat, 16 Nov 2024 15:15:56 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-en/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2024-11-16/gitlab-flow.png" alt="logo">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>People often ask me how to learn &lt;a href="https://go.dev/">Go language&lt;/a>, and I usually suggest they start with a real project to quickly learn the language&amp;rsquo;s features. Personally, I started with small projects and gradually expanded their scope, from contributing to documentation to open-source projects, then learning how to modify the source code, and finally writing my own project. This learning method allows you to become familiar with the features of the Go language more quickly.&lt;/p></description></item><item><title>使用 GitLab API 學習 Go 語言</title><link>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-zh-tw/</link><pubDate>Sat, 16 Nov 2024 12:32:46 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2024/11/learning-go-language-with-gitlab-api-zh-tw/</guid><description>&lt;p>&lt;img src="https://blog.wu-boy.com/images/2024-11-16/gitlab-flow.png" alt="logo">&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>常有人問我如何學習 &lt;a href="https://go.dev/">Go 語言&lt;/a>，我通常建議他們從實際專案開始，這樣可以更快掌握語言特性。我個人也是先寫小專案，再逐步擴大範圍，從貢獻文件到開源專案，進而學習如何修改原始碼，最後再自己寫一個專案。這樣的學習方式能讓你更快熟悉 Go 語言的特性。&lt;/p></description></item></channel></rss>