<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/nodejs/</link><description>Recent content in NodeJS on 小惡魔 - AppleBOY</description><generator>Hugo</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 21 Nov 2017 02:40:50 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/nodejs/feed.xml" rel="self" type="application/rss+xml"/><item><title>用 Go 語言減少 node_modules 容量來加速部署</title><link>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</link><pubDate>Tue, 21 Nov 2017 02:40:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">減少 node_modules 大小來加速部署 Node.js 專案&lt;/a>』文章，透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令可以移除不必要的模組，剩下的模組佔據整個專案大部分容量，那該如何針對留下的模組來瘦身呢？這週看到 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 大神 &lt;a href="https://github.com/tj">TJ&lt;/a> 又發了一個 &lt;a href="https://golang.org">Go 語言&lt;/a>專案叫做 &lt;a href="https://github.com/tj/node-prune">node-prune&lt;/a>，此專案用來移除在 &lt;code>node_modules&lt;/code> 內不必要的檔案，那哪些才是不必要的檔案呢？&lt;/p></description></item><item><title>Node.js 8 搭配 npm 5 速度</title><link>https://blog.wu-boy.com/2017/06/node-js-8-npm-5-install-speed/</link><pubDate>Sun, 11 Jun 2017 05:02:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/node-js-8-npm-5-install-speed/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?w=840&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這個月 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 釋出 8.0 版本，搭配的就是 npm &lt;a href="https://github.com/npm/npm/releases/tag/v5.0.0">v5.0.0&lt;/a> 版本，&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">上一篇&lt;/a>寫到如何透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令移除 devDependencies 內的 Package 套件，減少 node_modules 大小，有網友提到那 npm 5 的速度為何？其實筆者已經好久沒有用 npm 了，但是有人提問，我就立馬來測試看看 npm vs yarn 的速度，詳細數據可以參考此&lt;a href="https://github.com/appleboy/npm-vs-yarn">專案說明&lt;/a>。測試方法如下&lt;/p></description></item><item><title>減少 node_modules 大小來加速部署 Node.js 專案</title><link>https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</link><pubDate>Tue, 06 Jun 2017 06:36:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?w=840&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 開發者現在大部分都在使用 &lt;a href="https://yarnpkg.com">Yarn&lt;/a> 了吧？如果還不知道或無法體會 Yarn 帶來的好處可以參考之前寫的一篇『&lt;a href="https://yarnpkg.com">用 Yarn 取代 Npm 管理 JavaScript 套件版本&lt;/a>』，帶你體會 &lt;code>yarn install&lt;/code> vs &lt;code>npm install&lt;/code> 的速度差異。本篇最主要會介紹在部署 Node.js 專案都需要把 node_modules 壓縮一起丟到遠端伺服器 (假設你不是用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 部署)，這時候來聊聊怎麼減少 &lt;code>node_modules&lt;/code> 大小。&lt;/p></description></item><item><title>用 Yarn 取代 Npm 管理 JavaScript 套件版本</title><link>https://blog.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/</link><pubDate>Thu, 13 Oct 2016 07:19:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?resize=640%2C287&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>新一代戰神 &lt;a href="https://yarnpkg.com/">Yarn&lt;/a> 終於在昨天出爐了，Yarn 跟 &lt;a href="https://www.npmjs.com/">Npm&lt;/a> 一樣都是 JavaScript 套件版本管理工具，但是 Npm 令人詬病的是安裝都是非常的慢，快取機制用起來效果也不是很好，所以 Yarn 的出現解決了這些問題，透過 Yarn 安裝過的套件都會在家目錄產生 Cache (目錄在 &lt;code>~/.yarn-cache/&lt;/code>)，也就是只要安裝過一次，下次砍掉 &lt;code>node_modules&lt;/code> 目錄重新安裝都會從 Cache 讀取。Yarn 詳細的功能架構可以參考 Facebook 發表的 &lt;a href="https://code.facebook.com/posts/1840075619545360">Yarn: A new package manager for JavaScript&lt;/a>，本篇不會教大家怎麼使用 Yarn，因為指令實在是太容易了，可以參考官方提供的&lt;a href="https://yarnpkg.com/en/docs/migrating-from-npm">如何從 npm 轉換到 yarn&lt;/a>，底下則是來測試比較兩者安裝套件的速度。&lt;/p></description></item><item><title>用一行指令加速 npm install</title><link>https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/</link><pubDate>Sun, 10 Jul 2016 15:44:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/24588632402/in/dateposted-public/" title="Npm-logo.svg">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1564/24588632402_35c2cab0b6_z.jpg?resize=640%2C249&amp;#038;ssl=1" alt="Npm-logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>不久之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2016/01/speed-up-npm-install/">提升 npm install 安裝速度&lt;/a>，但是發現速度還是沒有變快，在 DevOps 的流程花在 &lt;code>npm install&lt;/code> 的時間非常冗長，造成每次測試或 Deploy 都要花大量時間等待，且吃掉很多機器的資源，本篇要提供一個小技巧改善 npm install 安裝時間，其實簡單來說就是 cache 第一次安裝好的 &lt;code>node_modules&lt;/code> 目錄，之後每次安裝就拿 cache 目錄來新增或減少 packages 即可。&lt;/p></description></item><item><title>ScaleDrone Websocket 平台從 Node.js 轉換到 Golang</title><link>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</link><pubDate>Sun, 22 May 2016 07:51:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>又看到一間網路平台公司從 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 跳到 &lt;a href="https://golang.org/">Golang&lt;/a> 了。&lt;a href="http://www.scaledrone.com">ScaleDrone&lt;/a> 是一間提供了 &lt;a href="https://en.wikipedia.org/wiki/WebSocket">websocket&lt;/a> 服務的公司，讓 web 可以透過 ScaleDrone 即時將訊息傳播到各種瀏覽器，但是今天看到 ScaleDrone 即將把後端平台使用的語言從 &lt;a href="http://blog.scaledrone.com/posts/nodejs-to-go">Node.js 轉換到 Golang&lt;/a>，為什麼要轉語言呢，官方提到大量的 Websocket 連線，讓伺服器記憶體快吃不消了，然而 ScaleDrone 用 Go 語言來實際測試，發現記憶體不但沒有增加，反而還降低了 response 及 connections 時間。底下是針對 Node.js vs Go 語言轉換比較。&lt;/p></description></item><item><title>提升 npm install 安裝速度</title><link>https://blog.wu-boy.com/2016/01/speed-up-npm-install/</link><pubDate>Sun, 31 Jan 2016 03:36:24 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/01/speed-up-npm-install/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/24588632402/in/dateposted-public/" title="Npm-logo.svg">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1564/24588632402_35c2cab0b6_z.jpg?resize=640%2C249&amp;#038;ssl=1" alt="Npm-logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.npmjs.com/">npm&lt;/a> 是 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 套件管理模組，相信大家對 npm 不會很陌生，如果對於 npm 不了解的，可以參考&lt;a href="http://www.ruanyifeng.com/">阮一峰&lt;/a>寫的&lt;a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html">這篇文章&lt;/a>，今天要來探討的是如何提升 &lt;code>npm install&lt;/code> 的安裝速度，如果你正在嘗試 npm@3 版本，我建議可以先換到 npm@2 的版本會比較快（為什麼呢？底下有數據會說話）。&lt;a href="https://github.com/npm/npm/issues/9632">Github issue&lt;/a> 上也蠻多速度上的討論，然而前幾天有網友&lt;a href="https://github.com/npm/npm/issues/11283">發表一篇&lt;/a>關掉 &lt;code>progress&lt;/code> 提升不少速度，實際上我們可以拿專案來測試 npm@2 及 npm@3 的速度看看。&lt;/p></description></item><item><title>TJ 的新作品 frontend boilerplate 前端工具整合</title><link>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</link><pubDate>Thu, 31 Dec 2015 01:26:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</guid><description>今天突然看到 TJ 開了一個新 Repo 是 frontend boilerplate 嚇到我了，自從 TJ 去年發表要轉向 Go 之後，就把他自己很多的 Node.js Project 轉給其他人維護，也漸漸沒在 Github 上面活動，但是今天又看到她整理了一份 frontend boilerplate，內容含了現代流行的前端開發工具，大家可以參考看看，是個不錯的 Template:
Webpack React Redux Babel Autoprefixer PostCSS CSS modules Rucksack Hot reloading Redux router Redux effects TodoMVC example 期待 TJ 能有其他新作品啊。</description></item><item><title>JavaScript in 2015</title><link>https://blog.wu-boy.com/2015/09/javascript-in-2015/</link><pubDate>Wed, 09 Sep 2015 06:40:41 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/09/javascript-in-2015/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/21271865261/in/datetaken-public/" title="Screen Shot 2015-09-09 at 2.03.34 PM">&lt;img src="https://i2.wp.com/farm6.staticflickr.com/5834/21271865261_3f445489d7_n.jpg?resize=320%2C195&amp;#038;ssl=1" alt="Screen Shot 2015-09-09 at 2.03.34 PM" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>在這幾年的趨勢看來，&lt;a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">JavaScript&lt;/a> 已經環繞在各領域了，不管在 Web 前端或後端，上層或下層，都充滿了 JavaScript，其實都是托 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 的福，網路上看到這篇 &lt;a href="http://survivejs.github.io/frontend-in-2015/">JavaScript in 2015&lt;/a>，裡面講到 JavaScript 所有的工具，不管前端到後端，每一年都有新的工具跟新的 Framework，從以前寫 &lt;a href="http://backbonejs.org/">Backbone&lt;/a> 到 &lt;a href="https://angularjs.org/">Angular.js&lt;/a> 到現在 &lt;a href="http://facebook.github.io/react/">React.js&lt;/a> 改變了整個 JavaScript View 的生態，工具流程整合從 &lt;a href="http://gruntjs.com/">Grunt.js&lt;/a> 到 &lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 的出現，整個生態又轉換了，大家陸續將工具全都轉到 Gulp，最後又出來一套 &lt;a href="https://webpack.github.io/">Webpack&lt;/a>，Webpack 出現基本上不會影響 gulp 發展，因為 Webpack 還是有很多限制，在前端或後端在上 Production 前的一些流程像是 copy 檔案等，這些是 webpack 無法整合的，看到這些工具一一出現，也不知道明年或現在會不會又跑出一套新的玩具，讓整個 JavaScript 生態整個改變。寫上層的同時，看到同事在寫底層，同事就會跑過來拍拍我肩膀說：『好險我是搞 Kernel，搞上層就要跟你們一樣天天追新技術，永遠沒有停止的一天』。看一下全世界 Job Trends&lt;/p></description></item><item><title>Facebook React Jest 搭配 Webpack 測試</title><link>https://blog.wu-boy.com/2015/08/facebook-react-jest-with-webpack/</link><pubDate>Tue, 11 Aug 2015 03:31:58 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/08/facebook-react-jest-with-webpack/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/19850322514/in/dateposted-public/" title="logo_og">&lt;img src="https://i2.wp.com/farm1.staticflickr.com/462/19850322514_1f88fd5d6c_n.jpg?resize=320%2C320&amp;#038;ssl=1" alt="logo_og" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>寫 &lt;a href="http://facebook.github.io/react/">Facebook React&lt;/a> 就是要搭配 &lt;a href="https://webpack.github.io/">Webpack&lt;/a>，Webpack 已經是前端開發的必備工具，要測試 React Component 就是要用 Facebook 開發的 &lt;a href="http://facebook.github.io/jest/">Jest 框架&lt;/a>，使用 Webpack 也許會搭配 &lt;a href="http://lesscss.org/">Less&lt;/a> or &lt;a href="http://sass-lang.com/">Sass&lt;/a> Loader 讓每個 component 都可以獨立有 CSS 檔案。要在 JS 內直接引入 CSS 檔案寫法如下&lt;/p>
&lt;div>
 &lt;pre class="brush: jscript; title: ; notranslate" title="">import '!style!css!less!./Schedule.less';
import React, { Component } from 'react';&lt;/pre>
&lt;/div></description></item><item><title>Node.js Mocha 延遲測試</title><link>https://blog.wu-boy.com/2015/05/node-js-mocha-delay-testing/</link><pubDate>Fri, 08 May 2015 01:24:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/05/node-js-mocha-delay-testing/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png">&lt;img src="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67-300x134.png?resize=300%2C134" alt="687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67" class="aligncenter size-medium wp-image-5729" srcset="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?w=500&amp;ssl=1 500w" sizes="(max-width: 300px) 85vw, 300px" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>如果大家有在寫 &lt;a href="http://expressjs.com/">Node.js Express Framework&lt;/a>，一定對 &lt;a href="http://mochajs.org/">Mocha&lt;/a> Unit Testing 不陌生，&lt;code>各位工程師不要太相信自己寫的程式碼&lt;/code>，產品上線前，務必要把 Unit Test 寫完整，如果是要 Code Refactor，那測試的重要性更是大。網站架構越來越大，功能越來越多，每寫一個新功能，都會產生 side effect，造成其他程式或邏輯出錯，這時候就需要 Unit Test 來驗證邏輯的正確性。使用 Express 寫 API 我個人會建議使用 &lt;a href="https://github.com/visionmedia/supertest">Supertest&lt;/a> + &lt;a href="https://github.com/tj/should.js/">Should.js&lt;/a> 來驗證後端程式碼即可，這幾套框架都是由 &lt;a href="https://github.com/tj">TJ Holowaychuk&lt;/a> 完成。使用 supertest 也可以讓 express 不用 listen port 就可以測試。&lt;/p></description></item><item><title>Git Flow and JavaScript Coding Style</title><link>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</link><pubDate>Sat, 11 Apr 2015 15:05:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 已經是每日必備使用的指令，在平常工作上常常使用到 &lt;a href="http://git-scm.com/docs/git-rebase">git rebase&lt;/a> 或 &lt;a href="http://git-scm.com/docs/git-merge">git merge&lt;/a>，發現很多工程師不知道什麼時候該用 rebase 什麼時候該用 merge，所以做了底下投影片來清楚描述 git rebase 及 merge 的優缺點及使用時機。&lt;/p></description></item><item><title>成立 iojs 台灣群組</title><link>https://blog.wu-boy.com/2015/02/iojs-tw-organization/</link><pubDate>Mon, 09 Feb 2015 03:55:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/02/iojs-tw-organization/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/15859123853" title="9950313 by Bo-Yi Wu, on Flickr">&lt;img src="https://i2.wp.com/farm8.staticflickr.com/7401/15859123853_d945160802_o.png?resize=200%2C200&amp;#038;ssl=1" alt="9950313" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>昨天在 &lt;a href="https://www.facebook.com/groups/node.js.tw/">node.js 台灣群組&lt;/a>討論&lt;a href="https://www.facebook.com/gniyop/posts/446564002165486">對岸已經成立 iojs-cn&lt;/a>，不多說我們也請官方幫忙成立了 &lt;a href="https://github.com/iojs/iojs-tw">iojs-tw&lt;/a>，目前的工作只有兩項，就是負責將[ iojs 官網]翻譯成中文，這部份 &lt;a href="https://github.com/cfsghost">@cfsghost&lt;/a> 已經&lt;a href="https://github.com/iojs/website/pull/135">送 PR 給官方了&lt;/a>，另外就是翻譯官方的 &lt;a href="https://medium.com/@iojs">Weekly Notes&lt;/a>，iojs 每週五都會發布一篇 iojs 的最新動態，我們就是負責將其中文化，上週五已經翻譯好了請參考如下:&lt;/p></description></item><item><title>Automating your workflow with Gulp.js</title><link>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</link><pubDate>Sun, 20 Jul 2014 02:11:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</guid><description>&lt;div style="margin:0 auto; text-align:center;">
 &lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?w=840&amp;#038;ssl=1" style="max-height: 250px" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>今年 2014 &lt;a href="http://coscup.org/">COSCUP&lt;/a> 在 7/19,20 中研院舉辦，由於 &lt;a href="http://jsdc.tw/">JSDC&lt;/a> 今年比往年還要晚半年舉辦，所以本來想投在 JSDC 的議程，就先拿到投到 COSCUP 議程。去年 JSDC 講了 &lt;a href="http://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/">Javascript command line tool GruntJS 介紹&lt;/a>，講完經過半年，&lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 就出來了，我馬上跳過去嘗試，用過之後，就像變了心的女朋友，回不來了，底下是 Gulp.js Slides。&lt;/p></description></item><item><title>用 Google PageSpeed Insights 計算 Desktop 或 Mobile 網站分數</title><link>https://blog.wu-boy.com/2014/06/pagespeed-insights-with-reporting/</link><pubDate>Thu, 12 Jun 2014 02:33:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/06/pagespeed-insights-with-reporting/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/14077059487" title="new-google-logo-knockoff by Bo-Yi Wu, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2930/14077059487_58046d689e_n.jpg?resize=320%2C124&amp;#038;ssl=1" alt="new-google-logo-knockoff" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>相信工程師在調整網站效能一定會使用 &lt;a href="https://developers.google.com/speed/docs/insights/v1/getting_started">Google PageSpeed Insights&lt;/a> 來得到測試效能數據報表，但是這僅限於使用 Chrome 或 Firefox 瀏覽器。每次跑 PageSpeed 時候，Chrome 就會出現哀號，並且吃下許多記憶體。有沒有 command line 可以直接用 Google PageSpeed Insights 測試 Desktop 或 Mobile 的分數。Google 工程師 &lt;a href="https://github.com/addyosmani">@addyosmani&lt;/a> 寫了一套 &lt;a href="https://github.com/addyosmani/psi">PageSpeed Insights for Node - with reporting&lt;/a> 稱作 &lt;a href="https://github.com/addyosmani/psi">PSI&lt;/a>，可以直接透過 Node 來產生基本 report，這 report 真的算很基本，跟 Chrome 的 extension 跑起來的 report 是不一樣的。這工具可以用來紀錄每次 deploy 網站時的一些數據變化。底下附上 Google 網站報告&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/14401120872" title="google_psi_report by Bo-Yi Wu, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3857/14401120872_38d23bc763_z.jpg?resize=640%2C586&amp;#038;ssl=1" alt="google_psi_report" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>Gulp.js 工具包</title><link>https://blog.wu-boy.com/2014/05/gui-tool-for-gulp/</link><pubDate>Fri, 23 May 2014 03:23:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/05/gui-tool-for-gulp/</guid><description>&lt;div style="margin:0 auto; text-align:center;">
 &lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?w=840&amp;#038;ssl=1" style="max-height: 250px" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>本篇來整理關於 &lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 的一些 GUI 工具，對於不瞭解 Gulp.js 可以參考之前我寫的 &lt;a href="http://blog.wu-boy.com/2013/12/streaming-build-system-gulp/">The streaming build system Gulp&lt;/a>，會紀錄這篇最主要是看到有人在 Github 發了這篇 &lt;a href="https://github.com/gulpjs/gulp/issues/468">Is there any GUI tool for Gulp?&lt;/a> 而 Gulp.js 底層作者 &lt;a href="https://github.com/robrich">@robrich&lt;/a> 跳出來列出了很多工具，整理如下&lt;/p></description></item><item><title>在 Chrome 瀏覽器使用 Terminal 終端機</title><link>https://blog.wu-boy.com/2014/01/terminal-in-chrome-devtools/</link><pubDate>Sun, 05 Jan 2014 13:43:46 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/01/terminal-in-chrome-devtools/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;img src="https://i2.wp.com/farm8.staticflickr.com/7350/9333443162_20e7e5d5f2_m.jpg?w=840&amp;#038;ssl=1" alt="Google Chrome" data-recalc-dims="1" />
&lt;/div>
&lt;h2 id="簡介">簡介&lt;/h2>
&lt;p>不知道大家有無在瀏覽器內直接連上 Terminal 終端機，今天來介紹 &lt;a href="https://github.com/petethepig/devtools-terminal">DevTools Terminal&lt;/a>，這是一套 &lt;a href="https://chrome.google.com/webstore/category/extensions">Chrome extension&lt;/a>，它可以讓您在 &lt;a href="http://www.google.com/intl/zh-TW/chrome/">Chrome 瀏覽器&lt;/a>直接使用 Terminal，平常開發程式，一定會常常切換瀏覽器及 Terminal 軟體，現在開發者可以直接在瀏覽器連上 Terminal，並且開始使用 &lt;a href="http://git-scm.com/">Git&lt;/a>, &lt;a href="http://gruntjs.com/">Grunt&lt;/a>, wget 甚至 &lt;a href="http://www.vim.org/">Vim&lt;/a> 等指令。&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/11773943433/" title="Screenshot from 2014-01-05 20:36:26 by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2837/11773943433_e0f20349fb.jpg?resize=500%2C282&amp;#038;ssl=1" alt="Screenshot from 2014-01-05 20:36:26" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>Javscript 18 歲生日歷史演進</title><link>https://blog.wu-boy.com/2013/12/happy-18th-birthday-javascript/</link><pubDate>Sat, 07 Dec 2013 11:41:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/12/happy-18th-birthday-javascript/</guid><description>&lt;p>在 &lt;a href="http://resin.io/blog/" target="_blank">resin.io&lt;/a> 看到這篇 &lt;a href="http://resin.io/happy-18th-birthday-javascript/" target="_blank">Happy 18th Birthday JavaScript! A look at an unlikely past and bright future.&lt;/a> 裡面有些 Javascript 發展史，蠻有趣的，分享給大家看看。18 年前由 Netscape 和 Sun 共同 Release Javscript，在當年18天後，Ruby 也同時&lt;a href="http://en.wikipedia.org/wiki/Ruby_(programming_language)#First_publication" target="_blank">發佈&lt;/a>了，底下來看看 Javscript 歷史演進。&lt;/p></description></item><item><title>Drone.io 搭配 Ruby 環境測試</title><link>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</link><pubDate>Thu, 17 Oct 2013 02:54:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</guid><description>&lt;p>相信現在 &lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 已經是大家共通的版本控制工具，每當專案有新的 commit，我們可以透過 &lt;a href="https://travis-ci.org/" target="_blank">Travis&lt;/a> 來幫忙做測試，但是 Travis 真的只有支援測試而已，如果測試成功想要進一步 Deploy 到任何機器或者是繼續做任何動作，這些都不支援的，那國外有些 Service 可以整合 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 或 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a> Project 幫忙做到自動測試及 Deploy，比較常見的就是 &lt;a href="https://www.codeship.io" target="_blank">Codeship&lt;/a>，這服務非常強大，整合了 &lt;a href="https://www.heroku.com/" target="_blank">Heroku&lt;/a>，&lt;a href="https://appengine.google.com/" target="_blank">App Engine&lt;/a>，&lt;a href="https://www.nodejitsu.com/" target="_blank">Nodejitsu&lt;/a> .. 等服務，Deploy 也支援 &lt;a href="https://github.com/fabric/fabric" target="_blank">Fabric&lt;/a>, &lt;a href="http://puppetlabs.com/" target="_blank">Puppet&lt;/a>, Shell script 等等，這家的收費是看每個月做了多少次編譯測試動作，最便宜的方案每個月 $9 美金，只能編譯 50 次。&lt;/p></description></item><item><title>JSDC 和 KSDG 影音紀錄 (淺談 GruntJS 整合開發工具)</title><link>https://blog.wu-boy.com/2013/06/jsdc-ksdg-gruntjs-tool/</link><pubDate>Tue, 11 Jun 2013 02:38:38 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/06/jsdc-ksdg-gruntjs-tool/</guid><description>&lt;div style="margin: 0 auto; text-align: center;">
 &lt;a title="gruntlogo by appleboy46, on Flickr" href="https://www.flickr.com/photos/appleboy/8591850168/">&lt;img alt="gruntlogo" src="https://i2.wp.com/farm9.staticflickr.com/8244/8591850168_ca0e125ffa_n.jpg?resize=200%2C200&amp;#038;ssl=1" data-recalc-dims="1" />&lt;/a>
&lt;/div> 很高興今年在 
&lt;p>&lt;a href="http://jsdc.tw/2013/" target="_blank">JSDC&lt;/a> 擔任講師，演講主題為『&lt;a href="http://blog.wu-boy.com/2013/05/2013-javascript-conference-front-tool-grunt-js/" target="_blank">你不可不知的前端開發工具&lt;/a>』，這場議程只有30分鐘可以講，時間實在是不太夠，要消化這麼多工具其實對於聽眾有點困難，真是對不起聽眾了，不過沒關係，高雄 &lt;a href="https://www.facebook.com/groups/KSDGroup" target="_blank">KSDG&lt;/a> 五月份邀請我講『&lt;a href="http://blog.wu-boy.com/2013/05/how-to-integrate-front-end-tools-via-gruntjs/" target="_blank">打造團隊共同開發環境&lt;/a>』，其實就是將 &lt;a href="http://gruntjs.com/" target="_blank">GruntJS&lt;/a> 精華整個講一遍，大概有一個多小時，底下是官方影音，如果朋友們沒北上參加，也可以透過 &lt;a href="http://www.youtube.com/user/JSDCTW/videos" target="_blank">JSDC Youtube&lt;/a> 來欣賞。 JSDC 35分鐘議程&lt;/p></description></item><item><title>高雄 KSDG 分享: 打造團隊共同開發環境</title><link>https://blog.wu-boy.com/2013/05/how-to-integrate-front-end-tools-via-gruntjs/</link><pubDate>Sat, 25 May 2013 13:28:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/05/how-to-integrate-front-end-tools-via-gruntjs/</guid><description>&lt;div style="margin: 0 auto; text-align: center;">
 &lt;a title="gruntlogo by appleboy46, on Flickr" href="https://www.flickr.com/photos/appleboy/8591850168/">&lt;img alt="gruntlogo" src="https://i2.wp.com/farm9.staticflickr.com/8244/8591850168_ca0e125ffa_n.jpg?resize=200%2C200&amp;#038;ssl=1" data-recalc-dims="1" />&lt;/a>
&lt;/div> 很高興受到高雄 
&lt;p>&lt;a href="https://www.facebook.com/groups/KSDGroup/" target="_blank">KSDG&lt;/a> 邀請，分享上禮拜在 &lt;a href="http://jsdc.tw/2013/" target="_blank">JSDC&lt;/a> 所介紹主題: &lt;a href="http://blog.wu-boy.com/2013/05/2013-javascript-conference-front-tool-grunt-js/" target="_blank">你不可不知的前端開發工具&lt;/a>，在 JSDC 現場只有半小時可以講，這次在高雄有一個半小時可以講，如果想詳細了解前端工具，可以參考上禮拜的投影片，底下是在高雄軟體科技園區所分享。謝謝 &lt;a href="https://www.facebook.com/hsuani.bi" target="_blank">Eric Bi&lt;/a> 及工作人員可以讓我分享這次議題。&lt;/p></description></item><item><title>2013 Javascript Conference: 你不可不知的前端開發工具</title><link>https://blog.wu-boy.com/2013/05/2013-javascript-conference-front-tool-grunt-js/</link><pubDate>Sun, 19 May 2013 05:56:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/05/2013-javascript-conference-front-tool-grunt-js/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;img src="https://i1.wp.com/farm6.staticflickr.com/5454/7238452668_82262e37dc_o.png?w=840&amp;#038;ssl=1" alt="JSDC 2013" data-recalc-dims="1" />
&lt;/div>
&lt;p>台灣第 2 屆 JavaScript 研討會在 5/18, 5/19 登場，今年報到率到 95% 了，我也給了一場 Talk，關於前端工具介紹，包含 &lt;a href="http://coffeescript.org/" target="_blank">CoffeeScript&lt;/a>, &lt;a href="http://compass-style.org/" target="_blank">Compass&lt;/a>, &lt;a href="http://livereload.com/" target="_blank">Livereload&lt;/a>, &lt;a href="http://bower.io/" target="_blank">Bower&lt;/a> Package Manager .. 等，最後介紹主軸 &lt;a href="http://gruntjs.com/" target="_blank">Grunt.js&lt;/a> 來整合這些工具。&lt;/p></description></item><item><title>Javascript command line tool GruntJS 介紹</title><link>https://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/</link><pubDate>Tue, 26 Mar 2013 07:35:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/</guid><description>&lt;p>&lt;strong>Update: 補上一張執行後的截圖 2013.03.27&lt;/strong>&lt;/p>
&lt;div style="margin: 0 auto; text-align: center;">
 &lt;a title="gruntlogo by appleboy46, on Flickr" href="https://www.flickr.com/photos/appleboy/8591850168/">&lt;img alt="gruntlogo" src="https://i2.wp.com/farm9.staticflickr.com/8244/8591850168_ca0e125ffa_n.jpg?resize=320%2C320&amp;#038;ssl=1" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://gruntjs.com/" target="_blank">GruntJS&lt;/a> 是一套 JavaScript Task Runner，為什麼官網會這樣寫呢？網站上線之前，是不是需要經過測試，壓縮，及品質控管，這些 Task 該如何實現，在 GruntJS 還沒出現之前，大家可以透過 Linux command 的方式來達成，但是對於前端工程師而言，多學習 command line 真的是要他們的命，所以 GruntJS 解決了此問題，將所有的 Task 用 Javascript 方式設定就可以自動佈署或測試。GruntJS 的 Plugin 也非常多且完整，像是大家常用的 &lt;a href="http://coffeescript.org/" target="_blank">CoffeeScript&lt;/a>、&lt;a href="http://handlebarsjs.com/" target="_blank">Handlebars&lt;/a>、&lt;a href="http://jade-lang.com/" target="_blank">Jade&lt;/a>、&lt;a href="http://www.jshint.com/" target="_blank">JsHint&lt;/a>、&lt;a href="http://lesscss.org/" target="_blank">Less&lt;/a>、&lt;a href="http://sass-lang.com/" target="_blank">Sass&lt;/a>、&lt;a href="http://compass-style.org/" target="_blank">Compass&lt;/a>、&lt;a href="http://learnboost.github.com/stylus/" target="_blank">Stylus&lt;/a>…等都有支援。更多好用的 Plugin 可以在&lt;a href="http://gruntjs.com/plugins" target="_blank">官網搜尋頁面&lt;/a>上找到。&lt;/p>
&lt;h3 id="安裝方式-grunt-可以透過">安裝方式 Grunt 可以透過&lt;/h3>
&lt;p>&lt;a href="http://nodejs.org/" target="_blank">Node.js&lt;/a> 的管理工具 &lt;a href="https://npmjs.org/" target="_blank">npm&lt;/a> 方式來安裝，Windows 只要到 Node.js 官網下載安裝包，直接按下一步即可安裝完畢，Linux 可以透過 NVM 方式來管理 Node.js 版本，可以參考作者之前寫的 &lt;a href="http://blog.wu-boy.com/2013/01/node-version-manager/" target="_blank">Node Version Manager 版本管理 NVM&lt;/a>。需要注意的是 Grunt 0.4.x 需要 Node.js &lt;span style="color: red;">&lt;strong>&amp;gt;= 0.8.0&lt;/strong>&lt;/span> 版本才可以。&lt;/p></description></item><item><title>壓縮 Javascript 和 CSS 檔案 script command</title><link>https://blog.wu-boy.com/2013/02/compress-css-javascript-script-command/</link><pubDate>Thu, 21 Feb 2013 10:45:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/02/compress-css-javascript-script-command/</guid><description>&lt;div style="margin: 0 auto;text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6033708087/" title="nodejs-light by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6199/6033708087_ff1a02a337_o.jpg?resize=260%2C71&amp;#038;ssl=1" alt="nodejs-light" data-recalc-dims="1" />&lt;/a>
&lt;/div> 網站上站前要做的事情非常多，其中一項為大家所知就是壓縮 
&lt;p>&lt;a href="http://www.w3schools.com/css/" target="_blank">CSS&lt;/a> 跟 &lt;a href="http://www.w3schools.com/js/default.asp" target="_blank">JavaScript&lt;/a> 檔案，減少 Http request 流量，網路上已經有非常多的 Compressor tool，像是 &lt;a href="https://developers.google.com/closure/compiler/" target="_blank">Google Closure Compiler&lt;/a> 或 &lt;a href="http://yui.github.com/yuicompressor/" target="_blank">YUI Compressor&lt;/a>，都是用來壓縮 JS 或 CSS 檔案，這次寫了 script 來壓縮整個網站目錄裡的 js 或 css 檔案，不過 script 所使用的 Compressor command 是 Node Base 的 tool，分別是 &lt;a href="https://github.com/mishoo/UglifyJS2" target="_blank">UglifyJS&lt;/a> 及 &lt;a href="https://github.com/ded/sqwish" target="_blank">sqwish&lt;/a> 這兩套，當然使用 command 之前，請務必先安裝好 &lt;a href="http://nodejs.org/" target="_blank">Node.js&lt;/a> 最新版本啦，不過沒安裝也沒關係，底下有懶人安裝 script command。這些 tool 對於 Embedded System 在 build firmware 相當有用，可以減少不少 code size 阿。 可以直接看&lt;a href="https://github.com/appleboy/minify-tool" target="_blank">專案說明&lt;/a>，就可以不必看底下步驟了&lt;/p></description></item><item><title>Bower 管理網站套件的好工具</title><link>https://blog.wu-boy.com/2013/01/bower-is-a-package-manager-for-the-web/</link><pubDate>Tue, 15 Jan 2013 03:34:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/01/bower-is-a-package-manager-for-the-web/</guid><description>&lt;p>&lt;strong>Update: bower 在 0.9.0 版以前可以使用 &lt;span style="color:red">component.json&lt;/span>，但是為了避免跟其他工具命名衝突，故 0.9.0 以後版本請改為 &lt;span style="color:green">bower.json&lt;/span>&lt;/strong> &lt;a href="http://twitter.github.com/bower/" target="_blank">bower&lt;/a> 是 &lt;a href="http://twitter.com" target="_blank">Twitter&lt;/a> 團隊開發的一套網頁工具，用來管理或安裝 Web 開發所需要的 Package，像是 CSS 和 JavaScript，也可以依據套件的相依性來安裝，簡單來說，開發者不用再去煩惱套件相依性問題，以及時間久了想更新最新版本，還要到各 Package 網站來下載，這些步驟都省了，一個指令就可以全部做完上述的步驟。&lt;/p>
&lt;h3 id="安裝-bower-管理套件-透過">安裝 Bower 管理套件 透過&lt;/h3>
&lt;p>&lt;a href="http://nodejs.org/" target="_blank">Node.js&lt;/a> 的 npm 工具來安裝&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">$ npm install bower -g&lt;/pre></description></item><item><title>Node Version Manager 版本管理 NVM</title><link>https://blog.wu-boy.com/2013/01/node-version-manager/</link><pubDate>Wed, 09 Jan 2013 10:34:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/01/node-version-manager/</guid><description>2015.02.12 官方已經支援 nvm install stable，補上 io.js 說明
本篇不是要介紹 Node.js，是要介紹管理 Node.js 版本的工具，之前是玩 Visionmedia 開發的 n，後來跳到玩 Creationix 開發的 nvm tool，目前支援 stable command，也就是下 nvm install stable (直接裝好 v0.12.0)。
安裝方式 可以使用 curl 或 wget 方式安裝
$ curl https://raw.githubusercontent.com/creationix/nvm/v0.23.3/install.sh | bash $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.23.3/install.sh | bash 使用方式 # 安裝最新穩定版本 $ nvm install stable # 移除最新穩定版本 $ nvm uninstall stable # 使用穩定版本 $ nvm use stable $ nvm run unstable --version 如果有玩 io.js 可以下
$ nvm install iojs</description></item><item><title>Node.js Version Management 多版本管理</title><link>https://blog.wu-boy.com/2011/11/node-version-management/</link><pubDate>Tue, 29 Nov 2011 05:37:19 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/11/node-version-management/</guid><description>&lt;div style="margin: 0 auto;text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6033708087/" title="nodejs-light by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6199/6033708087_ff1a02a337_o.jpg?resize=260%2C71&amp;#038;ssl=1" alt="nodejs-light" data-recalc-dims="1" />&lt;/a>
&lt;/div> 相信大家對於 
&lt;p>&lt;a href="http://nodejs.org" target="_blank">Node.js&lt;/a> 版本 Release 太快而感到困擾，每次新版出來，就要開始升級原本的版本，加上測試及修改，一定會浪費不少時間在上面，不管是任何語言我都希望能有一套 Version Management 來管理各版本之間的差異，以及讓使用者可以隨時切換版本來使用測試。那今天來介紹一套 &lt;a href="https://github.com/visionmedia/n" target="_blank">Node.js Version Management&lt;/a>，這隻程式是用 shell script 下去撰寫，可以安裝多版本在 Linux 本機上面，隨時都可以切換不同版本測試。此作者也是 &lt;a href="http://expressjs" target="_blank">expressjs Framework&lt;/a> 發起者。&lt;/p></description></item><item><title>無痛安裝 NodeJS 和 Node Framework Express</title><link>https://blog.wu-boy.com/2011/08/%E7%84%A1%E7%97%9B%E5%AE%89%E8%A3%9D-nodejs-%E5%92%8C-node-framework-express/</link><pubDate>Thu, 11 Aug 2011 07:25:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/08/%E7%84%A1%E7%97%9B%E5%AE%89%E8%A3%9D-nodejs-%E5%92%8C-node-framework-express/</guid><description>&lt;div style="margin: 0 auto;text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6033708087/" title="nodejs-light by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6199/6033708087_ff1a02a337_o.jpg?resize=260%2C71&amp;#038;ssl=1" alt="nodejs-light" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://nodejs.org/" target="_blank">NodeJS&lt;/a> 是目前當紅的 Web 2.0 技術，去年 &lt;a href="http://coscup.org/2010/zh-tw/program/" target="_blank">COSCUP 2010&lt;/a> 就有 &lt;a href="http://www.KKBOX.com.tw" target="_blank">KKBOX&lt;/a> 資深工程師 ericpi 來探討這個議題，NodeJS 背後使用了 V8 引擎為基礎，沒看過用純 JS 來當 Server-Side 吧，台灣很紅的 Plurk 也是大量使用 NodeJS，然而每開發一種語言，就會想開始找搭配的 Framework，那就首推 &lt;a href="http://expressjs.com/" target="_blank">Node Framework Express&lt;/a> 來撰寫程式，本篇是要介紹如何在 Ubuntu 10.10 無痛安裝 nodejs + express。&lt;/p>
&lt;h3 id="下載-nodejs-原始碼-直接到">下載 Nodejs 原始碼 直接到&lt;/h3>
&lt;p>&lt;a href="http://nodejs.org/#download" target="_blank">官網下載 Stable 的版本&lt;/a>吧，目前是 node-v0.4.10.tar.gz，也可以先看看 &lt;a href="http://nodejs.org/docs/v0.4.10/api/index.html" target="_blank">API Document&lt;/a>&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title=""># wget http://nodejs.org/dist/node-v0.4.10.tar.gz&lt;/pre></description></item></channel></rss>