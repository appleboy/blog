<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drone CI on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/drone-ci/</link><description>Recent content in Drone CI on 小惡魔 - AppleBOY</description><generator>Hugo</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 22 Apr 2023 14:50:40 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/drone-ci/feed.xml" rel="self" type="application/rss+xml"/><item><title>Compiling multi-architecture images with Docker BuildKit using Drone CI/CD</title><link>https://blog.wu-boy.com/2023/04/drone-ci-cd-to-build-multiarch-docker-images-with-buildx-en/</link><pubDate>Sat, 22 Apr 2023 14:50:40 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2023/04/drone-ci-cd-to-build-multiarch-docker-images-with-buildx-en/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/ySw4F8j.png" alt="cover">&lt;/p>
&lt;p>In 2020, Docker announced &lt;a href="https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/">support for multi-architecture images&lt;/a>, and later, &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">Docker BuildKit&lt;/a> officially supported &lt;a href="https://docs.docker.com/build/building/multi-platform/">multi-architecture images&lt;/a>. This article introduces how to use &lt;a href="https://www.drone.io/">Drone CI/CD&lt;/a> with &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">Docker BuildKit&lt;/a> to compile multi-architecture images, and this feature is free and does not require a paid Docker Hub account. However, the &lt;a href="https://plugins.drone.io/plugins/docker">Drone Docker Plugin&lt;/a> provided by Drone CI/CD does not currently support multi-architecture images, so you need to write your own Drone Pipeline to achieve our goal. The official website has also proposed this proposal: &amp;lsquo;&lt;a href="https://github.com/drone/proposal/issues/5">Support cross-arch Docker builds within Docker using QEMU&lt;/a>&amp;rsquo; to achieve this goal, using QEMU. The key point is to use Docker BuildKit to complete it under the environment where the Host supports &lt;a href="https://www.qemu.org/">Qemu&lt;/a>.&lt;/p></description></item><item><title>用 Drone CI/CD 搭配 Docker BuildKit 編譯多架構映像檔</title><link>https://blog.wu-boy.com/2023/04/drone-ci-cd-to-build-multiarch-docker-images-with-buildx/</link><pubDate>Sat, 22 Apr 2023 07:12:47 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2023/04/drone-ci-cd-to-build-multiarch-docker-images-with-buildx/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/ySw4F8j.png" alt="cover">&lt;/p>
&lt;p>在 2020 年就有 &lt;a href="https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/">Docker 宣布支援多架構映像檔&lt;/a>，後來才有正式的 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">Docker BuildKit&lt;/a> 支援&lt;a href="https://docs.docker.com/build/building/multi-platform/">多架構映像檔&lt;/a>，這篇文章來介紹如何使用 &lt;a href="https://www.drone.io/">Drone CI/CD&lt;/a> 搭配 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">Docker BuildKit&lt;/a> 編譯多架構映像檔，而且這個功能是免費的，不需要付費的 Docker Hub 帳號。但是在 Drone CI/CD 官方提供的 &lt;a href="https://plugins.drone.io/plugins/docker">Drone Docker Plugin&lt;/a> 目前是不支援多架構映像檔，所以需要自己撰寫 Drone Pipeline，來達到我們的目的，官方也有人提出了這樣的 Proposal: 『&lt;a href="https://github.com/drone/proposal/issues/5">Support cross-arch Docker builds within Docker using QEMU&lt;/a>』，使用 QEMU 來達成目的，底下來介紹如何使用，關鍵點就是在 Host 支援 &lt;a href="https://www.qemu.org/">Qemu&lt;/a> 的環境下，使用 Docker BuildKit 完成。&lt;/p></description></item><item><title>用 GitHub Actions, Drone CI 或 GitLab CI 部署 AWS Lambda</title><link>https://blog.wu-boy.com/2020/10/deploy-lambda-github-actions-drone-ci-gitlab-ci/</link><pubDate>Mon, 26 Oct 2020 03:39:02 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/10/deploy-lambda-github-actions-drone-ci-gitlab-ci/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/43711539730/in/dateposted-public/" title="Screen Shot 2018-10-24 at 9.37.49 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/43711539730_7bd9f610c3_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-10-24 at 9.37.49 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>最近剛好把 &lt;a href="https://github.com/appleboy/drone-lambda">drone-lambda&lt;/a> 新增了一些新的功能，也就是可以透過 CI/CD 的方式來更新 &lt;a href="https://aws.amazon.com/tw/lambda/">AWS Lambda&lt;/a> 基本設定，像是 Memory Size, Handler, Timeout, Runtime 或 Role 等 &amp;hellip;，趁這機會寫篇教學紀錄如何透過 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>, &lt;a href="https://cloud.drone.io">Drone CI&lt;/a> 或 &lt;a href="https://docs.gitlab.com/ee/ci/">GitLab CI&lt;/a> 部署 AWS Lambda。這三套部署方式都是透過 &lt;a href="https://github.com/appleboy/drone-lambda">drone-lambda&lt;/a> 包好的 Image 來進行。底下的程式碼都可以在&lt;a href="https://github.com/go-training/drone-lambda-demo">這邊找到&lt;/a>。&lt;/p></description></item><item><title>Go 1.15 新增 Module cache 環境變數</title><link>https://blog.wu-boy.com/2020/06/go-module-cache-variable-gomodcache/</link><pubDate>Sat, 13 Jun 2020 13:45:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/06/go-module-cache-variable-gomodcache/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信各位開發者在寫 &lt;a href="https://golang.org">Go 語言&lt;/a>專案，現在肯定都是使用 &lt;a href="https://blog.golang.org/using-go-modules">Go module&lt;/a> 了，而 Go Module 檔案預設寫在 &lt;code>/go/pkg/mod&lt;/code> 目錄內，要串 CI/CD 流程時，由於不在專案路徑底下，所以每一個 Container 無法共用 &lt;code>/go/pkg/mod&lt;/code> 路徑，造成重複下載第三方套件，其實跨容器的解決方式可以透過 &lt;a href="https://cloud.drone.io">Drone&lt;/a> 的 &lt;a href="https://docs.drone.io/pipeline/docker/syntax/volumes/temporary/">Temporary Volumes&lt;/a> 方式解決，但是最終希望跑完編譯流程時，可以將最後的 mod 目錄打包留到下次的 CI/CD 部署流程使用，這時候如果可以改變 &lt;code>/go/pkg/mod&lt;/code> 路徑，就可以動態調整目錄結構了。底下是針對 Drone 這套部署工具進行解說。&lt;/p></description></item><item><title>用 GitHub Actions 上傳 Docker Image 到 AWS ECR</title><link>https://blog.wu-boy.com/2020/04/upload-docker-image-to-aws-ecr-using-github-actions/</link><pubDate>Mon, 06 Apr 2020 05:39:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/04/upload-docker-image-to-aws-ecr-using-github-actions/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/t5MID_dNklCmkU2VFrKkhHV89tta8i-9GMebbSyfd_uvvdyQlo6Q4JbhRkA0jCO84vcSLW8zbn4Nqvzm1PYmAgrBQ4e2J1aZiUOZ7p_NGNinNF7Svsld_JRBv5rwCouNEJ_oBxk-Vqs=w1920-h1080" alt="">&lt;/p>
&lt;p>最近正打算使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 來串接 &lt;a href="https://aws.amazon.com">AWS&lt;/a> 服務 (&lt;a href="https://aws.amazon.com/tw/ecr/">ECR&lt;/a> + &lt;a href="https://aws.amazon.com/tw/ecs/">ECS&lt;/a>)，上網找了一堆 &lt;a href="https://github.com/marketplace?type=actions&amp;amp;query=ECR">ECR 套件&lt;/a>，發現就連 &lt;a href="https://github.com/aws-actions/amazon-ecr-login">AWS 官方&lt;/a>都只有實作 Login 進 ECR，後面編譯跟上傳動作就需要自己寫，可以看看底下是 AWS 官方套件的範例:&lt;/p></description></item><item><title>Docker 推出官方 GitHub Actions 套件</title><link>https://blog.wu-boy.com/2020/03/docker-release-github-actions-plugin/</link><pubDate>Sun, 29 Mar 2020 13:32:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/docker-release-github-actions-plugin/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HM1o-XLKQSuzYOobmH10dENcm8KwZ3eMqHt99LWMLHMw_14CBHJEr8xuktBUvQFInGX1oLetjI97GkoHCTWFzaXLT_-YBVNv0_jsHYS1Fd2mDXk-v68I4itwP54-4eSZiQ3MewsF47U=w1920-h1080" title="cover">&lt;img src="https://lh3.googleusercontent.com/HM1o-XLKQSuzYOobmH10dENcm8KwZ3eMqHt99LWMLHMw_14CBHJEr8xuktBUvQFInGX1oLetjI97GkoHCTWFzaXLT_-YBVNv0_jsHYS1Fd2mDXk-v68I4itwP54-4eSZiQ3MewsF47U=w1920-h1080" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>去年 &lt;a href="https://github.com">GitHub&lt;/a> 推出 &lt;a href="https://github.com/features/actions">Actions&lt;/a>，就有不少開發者相繼把 CI/CD 流程內會使用到的 Plugin 都丟到 &lt;a href="https://github.com/marketplace?type=actions">Marktetplace&lt;/a>，而在這 &lt;a href="https://docker.com">Docker&lt;/a> 容器時代，肯定是需要用自動化上傳容器到 Docker Registry，而官方也在&lt;a href="https://www.docker.com/blog/first-docker-github-action-is-here/">上週正式釋出第一版 GitHub Actions&lt;/a>，雖然在 Marktet 尚有不少開發者已經有實現了此功能，但是官方既然推出了，就採用官方的套件會比較適合。底下我們來看看如何使用 Docker 推出的 GitHub Aciton 來自動化上傳 Docker Image。除了介紹如何使用 GitHub Action 上傳 Image 外，我也會拿 &lt;a href="https://drone.io/">Drone&lt;/a> 的 &lt;a href="http://plugins.drone.io/drone-plugins/drone-docker/">Docker Plugin&lt;/a> 來進行比較。&lt;/p></description></item><item><title>Go Modules 處理私有 GIT Repository 流程</title><link>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</link><pubDate>Wed, 04 Mar 2020 14:41:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/_swpUXXC6aFQLaC3ooXMAgebOkHkgCl7M3RVH6Yrs2vDF-4T_dlUhHUz3MMmdtsV5H_vi6r5-fu_fpSI0RFtmYtmwVIK_zzRIO_YhrmIa3-PATRnyUtfVPtU4J7sxhkF_aQzXjGDdbU=w1920-h1080" alt="golang">&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Golang&lt;/a> 在 &lt;a href="https://golang.org/doc/go1.14#introduction">1.14&lt;/a> 正式說明可以將 &lt;a href="https://github.com/golang/go/wiki/Modules">Go Modules&lt;/a> 用在正式環境上了，還沒換上 Go Modules 的團隊，現在可以開始轉換了，轉換方式也相當容易啦，只要在原本的專案底下執行底下指令，就可以無痛轉移&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go mod init project_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假設專案內有用到私有 Git Repository 該怎麼解決了？現在 go mod 會預設走 &lt;code>proxy.golang.org&lt;/code> 去抓取最新的資料，但是要抓私有的，就需要透過其他方式:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go env -w &lt;span style="color:#00688b">GOPRIVATE&lt;/span>=github.com/appleboy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代表告訴 go 指令，只要遇到 &lt;code>github.com/appleboy&lt;/code> 就直接讀取，不需要走 Proxy 流程。拿 GitHub 當作範例，在本機端開發該如何使用？首先要先去申請 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>，接著設定 Git&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global url.&lt;span style="color:#cd5555">&amp;#34;https://&lt;/span>&lt;span style="color:#00688b">$USERNAME&lt;/span>&lt;span style="color:#cd5555">:&lt;/span>&lt;span style="color:#00688b">$ACCESS_TOKEN&lt;/span>&lt;span style="color:#cd5555">@github.com&amp;#34;&lt;/span>.insteadOf &lt;span style="color:#cd5555">&amp;#34;https://github.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 Username 就是 GitHub 帳號，Access token 就是上面的 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>。&lt;/p></description></item><item><title>用五分鐘安裝好 Drone 搭配 GitHub 自動化環境</title><link>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</link><pubDate>Wed, 26 Feb 2020 03:07:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/vD-ucUYf5HyaiqFcboabD13gP0b_ZQeTKdceFqim75J5z3jiA-D_H4BZEbd0hPf9Go1h-kN06yPcYoT-qpym7jLbFNAjadLvhWMx8XdAQRdAa7Bg61I5pYO2U3fqVEh6n6D4I38sdoo=w1920-h1080" alt="">&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/">用 10 分鐘安裝好 Drone 搭配 GitLab&lt;/a>』。團隊內還沒導入自動化 CI/CD 測試部署環境的朋友們，可以來嘗試看看用 &lt;a href="https://golang.org">Go 語言&lt;/a>打造的 Drone CI/CD 開源專案，不用五分鐘的時間就可以在您的電腦上安裝好 CI/CD 的流程，真的是簡單到不行，只要一個 docker-compose 檔案就可以完成架設了。&lt;/p></description></item><item><title>用 Drone 部署靜態檔案到 GitHub Pages</title><link>https://blog.wu-boy.com/2020/02/deploy-static-files-to-github-using-drone/</link><pubDate>Sat, 22 Feb 2020 06:34:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/deploy-static-files-to-github-using-drone/</guid><description>&lt;blockquote>
&lt;p>新課程上架:『&lt;a href="https://www.udemy.com/course/docker-practice/?couponCode=20200222" title="Docker 容器實用實戰">Docker 容器實用實戰&lt;/a>』目前特價 &lt;strong>$800 TWD&lt;/strong>，優惠代碼『&lt;strong>20200222&lt;/strong>』，也可以直接匯款（價格再減 &lt;strong>100&lt;/strong>），如果想搭配另外兩門課程合購可以透過 &lt;a href="http://facebook.com/appleboy46">FB 聯絡我&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/vD-ucUYf5HyaiqFcboabD13gP0b_ZQeTKdceFqim75J5z3jiA-D_H4BZEbd0hPf9Go1h-kN06yPcYoT-qpym7jLbFNAjadLvhWMx8XdAQRdAa7Bg61I5pYO2U3fqVEh6n6D4I38sdoo=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com">GitHub&lt;/a> 提供一個非常方便的功能，就是可以將&lt;a href="https://pages.github.com">靜態檔案&lt;/a>部署在 GitHub 上，基本上開發者不用負擔任何 Host 費用，就可以使用靜態檔案來做 Demo 介紹，或者是文件系統。而本篇將教您如何用 &lt;a href="https://drone.io">Drone&lt;/a> 來自動化部署靜態檔案到 GitHub 上。作者直接用 Vue.js 來介紹整個流程。&lt;/p></description></item><item><title>Drone CI/CD 支援 Auto cancellation 機制</title><link>https://blog.wu-boy.com/2019/10/auto-cancellation-in-drone-ci-cd/</link><pubDate>Sun, 20 Oct 2019 02:27:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/auto-cancellation-in-drone-ci-cd/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/RK0neP9RNsD1P5N5zGL0BqgvUFnDDb1YuzyIUKLlD01ejmM87JNaU29bweqw_CyD0v39FYfi5wAh6wCls1CIxaMMiOdHX6WQ4p7hFU5Qlt052uya0NZ6pjJJAA24rfhbpDFDwKmivfU=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/RK0neP9RNsD1P5N5zGL0BqgvUFnDDb1YuzyIUKLlD01ejmM87JNaU29bweqw_CyD0v39FYfi5wAh6wCls1CIxaMMiOdHX6WQ4p7hFU5Qlt052uya0NZ6pjJJAA24rfhbpDFDwKmivfU=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>大家一定會問什麼是『Auto cancellation』呢？中文翻作自動取消，這機制會用在 CI/CD 的哪個流程或步驟呢？我們先來探討一個情境，不知道大家有無遇過在同一個 branch 陸續發了 3 個 commit，會發現在 CI/CD 會依序啟動 3 個 Job 來跑這 3 個 commit，假設您有設定同時間只能跑一個 Job，這樣最早的 commit 會先開始啟動，後面兩個 commit 則會處於 &lt;code>Penging&lt;/code> 的狀態，等到第一個 Job 完成後，後面兩個才會繼續執行。&lt;/p></description></item><item><title>Ansible 設定 Google Container Registry 搭配 Drone 自動上傳</title><link>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</link><pubDate>Thu, 03 Oct 2019 02:14:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/mese3VEnyNElOz7iL-z3w0nxM4PcNjC6lfPWxLbPrHTFr3PvKeyxGwIxTXoRztpidxN7gX8WlRtzBsfxkOVb_Pt-jEwCbZtYDD3l0DLeBger7XaC40XVyPUgAyT6yU_FdqJeAUCSQik=w1920-h1080" alt="blog logo">&lt;/p>
&lt;p>最近剛好有需求要串接 &lt;a href="https://cloud.google.com/container-registry/">GCR&lt;/a> (Google Container Registry)，專案如果是搭配 GCP 服務，個人建議就直接用 GCR 了。本篇要教大家如何透過 Ansible 管理遠端機器直接登入 GCR，透過特定的帳號可以直接拉 Image，接著用 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 來重新起動服務，這算是最基本的部署流程，那該如何用 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 登入呢？請看底下教學。&lt;/p></description></item><item><title>用 Drone 自動化上傳 Docker Image 到 GitHub Docker Registry</title><link>https://blog.wu-boy.com/2019/09/upload-docker-image-to-github-registry-using-drone/</link><pubDate>Sat, 07 Sep 2019 02:42:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/09/upload-docker-image-to-github-registry-using-drone/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/tR9wbUwpzzbEUnDDsZlo0jnL1AaTZRLo-T4D7Dz-PE5mN9cj6vQ94bJVzoOdUPlZtJEjxkxJvCe5WFgzKyclj94HBZdo9FMCnY5_b98ZG88pGN5v9A6jLSbY-dnz2oetLiuSi1pYI7E=w1920-h1080" title="github">&lt;img src="https://lh3.googleusercontent.com/tR9wbUwpzzbEUnDDsZlo0jnL1AaTZRLo-T4D7Dz-PE5mN9cj6vQ94bJVzoOdUPlZtJEjxkxJvCe5WFgzKyclj94HBZdo9FMCnY5_b98ZG88pGN5v9A6jLSbY-dnz2oetLiuSi1pYI7E=w1920-h1080" alt="github" title="github">&lt;/a>&lt;/p>
&lt;p>很高興收到 &lt;a href="https://github.com">GitHub&lt;/a> 的 Beta 邀請函來開始試用 &lt;a href="https://help.github.com/en/articles/about-github-package-registry">GitHub Package Registry&lt;/a> 相關功能，從說明文件可以知道目前 Registry 支援了好幾種 Package 像是 &lt;a href="https://help.github.com/en/articles/configuring-npm-for-use-with-github-package-registry/">npm&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-rubygems-for-use-with-github-package-registry/">gem&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-docker-for-use-with-github-package-registry/">docker&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-apache-maven-for-use-with-github-package-registry/">mvn&lt;/a> 及 &lt;a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry/">nuget&lt;/a>，這篇主要跟大家介紹如何用 Drone 快速串接 CI/CD 流程的『自動上傳 Docker Image 到 GitHub Registry』，底下來看看如何使用 GitHub 提供的 Docker Registry。&lt;/p></description></item><item><title>用 10 分鐘安裝好 Drone 搭配 GitLab</title><link>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</link><pubDate>Fri, 23 Aug 2019 01:05:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" title="Drone+GitLab">&lt;img src="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" alt="Drone+GitLab" title="Drone+GitLab">&lt;/a>&lt;/p>
&lt;p>如果你沒在使用 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a>，那可以來嘗試看看 &lt;a href="https://drone.io/">Drone CI/CD&lt;/a>，用不到 10 分鐘就可以快速架設好 Drone，並且上傳一個 &lt;code>.drone.yml&lt;/code> 並且開啟第一個部署或測試流程，安裝步驟非常簡單，只需要對 &lt;a href="https://docker.com">Docker&lt;/a> 有基本上的了解，通常都可以在短時間完成 Drone CI/CD 架設。&lt;/p></description></item><item><title>[Drone] 將單一 Job 分配到多台機器，降低部署執行時間</title><link>https://blog.wu-boy.com/2019/08/drone-multiple-machine/</link><pubDate>Mon, 05 Aug 2019 05:40:22 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/drone-multiple-machine/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/q2Z5tLXdw_GINCveZ4860CTUhfnJtrhdSuWt4VItXWggiPnKqc0sI_0lvxz4lfB4v-MoCPNW50H16QwzQUzOwuIfgug6fvwemQme0Km9c9UeEdCYL2cZzHuK7lhZ4lMClDZ07CBVLiM=w1920-h1080" title="drone multiple machine">&lt;img src="https://lh3.googleusercontent.com/q2Z5tLXdw_GINCveZ4860CTUhfnJtrhdSuWt4VItXWggiPnKqc0sI_0lvxz4lfB4v-MoCPNW50H16QwzQUzOwuIfgug6fvwemQme0Km9c9UeEdCYL2cZzHuK7lhZ4lMClDZ07CBVLiM=w1920-h1080" alt="drone multiple machine" title="drone multiple machine">&lt;/a>&lt;/p>
&lt;p>在傳統 CI/CD 流程，都是會在同一台機器上進行，所以當有一個 Job 吃了很大的資源時，其他工作都必須等待該 Job 執行完畢，釋放出資源後，才可以繼續進行。現在 Drone 推出一個新功能，叫做 &lt;a href="https://docs.drone.io/user-guide/pipeline/multi-machine/">Multiple Machine&lt;/a> 機制，現在開發者可以將同一個 Job 內，拆成很多步驟，將不同的步驟丟到不同機器上面去執行，降低部署執行時間，假設現在有兩台機器 A 及 B，你可以將前端的測試丟到 A 機器，後端的測試，丟到 B 機器，來達到平行處理，並且享受兩台機器的資源，在沒有這機制之前，只能在單一機器上面跑平行處理，沒有享受到多台機器的好處。&lt;/p></description></item><item><title>透過 Drone CLI 手動觸發 CI/CD 流程</title><link>https://blog.wu-boy.com/2019/07/trigger-the-drone-job-via-promotion/</link><pubDate>Tue, 30 Jul 2019 15:12:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/07/trigger-the-drone-job-via-promotion/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/72xMoCcL6pClsS5eH08zTP2ksHlV2XaRVhtSDuyYnZ-nDBtXR5dxVyGp6WIE-RJ48WL4ZEwTyAijcmua7ade_GGzJ6yDfcolY2h4ejUGASUjWoDXHQ1okvElcJY7tpf7bxnVc3rrZ7Y=w1920-h1080" title="drone promotion">&lt;img src="https://lh3.googleusercontent.com/72xMoCcL6pClsS5eH08zTP2ksHlV2XaRVhtSDuyYnZ-nDBtXR5dxVyGp6WIE-RJ48WL4ZEwTyAijcmua7ade_GGzJ6yDfcolY2h4ejUGASUjWoDXHQ1okvElcJY7tpf7bxnVc3rrZ7Y=w1920-h1080" alt="drone promotion" title="drone promotion">&lt;/a>&lt;/p>
&lt;p>相信大家對於 &lt;a href="https://cloud.drone.io/">Drone&lt;/a> 並不陌生，這次來介紹 Drone 1.0 的新功能 (更多的 1.0 功能會陸續介紹，也可以參考&lt;a href="https://blog.wu-boy.com/2019/04/cicd-drone-1-0-feature/">之前的文章&lt;/a>)，叫做 promotion，為什麼作者會推出這功能呢？大家在團隊工作時，有些步驟真的無法導入 CI/CD 自動化流程，而是需要人工介入後，再做後續處理？相信一定會遇到此狀況，PM 或老闆看過沒問題後，才需要手動觸發流程，在此功能以前，都會麻煩工程師幫忙做後續自動化流程，但是有了 &lt;a href="https://docs.drone.io/user-guide/pipeline/promotion/">promotion&lt;/a>，現在連 PM 都可以透過 Drone CLI 來自己做部署啦，這邊就是介紹給大家，如何透過 &lt;a href="https://github.com/drone/drone-cli">Drone CLI&lt;/a> 指令來觸發已存在的工作項目。&lt;/p></description></item><item><title>架設 Go Proxy 服務加速 go module 下載速度</title><link>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</link><pubDate>Wed, 10 Jul 2019 22:54:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org">Go 語言&lt;/a>在 1.11 推出 go module 來統一市面上不同管理 Go 套件的工具，像是 &lt;a href="https://github.com/golang/dep">dep&lt;/a> 或 govendor 等，還不知道如何使用 go module，可以參考之前寫的一篇文章『&lt;a href="https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/">Go Module 導入到專案內且搭配 Travis CI 或 Drone 工具&lt;/a>』，在團隊內如果每個人在開發專案時，都透過網路去下載專案使用到的套件，這樣 10 個人就會浪費 10 個人的下載時間，並且佔用公司網路頻寬，所以我建議在公司內部架設一台 Go Proxy 服務，減少團隊在初始化專案所需要的時間，也可以減少在跑 CI/CD 流程時，所需要花費的時間，測試過公司 CI/CD 流程，有架設 Go Proxy，一般來說可以省下 1 ~ 2 分鐘時間，根據專案使用到的相依性套件用量來決定花費時間。本篇來介紹如何架設 &lt;a href="https://github.com/gomods/athens">ATHENS&lt;/a> 這套開源 Go Proxy 專案。&lt;/p></description></item><item><title>用 Ansible 安裝 Drone CI/CD 開源專案</title><link>https://blog.wu-boy.com/2019/06/install-drone-ci-cd-using-ansible/</link><pubDate>Mon, 17 Jun 2019 07:18:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/06/install-drone-ci-cd-using-ansible/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HZqWLZjp96azorhAZseeSbSj9Q5-dj99lM8cX4ApJjnDL0grXaMEoIHJl3dQEx-ZyFcI713_CeQlPSFMOLgxD19tBOLMmgdQlwMe_QMhwGKrh2pQDWE2bj4cul4ENt21sWRFOYq6agc=w1920-h1080" title="drone and ansible">&lt;img src="https://lh3.googleusercontent.com/HZqWLZjp96azorhAZseeSbSj9Q5-dj99lM8cX4ApJjnDL0grXaMEoIHJl3dQEx-ZyFcI713_CeQlPSFMOLgxD19tBOLMmgdQlwMe_QMhwGKrh2pQDWE2bj4cul4ENt21sWRFOYq6agc=w1920-h1080" alt="drone and ansible" title="drone and ansible">&lt;/a>&lt;/p>
&lt;p>相信大家對於 &lt;a href="https://github.com/drone/drone">Drone 開源專案&lt;/a>並不陌生，如果對於 Drone 不了解的朋友們，可以直接看之前寫的&lt;a href="https://blog.wu-boy.com/?s=drone">系列文章&lt;/a>，本篇要教大家如何使用 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 來安裝 Drone CI/CD 開源專案。目前 Drone 可以支援兩種安裝方式: 1. 使用 Docker 2. 使用 binary，如果您是進階開發者，可以使用 binary 方式來安裝，像是在 Debug 就可以透過 build binary 方式來測試。一般來說都是使用 Docker 方式來安裝，在使用 ansible 之前，請先準備一台 Ubuntu 或 Debian 作業系統的 VM 來測試。&lt;/p></description></item><item><title>CI/CD 大亂鬥: Drone 1.0 功能介紹</title><link>https://blog.wu-boy.com/2019/04/cicd-drone-1-0-feature/</link><pubDate>Mon, 22 Apr 2019 03:34:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/04/cicd-drone-1-0-feature/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/8kk2MLpEg38HGO6sYA2r1EOaJ6mNjhsS65H1tRwKSbmSgdhr-mRh6UH2tQwVucMNtMAbbIoa5DHn1mu-lcX-P6fKbRrs-sRJ3N9DjdaHwE-RS4RqxqYdwE6GO1mtyTtdvgdAFTAJ7ws=w1920-h1080" title="drone ci/cd">&lt;img src="https://lh3.googleusercontent.com/8kk2MLpEg38HGO6sYA2r1EOaJ6mNjhsS65H1tRwKSbmSgdhr-mRh6UH2tQwVucMNtMAbbIoa5DHn1mu-lcX-P6fKbRrs-sRJ3N9DjdaHwE-RS4RqxqYdwE6GO1mtyTtdvgdAFTAJ7ws=w1920-h1080" alt="drone ci/cd" title="drone ci/cd">&lt;/a>&lt;/p>
&lt;p>很高興受到 &lt;a href="https://www.facebook.com/groups/DevOpsTaiwan/">Devops Taiwan&lt;/a> 邀請到台北講『&lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 1.0 新功能』，現場太多 CI/CD 工具一起 PK，有興趣可以看&lt;a href="https://devopstw.club/">活動網頁&lt;/a>。其實我在其他場合講過很多次 &lt;a href="https://www.slideshare.net/appleboy/drone-cicd-platform">Drone 的基礎&lt;/a>，所以這次上台北最主要探討 Drone 在今年 2019 Release 1.0 的一些重大功能，我相信大家在用舊的版本已經很順了，其實如果不升級到新的版本也是沒差。底下我會一一介紹 1.0 的新功能。有&lt;a href="https://hackmd.io/ijAIcc3KRZmBHwrrB96epg">共筆紀錄&lt;/a>，大家可以先參考看看。&lt;/p></description></item><item><title>10 分鐘內用 Traefik 架設 Drone 搭配 GitHub 服務</title><link>https://blog.wu-boy.com/2019/03/setup-traefik-with-drone-ci-cd-in-ten-minutes/</link><pubDate>Fri, 22 Mar 2019 06:12:41 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/03/setup-traefik-with-drone-ci-cd-in-ten-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HIVQn1cNncIZ8EdJ7P-Nc9ohmuoSgGfnhB0Nfjl3fxsSoZ_RUBrz0yPB73EQy2Plc5NB1919QKsU7gwioFV0A9f-kD46qFovSkeJBO64iKPnTxZ860YGjdhRDMxseJ67OjSVSsEoskY=w2400">&lt;img src="https://lh3.googleusercontent.com/HIVQn1cNncIZ8EdJ7P-Nc9ohmuoSgGfnhB0Nfjl3fxsSoZ_RUBrz0yPB73EQy2Plc5NB1919QKsU7gwioFV0A9f-kD46qFovSkeJBO64iKPnTxZ860YGjdhRDMxseJ67OjSVSsEoskY=w2400" alt="">&lt;/a>&lt;/p>
&lt;p>這標題也許有點誇張，但是如果實際操作一次，肯定可以在 10 分鐘內操作完成。本篇來教大家如何用 &lt;a href="https://traefik.io/">Traefik&lt;/a> 當作前端 Proxy，後端搭配 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 服務接 &lt;a href="https://github.com">GitHub&lt;/a>，為什麼會用 Traefik，原因很簡單，你可以把 Traefik 角色想成是 &lt;a href="https://www.nginx.com/">Nginx&lt;/a>，但是又比 Nginx 更簡單設定，另外一點就是，Traefik 自動整合了 &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a> 服務，您就不用擔心憑證會過期的問題。假如機器只會有一個 Drone 當 Host 的話，其實也可以不使用 Traefik，因為 Drone 其實也是內建自動更新憑證的功能。如果您對 Traefik 有興趣，可以直接參考底下兩篇文章&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/">用 Traefik 搭配 Docker 快速架設服務&lt;/a> (內附教學影片)&lt;/li>
&lt;li>&lt;a href="https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/">Traefik 搭配 Docker 自動更新 Let’s Encrypt 憑證&lt;/a> (內附教學影片)&lt;/li>
&lt;/ul></description></item><item><title>開源專案 Gitea 支援 OAuth Provider</title><link>https://blog.wu-boy.com/2019/03/gitea-support-oauth-provider/</link><pubDate>Sat, 09 Mar 2019 04:52:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/03/gitea-support-oauth-provider/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/SrQvhDJm5NMkrxrut0lACspnz6iQSFCX3vlbtGCuAcwO-i_4iJCJ6trK3V2F6Q6s6fQ_EcSglwAL0qO0aLaTRtk4Ca32EI7Ks1H7u_nI9jC6xn3PF9hhgccjkbN3irX5pGi9kV-vIxk=w1920-h1080" title="Gitea">&lt;img src="https://lh3.googleusercontent.com/SrQvhDJm5NMkrxrut0lACspnz6iQSFCX3vlbtGCuAcwO-i_4iJCJ6trK3V2F6Q6s6fQ_EcSglwAL0qO0aLaTRtk4Ca32EI7Ks1H7u_nI9jC6xn3PF9hhgccjkbN3irX5pGi9kV-vIxk=w1920-h1080" alt="Gitea" title="Gitea">&lt;/a>&lt;/p>
&lt;p>很高興看到 &lt;a href="https://gitea.io" title="Gitea">Gitea&lt;/a> 正式支援 &lt;a href="https://github.com/go-gitea/gitea/pull/5378" title="OAuth Provider ">OAuth Provider&lt;/a> 了，此功能經歷了四個月終於正式合併進 master 分支，預計會在 &lt;a href="https://github.com/go-gitea/gitea/milestone/32" title="1.18 版本">1.8 版本&lt;/a>釋出，由於此功能已經進 master，這樣我們就可以把原本 Drone 透過帳號密碼登入，改成使用 OAtuh 方式了，增加安全性。但是在使用之前，Drone 需要合併 &lt;a href="https://github.com/drone/go-login/pull/3" title="drone/go-login">drone/go-login@3&lt;/a> 及 &lt;a href="https://github.com/drone/drone/pull/2622" title="drone/drone@2622">drone/drone@2622&lt;/a>。如果您會使用 Go 語言，不妨現在就可以來試試看了，透過 go build 來編譯原始碼。&lt;/p></description></item><item><title>在 docker-in-docker 環境中使用 cache-from 提升編譯速度</title><link>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</link><pubDate>Sun, 24 Feb 2019 12:37:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" title="提升 docker build 時間">&lt;img src="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" alt="提升 docker build 時間" title="提升 docker build 時間">&lt;/a>&lt;/p>
&lt;p>在現代 CI/CD 的環境流程中，使用 &lt;a href="https://github.com/jpetazzo/dind">Docker In Docker&lt;/a> 來編譯容器已經相當流行了，像是 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a> 或 &lt;a href="https://github.com/drone/drone" title="Drone">Drone&lt;/a> 都是全走 &lt;a href="https://www.docker.com/" title="Docker">Docker&lt;/a> 環境，然而有很多人建議盡量不要在 CI 環境使用 Docker In Docker，原因在於 CI 環境無法使用 Host Image 資料，導致每次要上傳 Image 到 &lt;a href="https://hub.docker.com/" title="Docker Hub">Docker Hub&lt;/a> 時都需要重新下載所有的 Docker Layer，造成每次跑一次流程都會重複花費不少時間，而這個問題在 &lt;a href="https://github.com/docker/docker/releases/tag/v1.13.0">v1.13&lt;/a> 時被解決，現在只要在編譯過程指定一個或者是多個 Image 列表，先把 Layer 下載到 Docker 內，接著對照 Dockerfile 內只要有被 Cache 到就不會重新再執行，講得有點模糊，底下直接拿實際例子來看看。&lt;/p></description></item><item><title>有效率的用 jsonnet 撰寫 Drone CI/CD 設定檔</title><link>https://blog.wu-boy.com/2019/01/converts-a-jsonnet-configuration-file-to-a-yaml-in-drone/</link><pubDate>Fri, 25 Jan 2019 07:40:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/converts-a-jsonnet-configuration-file-to-a-yaml-in-drone/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/z8q-kl8yaWy9LtUDNEluPfDiHouz0Q7GnQZDStid8j4CmOwgP9uZJsTOCXjmSzTTApmL6fukANr6UbEGAaebb5_iJ1j5LoXPFKtrrf_FdLOGFpt9zyYvdPo8OdpzrZ3qJDDx9CkanNM=w1920-h1080" title="Jsonnet + Drone">&lt;img src="https://lh3.googleusercontent.com/z8q-kl8yaWy9LtUDNEluPfDiHouz0Q7GnQZDStid8j4CmOwgP9uZJsTOCXjmSzTTApmL6fukANr6UbEGAaebb5_iJ1j5LoXPFKtrrf_FdLOGFpt9zyYvdPo8OdpzrZ3qJDDx9CkanNM=w1920-h1080" alt="Jsonnet + Drone" title="Jsonnet + Drone">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 在 1.0 版本推出了用 &lt;a href="https://jsonnet.org">jsonnet&lt;/a> 來撰寫 &lt;a href="https://en.wikipedia.org/wiki/YAML">YAML&lt;/a> 設定檔，方便開發者可以維護多個專案設定。不知道大家有無遇過在啟動新的專案後，需要從舊的專案複製設定到新專案，或者是在 &lt;code>.drone.yml&lt;/code> 內有非常多重複性的設定，假設 &lt;a href="https://golang.org" title="Go 語言">Go 語言&lt;/a>的開源專案需要將執行檔包成 ARM64 及 AMD64 的映像檔，並且上傳到 &lt;a href="https://hub.docker.com/" title="Docker Hub">Docker Hub&lt;/a>，底下是 AMD64 的設定檔範例。剛好在 &lt;a href="https://www.udemy.com/devops-oneday" title="Udemy 課程">Udemy 課程&lt;/a>內有學員詢問到&lt;a href="https://www.udemy.com/devops-oneday/learn/v4/questions/6162884">相關問題&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-10">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-11">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-12">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-13">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-14">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-15">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-15">15&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-16">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-16">16&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-17">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-17">17&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-18">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-18">18&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-19">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-19">19&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-20">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-20">20&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-21">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-21">21&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-22">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-22">22&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-23">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-23">23&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-24">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-24">24&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-25">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-25">25&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-26">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-26">26&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-27">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-27">27&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-28">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-28">28&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-29">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-29">29&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-30">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-30">30&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-31">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-31">31&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-32">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-32">32&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-33">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-33">33&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-34">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-34">34&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-35">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-35">35&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-36">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-36">36&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-37">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-37">37&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-38">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-38">38&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-39">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-39">39&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-40">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-40">40&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-41">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-41">41&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-42">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-42">42&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-43">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-43">43&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-44">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-44">44&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-45">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-45">45&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-46">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-46">46&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-47">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-47">47&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-48">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-48">48&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-49">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-49">49&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-50">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-50">50&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-51">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-51">51&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-52">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-52">52&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-53">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-53">53&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-54">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-54">54&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-55">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-55">55&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-56">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-56">56&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-57">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-57">57&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-58">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-58">58&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-59">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-59">59&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-60">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-60">60&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-61">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-61">61&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-62">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-62">62&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-63">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-63">63&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-64">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-64">64&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-65">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-65">65&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-66">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-66">66&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-67">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-67">67&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-68">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-68">68&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-69">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-69">69&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-70">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-70">70&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-71">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-71">71&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-72">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-72">72&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-73">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-73">73&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-74">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-74">74&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-75">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-75">75&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-76">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-76">76&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>pipeline&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>linux-arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">platform&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">os&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>linux&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">arch&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">steps&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>build-push&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>always&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>golang:1.11&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#cd5555">&amp;#34;go build -v -ldflags \&amp;#34;-X main.build=${DRONE_BUILD_NUMBER}\&amp;#34; -a -o release/linux/arm64/drone-discord&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">environment&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">CGO_ENABLED&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">0&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">GO111MODULE&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">on&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">when&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">event&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- push&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- pull_request&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>build-tag&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>always&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>golang:1.11&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#cd5555">&amp;#34;go build -v -ldflags \&amp;#34;-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}\&amp;#34; -a -o release/linux/arm64/drone-discord&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">environment&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">CGO_ENABLED&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">0&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">GO111MODULE&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">on&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">when&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">event&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- tag&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>executable&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>always&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>golang:1.11&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">commands&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- ./release/linux/arm64/drone-discord --help&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>dryrun&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>always&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>plugins/docker:linux-arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">settings&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">dockerfile&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker/Dockerfile.linux.arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">dry_run&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">password&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker_password&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">repo&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>appleboy/drone-discord&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">tags&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>linux-arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">username&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker_username&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">when&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">event&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- pull_request&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>publish&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>always&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>plugins/docker:linux-arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">settings&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">auto_tag&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">auto_tag_suffix&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>linux-arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">dockerfile&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker/Dockerfile.linux.arm64&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">password&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker_password&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">repo&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>appleboy/drone-discord&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">username&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>docker_username&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">when&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">event&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- push&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- tag&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">trigger&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">branch&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- master&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>用 Traefik 搭配 Docker 快速架設服務</title><link>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</link><pubDate>Tue, 08 Jan 2019 03:51:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</guid><description>&lt;p>&lt;strong>更新: 2019.01.10 新增教學影片&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" title="drone traefik docker deploy">&lt;img src="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" alt="drone traefik docker deploy" title="drone traefik docker deploy">&lt;/a>&lt;/p>
&lt;p>相信大家在架設服務肯定會選一套像是 &lt;a href="http://www.haproxy.org/">HAProxy&lt;/a>, &lt;a href="https://www.nginx.com/" title="Nginx">Nginx&lt;/a>, &lt;a href="https://httpd.apache.org/" title="Apache">Apache&lt;/a> 或 &lt;a href="https://caddyserver.com/" title="Caddy">Caddy&lt;/a>，這四套架設的難度差不多，如果要搭配 &lt;a href="https://letsencrypt.org/" title="Let's Encrypt">Let&amp;rsquo;s Encrypt&lt;/a> 前面兩套需要自己串接 (Nginx, Apache)，而 Caddy 是用 &lt;a href="https://golang.org/" title="Golang">Golang&lt;/a> 開發裡面已經內建了 Let&amp;rsquo;s Encrypt，，管理者不用擔心憑證過期，相當方便。但是本篇我要介紹另外一套工具叫 &lt;a href="https://traefik.io/" title="Traefik">Traefik&lt;/a>，這一套也是用 Go 語言開發，而我推薦這套的原因是，此套可以跟 Docker 很深度的結合，只要服務跑在 Docker 上面，Traefik 都可以自動偵測到，並且套用設定。透過底下的範例讓 Traefik 串接後端兩個服務，分別是 &lt;code>domain1.com&lt;/code> 及 &lt;code>domain2.com&lt;/code>。來看看如何快速設定 Traefik。&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" title="traefik + docker + golang">&lt;img src="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" alt="traefik + docker + golang" title="traefik + docker + golang">&lt;/a>&lt;/p></description></item><item><title>Go Module 導入到專案內且搭配 Travis CI 或 Drone 工具</title><link>https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/</link><pubDate>Sun, 30 Dec 2018 03:07:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/</guid><description>&lt;p>&lt;a href="https://photos.google.com/share/AF1QipPZ8MkcLAazbfRWwBrT1CQpipCL8N_1uAcYosJmJ-o6du2XRRHNEokVarxey5Bp8w?key=clctLU9JYVMzcEdHYWR2dUlVTVZ6YnZUUjlYRG9B&amp;amp;source=ctrlq.org">&lt;img src="https://lh3.googleusercontent.com/Q5CP9S-xtRHxnDRvxDpWWkvBsEVw5C5uRyb5EiBh-UpYkrp_dkZp_oN8yi1WtqwruhSgnwNMB5QjJPxO94ABjG9oLBqmcRjlouNTNmrChIWbQcsAAbuV9eWB1wbsK-x-OY6iolb5ahc=w2400" alt="">&lt;/a>&lt;/p>
&lt;p>相信各位 &lt;a href="http://golang.org">Go 語言&lt;/a>開發者陸陸續續都將專案從各種 &lt;a href="https://github.com/golang/go/wiki/PackageManagementTools">Vendor 工具&lt;/a>轉換到 &lt;a href="https://github.com/golang/go/wiki/Modules">Go Module&lt;/a>，本篇會帶大家一步一步從舊專案轉換到 Go Module，或是該如何導入新專案，最後會結合 CI/CD 著名的兩套工具 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 或 &lt;a href="https://drone.io/">Drone&lt;/a> 搭配 Go Module 測試。&lt;/p></description></item><item><title>用 Docker 整合測試 Flutter 框架</title><link>https://blog.wu-boy.com/2018/12/docker-testing-with-flutter-sdk/</link><pubDate>Wed, 26 Dec 2018 03:56:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/docker-testing-with-flutter-sdk/</guid><description>&lt;p>&lt;a href="https://photos.google.com/share/AF1QipPVsiQNMhQf-l7rJBe-Ki9RMxMVz0x-xSDpayq967sskqwi2bzqgHBQyc9xaby8eA?key=b0xKVW5oSlEwZEl2b0FESUNDVFRGV2dYbkVPRVVB&amp;amp;source=ctrlq.org">&lt;img src="https://lh3.googleusercontent.com/REguGdEy6qgmZyU7hNscYxXV1lGzSTioUb_cBe4uVLdBNUxL2Y9oNwx2J8w6VU8BMcZhBOJoAI091l9lCJuueumNEef7ub75Dvrbl2ZC1Ri9QholsnccGd6txg9rbXP5oZoNIQVl_Fk=w700" alt="">&lt;/a> &lt;a href="https://flutter.io">Flutter&lt;/a> 是一套以 &lt;a href="https://www.dartlang.org/">Dart&lt;/a> 語言為主體的手機 App 開發框架，讓開發者可以寫一種語言產生 iOS 及 Android，只要裝好 Flutter 框架，就可以在個人電腦上面同時測試 iOS 及 Android 流程，如果您需要 Docker 環境，可以直接參考&lt;a href="https://github.com/appleboy/flutter-docker">此開源專案&lt;/a>，裡面已經將 Flutter 1.0 SDK 包在容器，只要將專案目錄掛載到 Docker 內，就可以透過 &lt;code>flutter test&lt;/code> 指令來完成測試，對於 CI/CD 流程使用 Docker 技術非常方便。&lt;/p></description></item><item><title>Drone CI/CD 推出 Cloud 服務支援開源專案</title><link>https://blog.wu-boy.com/2018/12/drone-cloud-service/</link><pubDate>Sun, 09 Dec 2018 11:25:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/drone-cloud-service/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/46191388892/in/dateposted-public/" title="Screen Shot 2018-12-08 at 10.36.20 PM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/46191388892_1446150027_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-12-08 at 10.36.20 PM" data-recalc-dims="1" />&lt;/a> &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 在上個月宣布推出 &lt;a href="https://blog.drone.io/drone-cloud/">Cloud 服務&lt;/a> 整合 &lt;a href="https://github.com">GitHub&lt;/a> 帳戶內的 Repo，只要登入後就可以跑 GitHub 上面的專案自動化整合及測試，原先在 GitHub 上面常見的就是 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 或 &lt;a href="https://circleci.com/">CircleCI&lt;/a>，現在 Drone 也正式加入角逐行列，但是從文中內可以看到其實是由 &lt;a href="http://packet.net/">Packet&lt;/a> 這間公司獨家贊助硬體及網路給 Drone，兩台實體機器，一台可以跑 X86 另外一台可以跑 ARM，也就是如果有在玩 ARM 開發版，現在可以直接在 Drone Cloud 上面直接跑測試。底下是硬體規格:&lt;/p></description></item><item><title>Drone 支援單機版安裝 (內附影片)</title><link>https://blog.wu-boy.com/2018/11/install-drone-in-single-machine/</link><pubDate>Mon, 26 Nov 2018 03:43:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/11/install-drone-in-single-machine/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32181752988/in/dateposted-public/" title="Screen Shot 2018-11-26 at 11.40.28 AM">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4820/32181752988_0112dca2a5_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-26 at 11.40.28 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在上週寫了『&lt;a href="https://blog.wu-boy.com/2018/11/drone-release-1-0-0-rc1/">Drone 推出 1.0.0 RC1 版本&lt;/a>』介紹，裡面提到一個很重要的改變，就是 Drone 現在支援『單機版』安裝了，你會問什麼是單機版安裝？以前不就是可以支援在單台機器把 Drone 給架設起來，那在 1.0.0 RC1 版本指的是什麼意思？在之前的版本，要完整的安裝完成 Drone，需要架設 drone server 及 drone agent，但是在 1.0 版本之後，只需要一個 drone 服務，裡面就內建了 server 及 agent，這很適合用在團隊非常小的狀況底下來快速安裝 drone，假設團隊專案很多，或者是成長很快，建議還是將 server 及 agent 分開架設，未來只需要擴充 agent 即可，底下來看看該如何架設單機版 drone。&lt;/p></description></item><item><title>開源專案 Drone 推出 1.0.0 RC1 版本</title><link>https://blog.wu-boy.com/2018/11/drone-release-1-0-0-rc1/</link><pubDate>Mon, 19 Nov 2018 02:26:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/11/drone-release-1-0-0-rc1/</guid><description>&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4838/45223480124_b038fd86c1_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-19 at 10.12.47 AM" data-recalc-dims="1" />
&lt;p>終於看到 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 作者 &lt;a href="https://twitter.com/bradrydzewski">bradrydzewski&lt;/a> 在 &lt;a href="https://blog.drone.io/drone-1-release-candidate-1/">11/7 號釋出 1.0.0-RC1 版本&lt;/a>，此版本尚未開源在 GitHub 上面，所以目前只能透過 docker 方式來安裝。另外如果您正在用 0.8.x 版本的，不建議現在轉換到 1.0 版本，原因有幾點，第一作者尚未公開原始碼，第二現在公開也才一週而已，還有很多 bug 以及用法都沒有在線上 document 寫很清楚，第三就是作者尚未提供工具從 0.8.x 升級到 1.0.0 RC 版本。根據上述的原因，建議大家先不要轉換，當然如果團隊尚未導入 CI/CD 的話，我強烈建議使用 1.0.0 RC-1 版本。底下來看看 1.0.0 RC-1 做了哪些變動？&lt;/p></description></item><item><title>高雄 Mopcon 濁水溪以南最大研討會 – Drone CI/CD 介紹</title><link>https://blog.wu-boy.com/2018/11/drone-ci-cd-platform-in-mopconf/</link><pubDate>Tue, 06 Nov 2018 05:28:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/11/drone-ci-cd-platform-in-mopconf/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/45693842842/in/dateposted-public/" title="Screen Shot 2018-11-06 at 1.16.22 PM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1948/45693842842_d5fb6105b5_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-06 at 1.16.22 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年又以講者身份參加 &lt;a href="https://mopcon.org">Mopcon&lt;/a> 南區最大研討會，此次回高雄最主要推廣 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 這套 CI/CD 平台。大家可以從過去的 Blog 或影片可以知道我在北部推廣了很多次 Drone 開源軟體，唯獨南台灣還沒講過，所以透過 Mopcon 研討會終於有機會可以來推廣了。本次把 Drone 的架構圖畫出來，如何架設在 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 上以及該如何擴展 drone agent，有興趣的可以參考底下投影片:&lt;/p></description></item><item><title>用 10 分鐘部署專案到 AWS Lambda</title><link>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</link><pubDate>Thu, 25 Oct 2018 03:10:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/43711539730/in/dateposted-public/" title="Screen Shot 2018-10-24 at 9.37.49 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/43711539730_7bd9f610c3_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-10-24 at 9.37.49 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>看到這標題也許非常聳動，也可能覺得不可思議，今天來探討如何將專案直接部署到 &lt;a href="https://aws.amazon.com/tw/lambda/">AWS Lambda&lt;/a> 並且自動化將 &lt;a href="https://aws.amazon.com/tw/api-gateway/">API Gateway&lt;/a> 設定完成。當然要做到完全自動化，必須要使用一些工具才能完成，本篇將介紹由 &lt;a href="https://github.com/tj">TJ&lt;/a> 所開發的 &lt;a href="https://github.com/apex/up">apex/up&lt;/a> 工具，如果您不熟悉 EC2 也不太懂 Command line 操作，本文非常適合您，不需要管理任何 EC2 機器，也不需要在熟悉任何 Linux Command 就可以完成簡單的專案部署。首先為什麼我選擇 apex/up 而不是選擇 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a>，原因是使用 up 工具，您的專案是不用更動任何程式碼，就可以將專案直接執行在 AWS Lambda，那 API Gateway 部分也會一並設定完成，將所有 Request 直接 Proxy 到該 Lambda function。如果您希望對於 AWS Lambda 有更多進階操作，我會建議您用 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a> 或 &lt;a href="https://serverless.com/">Serverless&lt;/a>。您可以想像使用 up 就可以將 AWS Lambda 當作小型的 EC2 服務，但是不用自己管理 EC2，現在 up 支援 &lt;a href="https://golang.org">Golang&lt;/a>, &lt;a href="https://nodejs.org/en/">Node.js&lt;/a>, &lt;a href="https://www.python.org/">Python&lt;/a> 或 Java 程式語言，用一行 command 就可以將專案部署到雲端了。&lt;/p></description></item><item><title>用 Drone CI/CD 整合 Packer 自動產生 GCP 或 AWS 映像檔</title><link>https://blog.wu-boy.com/2018/07/drone-with-hashicorp-packer/</link><pubDate>Sun, 29 Jul 2018 10:57:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/07/drone-with-hashicorp-packer/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/43657047222/in/dateposted-public/" title="Screen Shot 2018-07-29 at 12.47.51 PM">&lt;img src="https://i1.wp.com/farm1.staticflickr.com/856/43657047222_387563a137_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-07-29 at 12.47.51 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇來介紹 &lt;a href="https://www.hashicorp.com/">Hashicorp&lt;/a> 旗下其中一個產品叫 &lt;a href="https://www.packer.io">Packer&lt;/a>，其實在 Hashicorp 旗下有很多其他雲端工具都非常好用，如果大家有興趣都可以上&lt;a href="https://www.hashicorp.com/">官網&lt;/a>參考看看。而 Packer 是用來產生各大雲平台映像檔的工具，平行產生 &lt;a href="https://aws.amazon.com/">AWS&lt;/a>, &lt;a href="https://cloud.google.com/">GCP&lt;/a>, &lt;a href="https://www.docker.com/">Docker&lt;/a> 或 &lt;a href="https://www.digitalocean.com/">DigitalOcean&lt;/a> &amp;hellip; 等等眾多雲平台之映像檔對 Packer 來說相當容易，詳細可以&lt;a href="https://www.packer.io/docs/builders/index.html">參考這邊&lt;/a>，也就是說透過 Packer 來統一管理各大雲平台的映像檔，用 JSON 檔案進行版本控制。假設您有需求要管理工程團隊所使用的 Image，你絕對不能錯過 Packer。Packer 不是用來取代像是 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 或是 &lt;a href="https://www.chef.io/chef/">Chef&lt;/a> 等軟體，而是讓開發者更方便整合 Ansible .. 等第三方工具，快速安裝好系統環境。&lt;/p></description></item><item><title>Drone 搭配 Kubernetes 部署 Go 語言項目</title><link>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</link><pubDate>Tue, 05 Jun 2018 02:36:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/27678088297/in/dateposted-public/" title="Screen Shot 2018-06-04 at 9.19.46 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1738/27678088297_1c6fe64e86_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-06-04 at 9.19.46 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/10/upgrade-kubernetes-container-using-drone/">Drone 搭配 Kubernetes 升級應用程式版本&lt;/a>』，裡面內容最主要介紹 &lt;a href="https://github.com/honestbee">honestbee&lt;/a> 撰寫的 &lt;a href="https://drone.io">drone&lt;/a> 外掛: &lt;a href="https://github.com/honestbee/drone-kubernetes">drone-kubernetes&lt;/a>，但是此外掛並非用 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫，而是用 Shell Script 透過 &lt;code>kubectl set image&lt;/code> 方式來更新專案項目，但是這邊會有幾個缺點，第一點就是假設在 Develop 環境永遠都是吃 master 分支，也就是讀取 Image 的 &lt;code>latest&lt;/code> 標籤，這時候此外掛就無法作用，第二點此外掛無法讀取 kubernetes YAML 檔案，假設專案要修正一個 ENV 值，此外掛也無法及時更新。綜合這兩點因素，只好捨棄此外掛，而本篇會帶給大家另一個用 Go 語言所撰寫的外掛，是由 &lt;a href="https://github.com/Sh4d1">@Sh4d1&lt;/a> 所開發的&lt;a href="https://github.com/Sh4d1/drone-kubernetes/">項目&lt;/a>，用法相當容易，底下會一步一步教大家如何部署 Go 語言項目。&lt;/p></description></item><item><title>[影片教學] 使用 Filter 將專案跑在特定 Drone Agent 服務</title><link>https://blog.wu-boy.com/2018/04/how-to-use-filter-in-drone/</link><pubDate>Sun, 15 Apr 2018 15:26:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/04/how-to-use-filter-in-drone/</guid><description>&lt;p>&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg" alt="cover">&lt;/p>
&lt;p>&lt;a href="https://drone.io">Drone&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 CI/CD &lt;a href="https://github.com/drone/drone">開源專案&lt;/a>，是由一個 Server 跟多個 Agent 所組成，Agent 上面必須安裝好 &lt;a href="https://www.docker.com">Dokcer&lt;/a> 才可以順利測試及部署，但是團隊內會出現一個狀況，每個專案的測試及部署方式不同，有的測試需要 Agent 很多 CPU 或記憶體資源，有的小專案則不需要那麼多，但是當大專案把 agent 系統資源吃光，其他專案都跑不動了，這邊的解決方式就是再建立一台新的 Agent 服務，將需要大量資源的專案跑在該台新的 Agent，Drone 這邊有支援 &lt;code>filter&lt;/code> 功能，讓開發者可以指定專案要跑在哪一台 Agent 上。底下來教大家如何設定 drone filter。&lt;/p></description></item><item><title>Go 語言基礎實戰教學影片上線了</title><link>https://blog.wu-boy.com/2018/03/golang-introduction-video/</link><pubDate>Thu, 29 Mar 2018 01:45:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/golang-introduction-video/</guid><description>&lt;p>&lt;img src="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg" alt="cover">&lt;/p>
&lt;p>去年在台灣推廣 &lt;a href="https://drone.io/">Drone&lt;/a> 這套由 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫的&lt;a href="https://github.com/drone/drone">開源專案&lt;/a>，身為維護者之一，也將 Drone 跟 &lt;a href="https://github.com/go-gitea/gitea">Gitea&lt;/a> 完成整合。如果對於從開發到部署整個流程，還不是很了解的朋友，我個人就是推薦使用 Drone，去年九月也推出 Drone 的教學影片系列:『&lt;a href="https://www.udemy.com/devops-oneday/?couponCode=DRONE-DEVOPS">一天學會自動化測試及部署&lt;/a>』，在公司使用 Drone 到現在，不曾看到服務中斷，啟動速度也是毫秒等級。為什麼會這麼穩定及快速呢？當然要歸功於 Go 語言。而這次我個人針對 Go 語言，錄製了一份基礎教學『&lt;a href="https://www.udemy.com/golang-fight/?couponCode=GOLANG-INTRO">GO 語言基礎實戰&lt;/a>』&lt;/p></description></item><item><title>Drone CI/CD 系統簡介</title><link>https://blog.wu-boy.com/2018/01/introduction-to-drone-cicd/</link><pubDate>Thu, 18 Jan 2018 02:27:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/01/introduction-to-drone-cicd/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/38854798135/in/dateposted-public/" title="Screen Shot 2018-01-18 at 10.21.43 AM">&lt;img src="https://i1.wp.com/farm5.staticflickr.com/4660/38854798135_a4ed025e7f_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-01-18 at 10.21.43 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興到 &lt;a href="https://www.facebook.com/groups/GCPUG.TW/">GCPUG.TW&lt;/a> 分享『Drone CI/CD 系統簡介』，會議介紹了 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 系統架構，這套是由 &lt;a href="https://golang.org">Go 語言&lt;/a>所開發，前兩年我參加了 Drone 開源專案的開發，也貢獻了數個 &lt;a href="http://plugins.drone.io/">Drone Plugin&lt;/a>，去年我正式開始宣傳 Drone 的好處及優勢，以及為什麼要從 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://jenkins.io/">GitLab CI&lt;/a> 轉換到 Drone，會議大綱如下，很感謝 &lt;a href="https://www.qnap.com/zh-tw/">QNAP&lt;/a> 提供現場直播及錄影。&lt;/p></description></item><item><title>在本機端導入 Drone CLI 做專案測試</title><link>https://blog.wu-boy.com/2017/12/drone-cli-local-testing/</link><pubDate>Sun, 24 Dec 2017 03:16:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/12/drone-cli-local-testing/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫的 CI/CD 開源專案，透過 &lt;code>.drone.yml&lt;/code> 檔案方式讓開發者可以自行撰寫測試及部署流程。大家一定會認為要先架設好 Drone 伺服器，才能透過 Git Push 方式來達到自動化測試及部署專案。現在跟大家介紹，如果你的團隊尚未架設 Drone 服務，但是又想要使用 Drone 透過 Yaml 方式所帶來的好處，很簡單，你只需要透過 Drone CLI 工具就可以完成，不需要架設任何一台 Drone 服務，只要學會 Yaml 方式如何撰寫，就可以透過 &lt;code>drone exec&lt;/code> 指令來完成。好處是寫完 .drone.yml 檔案，未來圖隊如果正式架設了 Drone 服務，就可以無痛升級，沒有的話，也可以透過 CLI 工具在公司專案內單獨使用，這比寫 docker-compose.yml 方式還要快很多。本篇會介紹使用 &lt;code>drone exec&lt;/code> 的小技巧。&lt;/p></description></item><item><title>Drone Secret 安全性管理</title><link>https://blog.wu-boy.com/2017/11/drone-secret-security/</link><pubDate>Mon, 20 Nov 2017 01:34:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/drone-secret-security/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套以 &lt;a href="https://www.docker.com/what-container">Docker 容器&lt;/a>技術為主的 &lt;a href="https://www.docker.com/use-cases/cicd">CI/CD&lt;/a> 開源專案，來聊聊 Drone 如何管理專案內的 Secret 資料，首先先來定義什麼是 Secret，舉個簡單例子，Drone 可以輕易完成基本打包+上傳到遠端伺服器，過程中一定會需要用到兩個 Plugin，就是 &lt;a href="https://github.com/appleboy/drone-scp">drone-scp&lt;/a> 及 &lt;a href="https://github.com/appleboy/drone-ssh">drone-ssh&lt;/a>，而使用這兩個 plugin 需要有一組 Password 或是一把金鑰 (Public Key Authentication)，在 Drone 可以透過後台 UI 介面將密碼或者是金鑰內容儲存在 Secret 設定頁面。預覽圖如下:&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/24659201508/in/dateposted-public/" title="Screen Shot 2017-11-20 at 9.10.10 AM">&lt;img src="https://i1.wp.com/farm5.staticflickr.com/4561/24659201508_1517253288_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-11-20 at 9.10.10 AM" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>Gorush 輕量級手機訊息發送服務</title><link>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</link><pubDate>Wed, 01 Nov 2017 02:03:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>今年第一次參加濁水溪以南最大研討會 &lt;a href="https://mopcon.org/2017/">Mopcon&lt;/a>，給了一場議程叫『&lt;a href="https://www.slideshare.net/appleboy/gorush-a-push-notification-server-written-in-go">用 Go 語言打造輕量級 Push Notification 服務&lt;/a>』，身為南部人一定要參加 Mopcon，剛好透過此議程順便發佈新版 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a>，其實今年投稿 Mopcon 最主要是回家鄉宣傳 &lt;a href="https://www.google.com">Google&lt;/a> 所推出的 &lt;a href="https://golang.org/">Go&lt;/a> 語言，藉由實際案例來跟大家分享如何入門 Go 語言，以及用 Go 語言最大好的好處有哪些。底下是此議程大綱:&lt;/p>
&lt;ul>
&lt;li>為什麼建立 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a> 專案&lt;/li>
&lt;li>如何用 Go 語言實作&lt;/li>
&lt;li>用 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 自動化測試及部署&lt;/li>
&lt;li>在 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 上跑 Gorush&lt;/li>
&lt;/ul></description></item><item><title>Drone 搭配 Kubernetes 升級應用程式版本</title><link>https://blog.wu-boy.com/2017/10/upgrade-kubernetes-container-using-drone/</link><pubDate>Tue, 10 Oct 2017 16:02:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/10/upgrade-kubernetes-container-using-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36944908123/in/dateposted-public/" title="Screen Shot 2017-10-10 at 9.22.48 PM">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4481/36944908123_68ecdb8139_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-10-10 at 9.22.48 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇要教大家如何透過 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 搭配 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 自動化升級 App container 版本。為什麼我只說升級 App 版本，而不是升級或調整 K8S Deployment 架構呢 (&lt;code>kubectl apply&lt;/code>)？原因是本篇會圍繞在 &lt;a href="https://github.com/honestbee">honestbee&lt;/a> 撰寫的 drone 外掛: &lt;a href="https://github.com/honestbee/drone-kubernetes">drone-kubernetes&lt;/a>，此外掛是透過 Shell Script 方式搭配 &lt;a href="https://kubernetes.io/docs/user-guide/kubectl-overview/">kubectl&lt;/a> 指令來完成升級 App 版本，可以看到程式原始碼並無用到 &lt;code>kubectl apply&lt;/code> 方式來升級，也並非用 &lt;a href="https://golang.org">Go 語言&lt;/a>搭配 k8s API 所撰寫，所以無法使用 &lt;a href="https://en.wikipedia.org/wiki/YAML">YAML&lt;/a> 方式來進行 Deployment 的升級。本篇講解的範例都可以在 &lt;a href="https://github.com/go-training/drone-nodejs-example">drone-nodejs-example&lt;/a> 內找到。底下指令就是外掛用來搭配 Drone 參數所使用。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl &lt;span style="color:#658b00">set&lt;/span> image &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> deployment/nginx-deployment &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> &lt;span style="color:#00688b">nginx&lt;/span>=nginx:1.9.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>