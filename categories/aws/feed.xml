<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/aws/</link><description>Recent content in AWS on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 27 Jun 2021 11:35:53 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/aws/feed.xml" rel="self" type="application/rss+xml"/><item><title>AI 團隊整合導入 AWS SageMaker 流程</title><link>https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/</link><pubDate>Sun, 27 Jun 2021 11:35:53 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/REuJgTP.png" alt="Flow">&lt;/p>
&lt;h2 id="團隊困境">團隊困境&lt;/h2>
&lt;p>如果團隊未來想把&lt;a href="https://medium.com/@troy801125/machine-learning-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E5%92%8C%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E6%98%AF%E4%BB%80%E9%BA%BC-49a6ba41ab3e">機器學習&lt;/a>推廣成一個服務，可以讓開發者帶入不同的參數進行客製化的學習，最終拿到學習過的 Model。或是團隊資源不夠，想要使用大量的 GPU 資源來加速 AI Model Training，這時就是要朝向使用第三方資源像是 &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html">AWS SageMaker&lt;/a> 來進行整合。而在團隊內會分成機器學習團隊，及後端團隊，前者是專門進行資料分析及 AI Model 演算法及程式碼開發，後者則是專攻全部工作流程，從產生測試資料，前置準備，到 Training Model，及將產生的結果發送給開法者，這整段流程會由後端團隊進行串接。所以當我們要用第三方服務時 AWS SageMaker，對於機器學習團隊來說，要將整個環境打包成容器模式，並且符合 SageMaker 所規定的格式，&lt;strong>過程相當複雜&lt;/strong>，而為了讓開發環境統一，我們使用了&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/docker-containers.html">容器技術&lt;/a> (Docker Container) 來進行 SageMaker 串接，本篇會教大家如何整合 SageMaker 流程，讓機器學習團隊可以專注於 Model 流程開發，而不需要花時間在整合容器技術並符合 SageMaker 格式。&lt;/p></description></item><item><title>用 10 分鐘部署專案到 AWS Lambda</title><link>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</link><pubDate>Thu, 25 Oct 2018 03:10:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/43711539730/in/dateposted-public/" title="Screen Shot 2018-10-24 at 9.37.49 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/43711539730_7bd9f610c3_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-10-24 at 9.37.49 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>看到這標題也許非常聳動，也可能覺得不可思議，今天來探討如何將專案直接部署到 &lt;a href="https://aws.amazon.com/tw/lambda/">AWS Lambda&lt;/a> 並且自動化將 &lt;a href="https://aws.amazon.com/tw/api-gateway/">API Gateway&lt;/a> 設定完成。當然要做到完全自動化，必須要使用一些工具才能完成，本篇將介紹由 &lt;a href="https://github.com/tj">TJ&lt;/a> 所開發的 &lt;a href="https://github.com/apex/up">apex/up&lt;/a> 工具，如果您不熟悉 EC2 也不太懂 Command line 操作，本文非常適合您，不需要管理任何 EC2 機器，也不需要在熟悉任何 Linux Command 就可以完成簡單的專案部署。首先為什麼我選擇 apex/up 而不是選擇 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a>，原因是使用 up 工具，您的專案是不用更動任何程式碼，就可以將專案直接執行在 AWS Lambda，那 API Gateway 部分也會一並設定完成，將所有 Request 直接 Proxy 到該 Lambda function。如果您希望對於 AWS Lambda 有更多進階操作，我會建議您用 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a> 或 &lt;a href="https://serverless.com/">Serverless&lt;/a>。您可以想像使用 up 就可以將 AWS Lambda 當作小型的 EC2 服務，但是不用自己管理 EC2，現在 up 支援 &lt;a href="https://golang.org">Golang&lt;/a>, &lt;a href="https://nodejs.org/en/">Node.js&lt;/a>, &lt;a href="https://www.python.org/">Python&lt;/a> 或 Java 程式語言，用一行 command 就可以將專案部署到雲端了。&lt;/p></description></item></channel></rss>