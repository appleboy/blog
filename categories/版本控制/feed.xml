<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>版本控制 on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><description>Recent content in 版本控制 on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Thu, 28 Apr 2016 02:30:06 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/feed.xml" rel="self" type="application/rss+xml"/><item><title>Git Flow 與團隊合作</title><link>https://blog.wu-boy.com/2016/04/git-flow-tips/</link><pubDate>Thu, 28 Apr 2016 02:30:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/git-flow-tips/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/26620468361/in/dateposted-public/" title="branching-illustration@2x">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1584/26620468361_7fe972425a_z.jpg?resize=640%2C413&amp;#038;ssl=1" alt="branching-illustration@2x" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本月最後一篇投影片來介紹 &lt;a href="https://git-scm.com/">Git&lt;/a> Flow 流程該如何導入團隊，之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">Git branch model&lt;/a> 文章，裡面提到該如何正確使用 branch，但是現在回想起來要導入團隊內真的是有點麻煩，也遇到蠻多問題的，後來最後只採用 &lt;a href="https://guides.github.com/introduction/flow/">Github Flow&lt;/a>，簡單又容易理解，如果開發者很常在 &lt;a href="https://github.com">Github&lt;/a> 活動，相信對於此方法並不會很陌生。&lt;/p></description></item><item><title>Git tips: 更改 commit log 作者</title><link>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</link><pubDate>Thu, 11 Feb 2016 16:11:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</guid><description>在 Github 上面看到這 git-blame-someone-else 專案，用來隨時修改 commit log 作者，也就是可以任意改 commit id 內的 `Author` 欄位資訊，作者也相當幽默，直接拿此 commit id 改成 Linux 作者 Linus Torvalds。
使用時機 大家會問到什麼時候才會用到需要修改 commit 作者，以我自己的狀況為例，在團隊內開發新功能會直接開新的 Branch 來開發，完成後會進行 code review，此時原開發者目前正在忙其他專案，其他團隊成員就必須幫忙修改原先 commit 內容，通常我是直接建議透過 `git reset &amp;ndash;soft HEAD^` 來更動原本 commit，而不是產生新的 commit，修改後作者就會變成自己，此時後這功能就派上用場了。
安裝方式 根據源專案是透過 root 權限，將執行檔丟到 `/usr/loca/bin` 目錄底下，但是我個人不建議用這方式，因為還需要 root 權限，要打密碼有點麻煩，我建議透過在家目錄建立 `bin` 目錄，並將此目錄加到 `$PATH` 變數內即可。
1 2 3 $ mkdir ~/bin $ wget https://raw.githubusercontent.com/jayphelps/git-blame-someone-else/master/git-blame-someone-else -O ~/bin/git-blame-someone-else $ chmod 755 ~/bin/git-blame-someone-else 修改 .bashrc，加入底下程式碼
1 2 3 4 # add bin folder to $PATH.</description></item><item><title>在 Debian 7.8 安裝 Gitlab 筆記</title><link>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</link><pubDate>Sat, 12 Dec 2015 09:22:02 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</guid><description>&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?w=840&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />
&lt;p>之前寫過一篇 &lt;a href="http://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/">GitLab 快速安裝筆記&lt;/a>，但是這次在 Debian 7.8 上安裝起來遇到蠻多問題，故寫此篇來記錄安裝遇到的問題，也會寫到如何搭配 Nginx 設定。GitLab 分兩種版本，一種是 Community Edition packages 另一種是 Enterprise Edition packages，本篇是記錄 Community 版本安裝步驟，可以到&lt;a href="https://about.gitlab.com/downloads/">下載頁面&lt;/a>選擇您的作業系統，就可以看到安裝方式&lt;/p></description></item><item><title>該如何寫好 git commit message</title><link>https://blog.wu-boy.com/2015/09/how-to-write-git-commit-message/</link><pubDate>Fri, 18 Sep 2015 07:09:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/09/how-to-write-git-commit-message/</guid><description>Git 已經是每天必用的工具，也是團隊間互相合作的重要角色。要寫好 Git commit message，讓團隊成員可以知道每一個 Commit 代表什麼意思，這是非常重要的。網路上看到一篇教您如何寫好 Git commit message，好的 Commit Log 可以讓其他同事快速知道這個 Pull Request 包含了哪些異動，該作者寫了七點，分別如下
將標題與內容中間多一行空白 標題限制 50 字元 標題第一個字必須為大寫 標題最後不要帶上句號 標題內容可以使用強烈的語氣 內容請用 72 字元來斷行 內容可以解釋 what and why vs. how 要強制大家有共通的 commit format 其實很難，所以團隊內會使用 issue track 系統，大家把 issue 或 feature 都開好，在標題列裡面就要強制將 issue number 寫入，然後在 issue 那邊把內容及作法詳細寫清楚，方便追蹤，這樣也是可以的。
PS. 該是強迫自己把 commit log 寫好會比較好，通常在追問題，也時候也會發現自己寫的 Log 不是很清楚。</description></item><item><title>git tips 找尋遺失的 commit 紀錄</title><link>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</link><pubDate>Sat, 04 Jul 2015 11:58:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</guid><description>個人每天常用的常用的三大 Git 指令分別是 git reset, git pull, git rebase，但是呢有時候手殘，常常把 git reset --soft 打成 git reset --hard 造成不可預期的錯誤，朋友圈內也有人常常問我該如何救不見的 commit，其實很容易，git 對於每隔操作後產生的 commit 都會存放在 Local 端，所以基本上不用擔心 commit 記錄會不見，有一種狀況會永遠消失，那就是假設尚未 commit 目前修正過的檔案，然後下 git reset --hard HEAD，這樣的話我想誰都無法幫忙把已修正過的檔案找回來了，原因是連 git 都不知道你改了什麼啊。所以為了避免這情況方生，個人建議開發者，只要開發到一定的階段，務必要下一個 commit 當作記錄，但是你會說，這樣功能開發完後，就會有很多個 commit 非常不好看，這時候可以嘗試 git rebase 將整個功能合併成一個 commit，這樣其他開發者 review 時就會非常清楚。
現在的問題是如果開發者不小心下了 git reset --hard HEAD^，上一個 commit 就會消失了，這時候該如何救回來呢？答案可以使用 git reflog 指令然觀看開發者全部 git 的操作記錄，裡面詳細記載你曾經下過的 git 指令
1 2 3 4 5 6 7 8 $ git reflog 794be8b HEAD@{0}: reset: moving to HEAD^ 5e2be6f HEAD@{1}: commit (amend): update bfa593c HEAD@{2}: cherry-pick: update 794be8b HEAD@{3}: reset: moving to 649c658 794be8b HEAD@{4}: reset: moving to HEAD^ 649c658 HEAD@{5}: commit: update 794be8b HEAD@{6}: commit (initial): addd 上面可以看到之前 commit 的記錄，接著可以透過 git reset --hard xxxxx，或者是用 git cherry-pick xxxxx 將上一個 commit ID 記錄抓回來即可。</description></item><item><title>Git Flow and JavaScript Coding Style</title><link>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</link><pubDate>Sat, 11 Apr 2015 15:05:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 已經是每日必備使用的指令，在平常工作上常常使用到 &lt;a href="http://git-scm.com/docs/git-rebase">git rebase&lt;/a> 或 &lt;a href="http://git-scm.com/docs/git-merge">git merge&lt;/a>，發現很多工程師不知道什麼時候該用 rebase 什麼時候該用 merge，所以做了底下投影片來清楚描述 git rebase 及 merge 的優缺點及使用時機。&lt;/p></description></item><item><title>在 Local 端處理 Github 專案 Pull Request</title><link>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</link><pubDate>Sat, 15 Mar 2014 03:00:27 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95.jpg?resize=500%2C198&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這篇會筆記如何將 &lt;a href="https://github.com/">Github&lt;/a> 上專案內的 &lt;a href="https://help.github.com/articles/using-pull-requests">Pull Request&lt;/a> 拉到 Local 端電腦，雖然現在大部分的 Open Source 都會寫 Unit Test 並且搭配免費的 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 自動化測試，但是有時候也是需要把別人的 Pull Request 拉下來測試後再進行 Merge，而 Github 官方有提供一篇說明文件 &lt;a href="https://help.github.com/articles/checking-out-pull-requests-locally">Checking out pull requests locally&lt;/a>，底下紀錄操作步驟。&lt;/p></description></item><item><title>Gitlab CE + Gitlab CI 打造版本控制及自動測試流程</title><link>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</link><pubDate>Fri, 01 Nov 2013 09:00:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/10605193576/" title="gitlab_logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?resize=320%2C206&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>Git 版本控制不管在嵌入式或 Web 領域都是很受歡迎的工具，尤其是不會遇到像 svn 搞爛 source tree，然後又要 Google 一堆解法。一般公司入門大概就是買 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 服務，一個月才五美金，可以提供五個 Private Project，當然你也可以不付錢，而去使用 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a>，好處就是無限的 Private Project，唯一的限制就是開發者數量，只能在五個以內，設定超過五個，就不給 push 或 pull 了，完成版本控制後，接著就是專案的自動測試，在 github 上面，推的就是 &lt;a href="https://travis-ci.org/" target="_blank">travis-ci&lt;/a>，這也是全部 open source 專案的喜好，你會發現大部分的專案都會放上 &lt;a href="https://github.com/appleboy/backbone-template-engine/blob/master/.travis.yml" target="_blank">.travis.yml&lt;/a>，來告訴 travis 需要的測試步驟，測試步驟完成後，就要將 source code deploy 到 Amazone 或其他雲端服務，到這個服務基本上都要收費了，所以&lt;a href="http://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/" target="_blank">上一篇&lt;/a>有介紹 &lt;a href="https://drone.io/" target="_blank">Drone.io&lt;/a> 服務，可以自動測試加上 Deploy 到遠端機器，不過缺點就是不支援 Private Project，要的話就是要收費。&lt;/p></description></item><item><title>Git rebase + stash 小技巧</title><link>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</link><pubDate>Sun, 18 Aug 2013 03:37:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</guid><description>&lt;p>每天打開電腦，第一件事情就是將專案程式碼更新的最新，以便整合同事新開發的功能，免的跟自己寫的功能衝突，所以最常用用的就是 &lt;code>git pull --rebase origin master&lt;/code>，此命令使用 &lt;code>rebase&lt;/code> 來取代 &lt;code>merge&lt;/code> 程式碼，也可以避免在 log 清單內出現 &lt;code>merge branch master into master&lt;/code> 等字樣，但是如果在開發一半進度時，想同時將同事的程式碼先 merge 進來，會發現無法 merge，git 會請你先將 local 修改過的檔案 commit，才可以讓您更新，所以這時候我們可以用 git stash 方式來解決&lt;/p>
&lt;p>如果你在 master 分支上，並且想 pull 最新的 commit，可以透過底下指令步驟&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git stash --include-untracked
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull --rebase origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git stash pop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Git denying non-fast forward 問題</title><link>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</link><pubDate>Thu, 14 Mar 2013 08:21:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</guid><description>最近幫別公司處理 denying non-fast forward 的 git server 問題，沒事就別動檔案權限，不管是不是修改內容，只要用 chmod 指令，Git 還是會判別檔案變動。處理 git push 直接給我噴
$ git push --force origin masterTotal 0 (delta 0), reused 0 (delta 0) error: denying non-fast forward refs/heads/master (you should pull first) To git@git.example.com:myrepo.git ! [remote rejected] master -> master (non-fast forward) error: failed to push some refs to 'git@git.example.com:myrepo.git' 會遇到這問題的原因是使用者將不該 commit 的程式碼都 push 到伺服器上面，例如資料庫帳號密碼，個人帳蜜等等，這真的是不應該，解決方式也沒有很難，只要用 git reset --hard 到您需要的 commit hash 值，並且 git push --force 方式蓋掉 Server 上面的程式碼，但是如果遇到 git push &amp;ndash;force origin 或 git push &amp;ndash;force origin master 都無作用，那就請加上底下設定</description></item><item><title>新人 Git 版本控制教學</title><link>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</link><pubDate>Mon, 06 Feb 2012 03:34:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</guid><description>昨日去台北簡報如何快速學習 git，投影片主要是給新手 git 基礎介紹，如何使用 branch model，git submodule 及 tag。內容不會很難，適合之前就玩過任何一套 version control 的使用者來閱讀，如果有 svn 基礎，學習會比較輕鬆。簡報搭配 github 內容來教學。
投影片內容參考 Git Pro book 這網站教學，大家可以直接看原文說明，會更清楚 Git 使用。</description></item><item><title>Github 支援 SVN Client</title><link>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</link><pubDate>Sun, 23 Oct 2011 05:43:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</guid><description>Github 一年前宣佈開始支援 SVN Client，不過這是必須透過 https://svn.github.com 才可以取得資料，跟一般 git 的網址不一樣，然而就在最近宣佈了同步支援 svn 也可以存取 https://github.com/，並且過不久的將來會移除 https://svn.github.com/ 網域。
URL 處理 git 方式: $ git clone https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan git-dsCloning into git-ds...remote: Counting objects: 4177, done.remote: Compressing objects: 100% (665/665), done.remote: Total 4177 (delta 3544), reused 4140 (delta 3509)Receiving objects: 100% (4177/4177), 2.65 MiB | 239 KiB/s, done.Resolving deltas: 100% (3544/3544), done. svn 方式: $ svn checkout https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan svn-dsA svn-ds/branchesA svn-ds/branches/developA svn-ds/branches/develop/READMEA svn-ds/branches/develop/changelog.</description></item><item><title>轉移 Github 上的 Private Repository 到 BitBucket …</title><link>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</link><pubDate>Mon, 17 Oct 2011 06:45:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</guid><description>&lt;div style="margin:auto 0; text-align: center;">
 &lt;a href="https://www.flickr.com/photos/appleboy/6209323485/" title="Bitbucket by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6161/6209323485_9ffbcb2911_o.png?resize=256%2C256&amp;#038;ssl=1" alt="Bitbucket" data-recalc-dims="1" />&lt;/a>
&lt;/div> 看到 
&lt;p>&lt;a href="http://blog.gslin.org/" target="_blank">gslin 大神&lt;/a>寫了一篇 &lt;a href="http://blog.gslin.org/archives/2011/10/10/2750/%e6%8a%8a-github-%e4%b8%8a%e7%9a%84-private-repository-%e6%90%ac%e5%88%b0-bitbucket-%e4%b8%8a/" target="_blank">把 GitHub 上的 private repository 搬到 BitBucket 上…&lt;/a>，最近自己也把一些不能公開的專案轉到 &lt;a href="https://bitbucket.org/" target="_blank">BitBucket&lt;/a> 上面，由於在 BitBucket 上面可以無限開 private repository，所以我想也沒有必要付費給 &lt;a href="https://github.com/" target="_blank">Github&lt;/a>，雖然論 Web 功能上而言，Github 還是略勝一籌，個人還是比較習慣 github 有 Network 的圖形可以看，不過平常還是都是在打指令，所以也沒差了，在 push 速度上面，感覺 BitBucket 也沒有輸 github 許多，所以決定就轉過去了，人總是為了錢所考量，當然 BitBucket 還是有些缺點的，可以參考之前寫的 &lt;a href="http://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/" target="_blank">Bitbucket 開始支援 Git Repository&lt;/a>&lt;/p></description></item><item><title>在 CentOS 上面安裝 Ruby 環境</title><link>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</link><pubDate>Thu, 13 Oct 2011 08:20:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6239698353/" title="centos by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm7.static.flickr.com/6176/6239698353_3e6c99f692_o.png?resize=293%2C79&amp;#038;ssl=1" alt="centos" data-recalc-dims="1" />&lt;/a>
&lt;/div> 目前開發網站都傾向於用 
&lt;p>&lt;a href="http://compass-style.org" target="_blank">Compass&lt;/a> 這套 CSS Framework 來 develop，開發之前必須把環境先弄好，就是要有 &lt;a href="http://www.ruby-lang.org/" target="_blank">Ruby&lt;/a> 套件才可以安裝 Compass，網路上的教學幾乎都在是 Ubuntu 底下用 apt-get 方式來安裝，其實相當方便，但是 &lt;a href="http://fedoraproject.org/" target="_blank">Fedora&lt;/a> 或 &lt;a href="http://www.centos.org/" target="_blank">CentOS&lt;/a> 就是要用 yum 方式來安裝，這次碰到 CentOS 竟然 yum search git 出來的結果是空的，所以決定全部都透過 tar 的方式來安裝全部套件了。由於 Fedora 幾乎都可以找到套件，但是碰到 &lt;a href="http://rubygems.org/" target="_blank">rubygems&lt;/a> 需要用到 ruby 1.8.7 以上版本，所以還是乖乖的用 tar 方式吧。 大家可以試試看透過底下 yum 方式安裝:&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">yum install -y ruby ruby-devel rubygems&lt;/pre> 雖然 Fedora 透過上面可以安裝成功，可是 ruby 跟 rubygems 的版本根本是...太舊了吧 ...</description></item><item><title>Bitbucket 開始支援 Git Repository</title><link>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</link><pubDate>Tue, 04 Oct 2011 02:30:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</guid><description>很高興剛剛收到 Bitbucket 寄來一封會員信，標題非常吸引大家的注意，那就是 Bitbucket now rocks Git.，是的，你沒看錯，Bitbucket 現在開始支援 Git repository，不再只有 Mercurial 可以使用，這還不算什麼，Bitbucket 更是推出**無限制免費 private repos for free **，這樣的推出，不知道會有多少 Github 用戶轉移到 Bitbucket 上面，還有另一項主因就是 Unlimited disk space 無限制硬碟容量，不過也許不用高興的太早，Bitbucket 在使用者人數上面有些限制，可以參考 Plans &amp;amp; Pricing，免費方案每個 Repository 只能有5個 User，反觀 Github 並沒有這限制，不過我想這也不是問題，大家可以 Fork 到自己的專案，在 Pull Request 即可。 補充官方網站提供了轉換各大 Source Hosting 工具，目前支援 Github、SourceForge、Google Code、Subversion、Mercurial…等。</description></item><item><title>版本控制 svn move 移動或更名</title><link>https://blog.wu-boy.com/2011/09/svn-mv-vs-git-mv/</link><pubDate>Tue, 27 Sep 2011 06:06:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/09/svn-mv-vs-git-mv/</guid><description>公司採用 svn 當作版本控制，而我最近在整理 svn 上面全部的 source code。基本上我都會將 git 跟 svn 也一起搭配著用，因為個人比較熟悉 git 的操作方式，然而跟同事討論了專案目錄的架構，進而要把一些目錄轉換大小寫，本來的 App 就改成 app，這個在 git 底下(OS: Linux)操作非常容易，直接 git mv App app，之後看 git status 可以發現底下輸出：
# On branch develop# Changes to be committed:# (use "git reset HEAD ..." to unstage)## renamed: nav/hacks.txt -> Nav/hacks.txt# renamed: nav/moo.fx.js -> Nav/moo.fx.js# renamed: nav/moo.fx.pack.js -> Nav/moo.fx.pack.js# renamed: nav/nav.js -> Nav/nav.js# renamed: nav/prototype.lite.js -> Nav/prototype.lite.js# renamed: nav/user_guide_menu.</description></item><item><title>svn 恢復略過衝突檔案 (conflict file)</title><link>https://blog.wu-boy.com/2011/05/svn-%E6%81%A2%E5%BE%A9%E7%95%A5%E9%81%8E%E8%A1%9D%E7%AA%81%E6%AA%94%E6%A1%88-conflict-file/</link><pubDate>Wed, 04 May 2011 02:27:58 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/05/svn-%E6%81%A2%E5%BE%A9%E7%95%A5%E9%81%8E%E8%A1%9D%E7%AA%81%E6%AA%94%E6%A1%88-conflict-file/</guid><description>當我們利用 svn up 更新程式碼，如果遇到修改相同檔案的相同地方，就會發生衝突 (conflict) 此時就必須修改或者是略過，當選擇略過此檔案就會出現底下訊息
Skipped &amp;rsquo;lib/logs/logDB.txt&amp;rsquo; Skipped &amp;rsquo;lib/confs/Conf.php&amp;rsquo; At revision 912. Summary of conflicts: Skipped paths: 2 之後怎麼用 svn up 更新檔案，都會因此被略過，那該怎麼恢復被略過檔案的狀態，讓它們可以繼續被更新呢？網路上找到一篇 svn local obstruction, incoming add upon merge 解法，用 svn resolve 來解決問題，只要針對該檔案打入底下指令即可
svn resolve --accept working lib/confs/Conf.phpsvn resolve --accept working lib/logs/logDB.txt</description></item><item><title>[Git] 版本控制: 如何使用標籤(Tag)</title><link>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</link><pubDate>Thu, 18 Nov 2010 14:45:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</guid><description>&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> Tag 功能就如同 Cvs Tag 是一樣的，您可以在專案裡面隨意新增 Tag，方便您紀錄訊息，底下一些基本的操作來學習如何使用標籤(Tag)功能(新增標籤、以及各種不同類型標籤之間的差別)。&lt;/p>
&lt;h2 id="列出既有標籤">列出既有標籤&lt;/h2>
&lt;p>直接使用 git tag 即可&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git tag -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果整個專案過多 Tag 也可以透過底下方式搜尋出來&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git tag -l &lt;span style="color:#cd5555">&amp;#39;v1.4.2.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>