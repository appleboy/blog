<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/docker/</link><description>Recent content in Docker on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Fri, 09 Jul 2021 08:28:20 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/docker/feed.xml" rel="self" type="application/rss+xml"/><item><title>打造最小 Python Docker 容器</title><link>https://blog.wu-boy.com/2021/07/building-minimal-docker-containers-for-python-applications/</link><pubDate>Fri, 09 Jul 2021 08:28:20 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/07/building-minimal-docker-containers-for-python-applications/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/p8LKFhI.png" alt="cover">&lt;/p>
&lt;p>現在已經是容器 (container) 的時代，團隊之間合作肯定要打包統一的 &lt;a href="https://www.docker.com/">Docker&lt;/a> Image 來解決環境不一致的問題，但是容器的大小決定了部署微服務的時間，本篇來介紹如何打造最小的 &lt;a href="https://www.python.org/">Python&lt;/a> 容器。如果你需要跨部門合作，Docker 絕對是最棒的工具，讓大家不用為了環境煩惱。底下透過 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/">Flask&lt;/a> Application 來介紹如何撰寫 &lt;a href="https://docs.docker.com/engine/reference/builder/">Dockerfile&lt;/a>。&lt;/p></description></item><item><title>用 docker-compose 優雅關閉服務</title><link>https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/</link><pubDate>Sun, 20 Jun 2021 10:28:17 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="logo">&lt;/p>
&lt;p>大家應該遇過如果服務還有工作還沒處理完，服務要進行更新，需要等到全部工作處理完成才可以將服務的停止，而當服務收到關閉通知信號時，第一要先停止接受 Job 任務，接著等待 Worker 將手上 Job 處理完畢後，才停止服務，接著更新再上線。而這狀況怎麼透過 docker-compose 來處理停止服務，這就是本篇的重點。文章內會用 &lt;a href="https://golang.org/">Go 語言&lt;/a>當教學範例，如何接受 &lt;a href="https://www.docker.com/">Docker&lt;/a> 傳來的 Signal 訊號，接受訊號後該如何處理，及如何設定 docker-compose 的 YAML 檔案確保所有的工作都可以正常執行完畢。&lt;/p>
&lt;p>之前已經有寫過幾篇關於 Graceful Shutdown 教學文章，大家有興趣可以先閱讀底下教學連結資訊，而本篇最主要是紀錄在如何用 docker 指令優雅關閉容器服務，尤其是關閉服務前，可以讓原本服務內的工作可以正常做完，才正式關閉。在本文開始前，先將 &lt;a href="https://www.docker.com/">docker&lt;/a> 及 &lt;a href="https://docs.docker.com/compose/compose-file/">docker-compose&lt;/a> 版本資訊貼出來，避免有資訊的落差，畢竟 docker-compose 在不同版本之間有不同的設定方式。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/">[Go 教學] graceful shutdown 搭配 docker-compose 實現 rolling update&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.wu-boy.com/2020/02/graceful-shutdown-with-multiple-workers/">[Go 教學] graceful shutdown with multiple workers&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>用 Docker 每天自動化備份 MySQL, Postgres 或 MongoDB 並上傳到 AWS S3</title><link>https://blog.wu-boy.com/2020/12/docker-image-to-periodically-backup-your-database-mysql-postgres-or-mongodb-to-s3/</link><pubDate>Sat, 12 Dec 2020 12:07:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/12/docker-image-to-periodically-backup-your-database-mysql-postgres-or-mongodb-to-s3/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/2SGJ7LZpgVIVuKfhXSgm8fP90GLk7r1jgc4Sm-vAptUx43d28wjbv3r7x6U5BfDmJmfDfTlkhABWU9q20UA5Neg5-CITdqbN-djIeftrhdy2SZde-J2iHQTVdDNh9Ah7MEAzYiYyjDE=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/2SGJ7LZpgVIVuKfhXSgm8fP90GLk7r1jgc4Sm-vAptUx43d28wjbv3r7x6U5BfDmJmfDfTlkhABWU9q20UA5Neg5-CITdqbN-djIeftrhdy2SZde-J2iHQTVdDNh9Ah7MEAzYiYyjDE=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>由於備份 &lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> 的指令 &lt;a href="https://docs.postgresql.tw/reference/client-applications/pg_dump">pg_dump&lt;/a> 需要限定特定版本才可以備份，故自己製作用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 容器方式來備份，此工具支援 &lt;a href="https://www.mysql.com/">MySQL&lt;/a>, PostgreSQL 跟 &lt;a href="https://www.mongodb.com/">MongoDB&lt;/a>，只要一個 docker-compose yaml 檔案就可以進行線上的備份，並且上傳到 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a>，另外也可以設定每天晚上固定時間點進行時間備份，也就是平常所設定的 cron job。沒使用 &lt;a href="https://aws.amazon.com/tw/rds/">AWS RDS&lt;/a>，或自行管理機房的朋友們，就可以透過這小工具，進行每天半夜線上備份，避免資料被誤砍。底下教學程式碼都可以&lt;a href="https://github.com/appleboy/docker-backup-database">在這邊找到&lt;/a>。&lt;/p></description></item><item><title>如何將前端網站打包成 Docker Image</title><link>https://blog.wu-boy.com/2020/07/how-to-create-docker-image-in-reactjs-or-vuejs/</link><pubDate>Sun, 26 Jul 2020 14:09:09 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/07/how-to-create-docker-image-in-reactjs-or-vuejs/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/2oJnx10msYCEJymUjCFZy3VspTSETeOGLcH8M5tHP2l2SP1yVtR7cUCZSO-3nc1Z6qQuc0FZMUFHViyfkhIFOz60ZocVZ8TxsneH2qZW7Hkio-TvCSxQ1GUM1sEpUSxRH284tP_VsSk=w1920-h1080" title="cover">&lt;img src="https://lh3.googleusercontent.com/2oJnx10msYCEJymUjCFZy3VspTSETeOGLcH8M5tHP2l2SP1yVtR7cUCZSO-3nc1Z6qQuc0FZMUFHViyfkhIFOz60ZocVZ8TxsneH2qZW7Hkio-TvCSxQ1GUM1sEpUSxRH284tP_VsSk=w1920-h1080" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>以現在開發網站流程，前後端分離已經不稀奇了。前端使用 &lt;a href="https://reactjs.org/">React.js&lt;/a> 或 &lt;a href="https://vuejs.org/">Vue.js&lt;/a>，後端使用 &lt;a href="https://golang.org">Golang&lt;/a>，是我現在擅長的合作模式。其實後端在開發上面不太需要將前端的開發流程放在自己的電腦上，也就是後端只需要專注開發後端，跟前端的溝通都會是透過 &lt;a href="https://graphql.org/">GraphQL&lt;/a> 的 &lt;a href="https://graphql.org/learn/schema/">Schema&lt;/a> 當作討論。目前團隊各自維護專案的部署流程會是最好的方式，前端有兩種方式部署，一種是透過打包靜態檔案方式丟到遠端伺服器，另一種就是打包成 &lt;a href="https://www.docker.com/">Docker&lt;/a> Image，再連線到遠端伺服器更新，兩者都有人使用，本篇會教大家如何將前端網站打包成 Docker Image，用 Image 來部署會是最方便的。&lt;/p></description></item><item><title>使用 Docker BuildKit 加速編譯 Image</title><link>https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/</link><pubDate>Sun, 26 Apr 2020 05:29:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/fr-DxVaFf3lryJs-FUfDOp-azBpG7_atca4zJGuipRMUshXX-ICZXB9PdrqevF8DHRwUhG8gVrfI8jSv5LjS0Yj4R-dovaucEyCZ8U6hz68iYYU30RTFqdjO-u8ozGaPmPsyD5Ax-4c=w1920-h1080" title="docker buildkit">&lt;img src="https://lh3.googleusercontent.com/fr-DxVaFf3lryJs-FUfDOp-azBpG7_atca4zJGuipRMUshXX-ICZXB9PdrqevF8DHRwUhG8gVrfI8jSv5LjS0Yj4R-dovaucEyCZ8U6hz68iYYU30RTFqdjO-u8ozGaPmPsyD5Ax-4c=w1920-h1080" alt="docker buildkit" title="docker buildkit">&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/go-training/docker-buildkit-demo">程式碼範例請看這邊&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>之前就有看到 &lt;a href="https://docker.com">Docker&lt;/a> 推出 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">BuildKit&lt;/a> 功能，這次跟大家介紹什麼是 BuildKit。現在部署編譯流程肯定都會用到 Docker，不管測試及部署都盡量在 Docker 內實現，來做到環境隔離，但是要怎麼縮短 Docker 在編譯 Image 時間，這又是另外的議題，本篇跟大家介紹一個實驗性的功能就是 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">BuildKit&lt;/a>，原始碼可以&lt;a href="https://github.com/moby/buildkit">參考這邊&lt;/a>，希望未來這實驗性的功能可以正式納入 Docker 官方，網路上其實可以找到很多方式來做 Docker Layer 的 Cache，我個人最常用的就是 &lt;code>--cache-from&lt;/code> 機制，可以適用在任何 CI/CD 流程，詳細說明可以參考這篇『&lt;a href="https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/">在 docker-in-docker 環境中使用 cache-from 提升編譯速度&lt;/a>』，下面使用到的程式碼都可以直接參考&lt;a href="https://github.com/go-training/docker-buildkit-demo">此 Repository&lt;/a>，我還是使用 &lt;a href="https://golang.org">Go 語言&lt;/a>當作參考範例。&lt;/p></description></item><item><title>用 GitHub Actions 上傳 Docker Image 到 AWS ECR</title><link>https://blog.wu-boy.com/2020/04/upload-docker-image-to-aws-ecr-using-github-actions/</link><pubDate>Mon, 06 Apr 2020 05:39:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/04/upload-docker-image-to-aws-ecr-using-github-actions/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/t5MID_dNklCmkU2VFrKkhHV89tta8i-9GMebbSyfd_uvvdyQlo6Q4JbhRkA0jCO84vcSLW8zbn4Nqvzm1PYmAgrBQ4e2J1aZiUOZ7p_NGNinNF7Svsld_JRBv5rwCouNEJ_oBxk-Vqs=w1920-h1080" alt="">&lt;/p>
&lt;p>最近正打算使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 來串接 &lt;a href="https://aws.amazon.com">AWS&lt;/a> 服務 (&lt;a href="https://aws.amazon.com/tw/ecr/">ECR&lt;/a> + &lt;a href="https://aws.amazon.com/tw/ecs/">ECS&lt;/a>)，上網找了一堆 &lt;a href="https://github.com/marketplace?type=actions&amp;amp;query=ECR">ECR 套件&lt;/a>，發現就連 &lt;a href="https://github.com/aws-actions/amazon-ecr-login">AWS 官方&lt;/a>都只有實作 Login 進 ECR，後面編譯跟上傳動作就需要自己寫，可以看看底下是 AWS 官方套件的範例:&lt;/p></description></item><item><title>Docker 推出官方 GitHub Actions 套件</title><link>https://blog.wu-boy.com/2020/03/docker-release-github-actions-plugin/</link><pubDate>Sun, 29 Mar 2020 13:32:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/docker-release-github-actions-plugin/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HM1o-XLKQSuzYOobmH10dENcm8KwZ3eMqHt99LWMLHMw_14CBHJEr8xuktBUvQFInGX1oLetjI97GkoHCTWFzaXLT_-YBVNv0_jsHYS1Fd2mDXk-v68I4itwP54-4eSZiQ3MewsF47U=w1920-h1080" title="cover">&lt;img src="https://lh3.googleusercontent.com/HM1o-XLKQSuzYOobmH10dENcm8KwZ3eMqHt99LWMLHMw_14CBHJEr8xuktBUvQFInGX1oLetjI97GkoHCTWFzaXLT_-YBVNv0_jsHYS1Fd2mDXk-v68I4itwP54-4eSZiQ3MewsF47U=w1920-h1080" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>去年 &lt;a href="https://github.com">GitHub&lt;/a> 推出 &lt;a href="https://github.com/features/actions">Actions&lt;/a>，就有不少開發者相繼把 CI/CD 流程內會使用到的 Plugin 都丟到 &lt;a href="https://github.com/marketplace?type=actions">Marktetplace&lt;/a>，而在這 &lt;a href="https://docker.com">Docker&lt;/a> 容器時代，肯定是需要用自動化上傳容器到 Docker Registry，而官方也在&lt;a href="https://www.docker.com/blog/first-docker-github-action-is-here/">上週正式釋出第一版 GitHub Actions&lt;/a>，雖然在 Marktet 尚有不少開發者已經有實現了此功能，但是官方既然推出了，就採用官方的套件會比較適合。底下我們來看看如何使用 Docker 推出的 GitHub Aciton 來自動化上傳 Docker Image。除了介紹如何使用 GitHub Action 上傳 Image 外，我也會拿 &lt;a href="https://drone.io/">Drone&lt;/a> 的 &lt;a href="http://plugins.drone.io/drone-plugins/drone-docker/">Docker Plugin&lt;/a> 來進行比較。&lt;/p></description></item><item><title>Go Modules 處理私有 GIT Repository 流程</title><link>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</link><pubDate>Wed, 04 Mar 2020 14:41:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/_swpUXXC6aFQLaC3ooXMAgebOkHkgCl7M3RVH6Yrs2vDF-4T_dlUhHUz3MMmdtsV5H_vi6r5-fu_fpSI0RFtmYtmwVIK_zzRIO_YhrmIa3-PATRnyUtfVPtU4J7sxhkF_aQzXjGDdbU=w1920-h1080" alt="golang">&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Golang&lt;/a> 在 &lt;a href="https://golang.org/doc/go1.14#introduction">1.14&lt;/a> 正式說明可以將 &lt;a href="https://github.com/golang/go/wiki/Modules">Go Modules&lt;/a> 用在正式環境上了，還沒換上 Go Modules 的團隊，現在可以開始轉換了，轉換方式也相當容易啦，只要在原本的專案底下執行底下指令，就可以無痛轉移&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go mod init project_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假設專案內有用到私有 Git Repository 該怎麼解決了？現在 go mod 會預設走 &lt;code>proxy.golang.org&lt;/code> 去抓取最新的資料，但是要抓私有的，就需要透過其他方式:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go env -w &lt;span style="color:#00688b">GOPRIVATE&lt;/span>=github.com/appleboy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代表告訴 go 指令，只要遇到 &lt;code>github.com/appleboy&lt;/code> 就直接讀取，不需要走 Proxy 流程。拿 GitHub 當作範例，在本機端開發該如何使用？首先要先去申請 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>，接著設定 Git&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global url.&lt;span style="color:#cd5555">&amp;#34;https://&lt;/span>&lt;span style="color:#00688b">$USERNAME&lt;/span>&lt;span style="color:#cd5555">:&lt;/span>&lt;span style="color:#00688b">$ACCESS_TOKEN&lt;/span>&lt;span style="color:#cd5555">@github.com&amp;#34;&lt;/span>.insteadOf &lt;span style="color:#cd5555">&amp;#34;https://github.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 Username 就是 GitHub 帳號，Access token 就是上面的 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>。&lt;/p></description></item><item><title>用五分鐘安裝好 Drone 搭配 GitHub 自動化環境</title><link>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</link><pubDate>Wed, 26 Feb 2020 03:07:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/vD-ucUYf5HyaiqFcboabD13gP0b_ZQeTKdceFqim75J5z3jiA-D_H4BZEbd0hPf9Go1h-kN06yPcYoT-qpym7jLbFNAjadLvhWMx8XdAQRdAa7Bg61I5pYO2U3fqVEh6n6D4I38sdoo=w1920-h1080" alt="">&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/">用 10 分鐘安裝好 Drone 搭配 GitLab&lt;/a>』。團隊內還沒導入自動化 CI/CD 測試部署環境的朋友們，可以來嘗試看看用 &lt;a href="https://golang.org">Go 語言&lt;/a>打造的 Drone CI/CD 開源專案，不用五分鐘的時間就可以在您的電腦上安裝好 CI/CD 的流程，真的是簡單到不行，只要一個 docker-compose 檔案就可以完成架設了。&lt;/p></description></item><item><title>使用 Docker 五分鐘安裝好 Gitea (自架 Git Hosting 最佳選擇)</title><link>https://blog.wu-boy.com/2020/02/install-gitea-using-docker/</link><pubDate>Sat, 15 Feb 2020 02:25:58 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/install-gitea-using-docker/</guid><description>&lt;blockquote>
&lt;p>新課程上架:『&lt;a href="https://www.udemy.com/course/docker-practice/?couponCode=20200222" title="Docker 容器實用實戰">Docker 容器實用實戰&lt;/a>』目前特價 &lt;strong>$800 TWD&lt;/strong>，優惠代碼『&lt;strong>20200222&lt;/strong>』，也可以直接匯款（價格再減 &lt;strong>100&lt;/strong>），如果想搭配另外兩門課程合購可以透過 &lt;a href="http://facebook.com/appleboy46">FB 聯絡我&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/SrQvhDJm5NMkrxrut0lACspnz6iQSFCX3vlbtGCuAcwO-i_4iJCJ6trK3V2F6Q6s6fQ_EcSglwAL0qO0aLaTRtk4Ca32EI7Ks1H7u_nI9jC6xn3PF9hhgccjkbN3irX5pGi9kV-vIxk=w1920-h1080" title="Gitea">&lt;img src="https://lh3.googleusercontent.com/SrQvhDJm5NMkrxrut0lACspnz6iQSFCX3vlbtGCuAcwO-i_4iJCJ6trK3V2F6Q6s6fQ_EcSglwAL0qO0aLaTRtk4Ca32EI7Ks1H7u_nI9jC6xn3PF9hhgccjkbN3irX5pGi9kV-vIxk=w1920-h1080" alt="Gitea" title="Gitea">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gitea.io">Gitea&lt;/a> 在本週發佈了 &lt;a href="https://blog.gitea.io/2020/02/gitea-1.11.0-is-released/">1.11.0 版本&lt;/a>，本篇就使用 Docker 方式來安裝 Gitea，執行時間不會超過五分鐘。Gitea 是一套開源的 Git Hosting，除了 Gitea 之外，您可以選擇 GitHub 或自行安裝 GitLab，但是我為什麼選擇 Gitea 呢？原因有底下幾點&lt;/p>
&lt;ol>
&lt;li>Gitea 是&lt;a href="https://github.com/go-gitea/gitea">開源專案&lt;/a>，全世界的開發者都可以進行貢獻&lt;/li>
&lt;li>Gitea 是 &lt;a href="https://golang.org">Go 語言&lt;/a>所開發，啟動速度超快&lt;/li>
&lt;li>Gitea 開源社區非常完整，每年固定挑選三位為主要負責人&lt;/li>
&lt;li>Gitea 可以使用執行檔或 Docker 方式進行安裝&lt;/li>
&lt;/ol>
&lt;p>Gitea 目前發展方向就是自己服務自己，大家可能有發現原本在 GitHub 上面的 Repository 已經全面轉到 &lt;a href="https://gitea.com/gitea">Gitea 自主服務&lt;/a>了，這也代表著未來會全面轉過去，只是時間上的問題。Gitea 目前的功能其實相當完整，大家有興趣可以看這張&lt;a href="https://docs.gitea.io/en-us/comparison/">比較表&lt;/a>，新創團隊我都強烈建議使用 Gitea。&lt;/p></description></item><item><title>[Go 教學] graceful shutdown 搭配 docker-compose 實現 rolling update</title><link>https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/</link><pubDate>Sat, 08 Feb 2020 14:50:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/</guid><description>&lt;blockquote>
&lt;p>線上課程:『&lt;a href="https://www.udemy.com/course/golang-fight/?couponCode=202002" title="Docker 容器實用實戰">Go 語言實戰&lt;/a>』目前特價 &lt;strong>$2100 TWD&lt;/strong>，優惠代碼『&lt;strong>202003&lt;/strong>』，也可以直接匯款（價格再減 &lt;strong>100&lt;/strong>），如果想搭配另外兩門課程合購可以透過 &lt;a href="http://facebook.com/appleboy46">FB 聯絡我&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>上一篇作者有提到『&lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">什麼是 graceful shutdown?&lt;/a>』，本篇透過 docker-compose 方式來驗證 &lt;a href="https://golang.org">Go 語言&lt;/a>的 graceful shutdown 是否可以正常運作。除了驗證之外，單機版 &lt;a href="https://docker.com">Docker&lt;/a> 本身就可以設定 scale 容器數量，那這時候又該如何搭配 graceful shutdown 來實現 rolling update 呢？相信大家對於 rolling update 並不陌生，現在的 &lt;a href="https://kubernetes.io/">kubernetes&lt;/a> 已經有實現這個功能，用簡單的指令就可以達到此需求，但是對於沒有在用 k8s 架構的開發者，可能網站也不大，那該如何透過單機本的 docker 來實現呢？底下先來看看為什麼會出現這樣的需求。&lt;/p></description></item><item><title>用 GitHub Actions 部署 Go 語言服務</title><link>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</link><pubDate>Sat, 14 Dec 2019 11:44:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/NI2lnMOEhkrZJ-x_bmre_RoQxLnzYcpPXVB_p6eBMmPQ73yDgoftVmUHvk0P86Tt2MM_Q23IHNu7qq7j99RXzTEzG95BU1u1vdpell9krVGHlUmW3Ng7J7egj1LHugWHcHoezCty9o0=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 也推出一陣子了，相信有不少雷，也是有很多優勢，未來在 GitHub 上面串接任何開源專案，都可以免費使用，過幾年可以看看 GitHub Actions 對 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 的影響是多少？本篇要來介紹如何透過 GitHub Actions 來部署 &lt;a href="https://golang.org">Go 語言&lt;/a>服務，會用一個簡單 httpd 範例教大家如何透過 &lt;a href="https://docker.com">Docker&lt;/a> 方式來更新。使用 Go 語言基本服務流程大致上會是『測試 -&amp;gt; 編譯 -&amp;gt; 上傳 -&amp;gt; 啟動』，透過這四個步驟來學習 GitHub Actions 該如何設定。&lt;/p>
&lt;ul>
&lt;li>測試: Unit Testing 多一層保護&lt;/li>
&lt;li>編譯: 透過 go build 編譯出 Binary 檔案&lt;/li>
&lt;li>上傳: 寫 Dockerfile 將 Binary 包進容器內&lt;/li>
&lt;li>啟動: 透過 docker-compose 方式來更新服務&lt;/li>
&lt;/ul></description></item><item><title>用 15 分鐘快速打造 Laravel 開發環境</title><link>https://blog.wu-boy.com/2019/12/setup-laravel-environment-in-15-minutes/</link><pubDate>Fri, 06 Dec 2019 02:00:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/12/setup-laravel-environment-in-15-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pjvNN9g1j3Viepuj7ujFJxOOaXPW4GalM1N0nTEmtrH84y36YVJuDfLDmoVv9PgmsuyEJ9o1iwSnItKfyg91fLGETDSsxGXCnquhs1qy_SDYNw5S0MuS0caVbnWZzx9hB13LqRN7JYw=w1920-h1080" title="cover page">&lt;img src="https://lh3.googleusercontent.com/pjvNN9g1j3Viepuj7ujFJxOOaXPW4GalM1N0nTEmtrH84y36YVJuDfLDmoVv9PgmsuyEJ9o1iwSnItKfyg91fLGETDSsxGXCnquhs1qy_SDYNw5S0MuS0caVbnWZzx9hB13LqRN7JYw=w1920-h1080" alt="cover page" title="cover page">&lt;/a>&lt;/p>
&lt;p>相信大家對 Laravel 都很熟悉，但是初學者或是新進同事要快速入門 Laravel 最大的門檻就是該如何在短時間內在本機電腦快速安裝好公司專案。這時候使用 Laradock 就是一個最佳時機，透過 Docker 容器話，快速切換 PHP 版本，或者是安裝額外的服務像是 MySQL, MariaDB, phpMyAdmin 或 nginx 等服務，讓本機端不受到自訂安裝套件的困擾，用完隨時關閉，完全不會影響到電腦環境。底下我會介紹使用 Laradock 該注意的事情。完整詳細的操作步驟可以直接看 Youtube 影片。&lt;/p></description></item><item><title>初探 Go 語言 Project Layout (新人必看)</title><link>https://blog.wu-boy.com/2019/11/how-to-define-the-golang-folder-layout/</link><pubDate>Fri, 15 Nov 2019 23:30:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/11/how-to-define-the-golang-folder-layout/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pKaq_CvDy37QrubxGcYfXpOoORzOO0t1zJ0eSDpiyNzl0IlrbXeY3zNRGmBVUkK6QdjcfE514j2MxeNdVQRfl8S9wfdEmbeK54414LFUVZLSob62AVimIlmbI7qiQhH_mPjqNDZoL18=w1920-h1080" title="cover photo">&lt;img src="https://lh3.googleusercontent.com/pKaq_CvDy37QrubxGcYfXpOoORzOO0t1zJ0eSDpiyNzl0IlrbXeY3zNRGmBVUkK6QdjcfE514j2MxeNdVQRfl8S9wfdEmbeK54414LFUVZLSob62AVimIlmbI7qiQhH_mPjqNDZoL18=w1920-h1080" alt="cover photo" title="cover photo">&lt;/a>&lt;/p>
&lt;p>很多人初次進入 Go 語言，肯定都會尋找在 Go 裡面是否有一套標準且最多人使用的 Framework 來學習，但是在 Go 語言就是沒有這樣的標準，所有的開源專案架構目錄都是由各團隊自行設計，沒有誰對誰錯，也沒任何一個是最標準的。那你一定會問，怎樣才是最好的呢？很簡單，如果可以定義出一套結構是讓團隊所有成員可以一目瞭然的目錄結構，知道發生問題要去哪個地方找，要加入新的功能，就有相對應的目錄可以存放，那這個專案就是最好的。當然這沒有標準答案，只是讓團隊有個共識，未來有新人進入專案，可以讓他在最短時間內吸收整個專案架構。&lt;/p></description></item><item><title>Drone CI/CD 支援 Auto cancellation 機制</title><link>https://blog.wu-boy.com/2019/10/auto-cancellation-in-drone-ci-cd/</link><pubDate>Sun, 20 Oct 2019 02:27:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/auto-cancellation-in-drone-ci-cd/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/RK0neP9RNsD1P5N5zGL0BqgvUFnDDb1YuzyIUKLlD01ejmM87JNaU29bweqw_CyD0v39FYfi5wAh6wCls1CIxaMMiOdHX6WQ4p7hFU5Qlt052uya0NZ6pjJJAA24rfhbpDFDwKmivfU=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/RK0neP9RNsD1P5N5zGL0BqgvUFnDDb1YuzyIUKLlD01ejmM87JNaU29bweqw_CyD0v39FYfi5wAh6wCls1CIxaMMiOdHX6WQ4p7hFU5Qlt052uya0NZ6pjJJAA24rfhbpDFDwKmivfU=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>大家一定會問什麼是『Auto cancellation』呢？中文翻作自動取消，這機制會用在 CI/CD 的哪個流程或步驟呢？我們先來探討一個情境，不知道大家有無遇過在同一個 branch 陸續發了 3 個 commit，會發現在 CI/CD 會依序啟動 3 個 Job 來跑這 3 個 commit，假設您有設定同時間只能跑一個 Job，這樣最早的 commit 會先開始啟動，後面兩個 commit 則會處於 &lt;code>Penging&lt;/code> 的狀態，等到第一個 Job 完成後，後面兩個才會繼續執行。&lt;/p></description></item><item><title>在 Docker 內設定使用者及群組權限的三種方式</title><link>https://blog.wu-boy.com/2019/10/three-ways-to-setup-docker-user-and-group/</link><pubDate>Thu, 10 Oct 2019 23:04:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/three-ways-to-setup-docker-user-and-group/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/CDrKX9nVEAkUnrVNX26Mf0HY1iW73gM6z8WCITgo5QUWx3yXZPOzAI6op59p-YxKYgPkBQalH-rWUb2gElpc2gwjZ3M5jgKeHQ4MI88DkMXjxzkAhQX-zgIqjbGpRrlV38uXLFDxcMU=w1920-h1080" title="docker">&lt;img src="https://lh3.googleusercontent.com/CDrKX9nVEAkUnrVNX26Mf0HY1iW73gM6z8WCITgo5QUWx3yXZPOzAI6op59p-YxKYgPkBQalH-rWUb2gElpc2gwjZ3M5jgKeHQ4MI88DkMXjxzkAhQX-zgIqjbGpRrlV38uXLFDxcMU=w1920-h1080" alt="docker" title="docker">&lt;/a>&lt;/p>
&lt;p>如果平常本身有在玩 &lt;a href="https://www.docker.com/">Docker&lt;/a> 的開發者肯定知道透過 docker command 啟動的容器預設是使用 &lt;code>root&lt;/code> 來當作預設使用者及群組，這邊會遇到一個問題，當 Host 環境你有 root 權限就沒有此問題，如果你沒有 root 權限，又有需求在 Docker 容器內掛上 Volume，會發現產生出來的檔案皆會是 root 權限，這時候在 Host 完全無法寫入。本篇教大家使用三種方式來設定容器使用者權限。&lt;/p></description></item><item><title>Ansible 設定 Google Container Registry 搭配 Drone 自動上傳</title><link>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</link><pubDate>Thu, 03 Oct 2019 02:14:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/mese3VEnyNElOz7iL-z3w0nxM4PcNjC6lfPWxLbPrHTFr3PvKeyxGwIxTXoRztpidxN7gX8WlRtzBsfxkOVb_Pt-jEwCbZtYDD3l0DLeBger7XaC40XVyPUgAyT6yU_FdqJeAUCSQik=w1920-h1080" alt="blog logo">&lt;/p>
&lt;p>最近剛好有需求要串接 &lt;a href="https://cloud.google.com/container-registry/">GCR&lt;/a> (Google Container Registry)，專案如果是搭配 GCP 服務，個人建議就直接用 GCR 了。本篇要教大家如何透過 Ansible 管理遠端機器直接登入 GCR，透過特定的帳號可以直接拉 Image，接著用 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 來重新起動服務，這算是最基本的部署流程，那該如何用 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 登入呢？請看底下教學。&lt;/p></description></item><item><title>用 Drone 自動化上傳 Docker Image 到 GitHub Docker Registry</title><link>https://blog.wu-boy.com/2019/09/upload-docker-image-to-github-registry-using-drone/</link><pubDate>Sat, 07 Sep 2019 02:42:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/09/upload-docker-image-to-github-registry-using-drone/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/tR9wbUwpzzbEUnDDsZlo0jnL1AaTZRLo-T4D7Dz-PE5mN9cj6vQ94bJVzoOdUPlZtJEjxkxJvCe5WFgzKyclj94HBZdo9FMCnY5_b98ZG88pGN5v9A6jLSbY-dnz2oetLiuSi1pYI7E=w1920-h1080" title="github">&lt;img src="https://lh3.googleusercontent.com/tR9wbUwpzzbEUnDDsZlo0jnL1AaTZRLo-T4D7Dz-PE5mN9cj6vQ94bJVzoOdUPlZtJEjxkxJvCe5WFgzKyclj94HBZdo9FMCnY5_b98ZG88pGN5v9A6jLSbY-dnz2oetLiuSi1pYI7E=w1920-h1080" alt="github" title="github">&lt;/a>&lt;/p>
&lt;p>很高興收到 &lt;a href="https://github.com">GitHub&lt;/a> 的 Beta 邀請函來開始試用 &lt;a href="https://help.github.com/en/articles/about-github-package-registry">GitHub Package Registry&lt;/a> 相關功能，從說明文件可以知道目前 Registry 支援了好幾種 Package 像是 &lt;a href="https://help.github.com/en/articles/configuring-npm-for-use-with-github-package-registry/">npm&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-rubygems-for-use-with-github-package-registry/">gem&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-docker-for-use-with-github-package-registry/">docker&lt;/a>, &lt;a href="https://help.github.com/en/articles/configuring-apache-maven-for-use-with-github-package-registry/">mvn&lt;/a> 及 &lt;a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry/">nuget&lt;/a>，這篇主要跟大家介紹如何用 Drone 快速串接 CI/CD 流程的『自動上傳 Docker Image 到 GitHub Registry』，底下來看看如何使用 GitHub 提供的 Docker Registry。&lt;/p></description></item><item><title>Go 語言目錄結構與實踐</title><link>https://blog.wu-boy.com/2019/08/golang-project-layout-and-practice/</link><pubDate>Sat, 31 Aug 2019 10:53:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/golang-project-layout-and-practice/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>很高興今年錄取 &lt;a href="https://modernweb.tw/">Modernweb&lt;/a> 講師，又有機會去宣傳 &lt;a href="https://golang.org">Go 語言&lt;/a>，這次的議程最主要跟大家介紹 Go 專案的目錄該如何設計，一個基本的專案該需要有哪些功能，以及如何實現。大家剛入門 Go 時，肯定會開始找是否有一套 Web Framework 可以參考實踐，可惜的是，在 Go 語言沒有定義任何的目錄結構，所有的結構都可以根據團隊的狀況而有所改變，而這邊我想強調的是如果能讓團隊看到結構後，一目瞭然知道什麼功能該放哪個目錄，或什麼目錄內大概有什麼功能，那其實就夠了。看了許多開源專案，每個設計方式都是不同，但是當你要找什麼功能時，其實從根目錄就可以很清楚的知道要進入哪個地方可以找到您想要的功能及程式碼。這次在 Moderweb 上面的議題，就是分享我在開源專案所使用的目錄結構，以及結構內都放哪些必要的功能。&lt;/p></description></item><item><title>用 10 分鐘安裝好 Drone 搭配 GitLab</title><link>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</link><pubDate>Fri, 23 Aug 2019 01:05:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" title="Drone+GitLab">&lt;img src="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" alt="Drone+GitLab" title="Drone+GitLab">&lt;/a>&lt;/p>
&lt;p>如果你沒在使用 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a>，那可以來嘗試看看 &lt;a href="https://drone.io/">Drone CI/CD&lt;/a>，用不到 10 分鐘就可以快速架設好 Drone，並且上傳一個 &lt;code>.drone.yml&lt;/code> 並且開啟第一個部署或測試流程，安裝步驟非常簡單，只需要對 &lt;a href="https://docker.com">Docker&lt;/a> 有基本上的了解，通常都可以在短時間完成 Drone CI/CD 架設。&lt;/p></description></item><item><title>Minio 從 Docker 容器移除 healthcheck 腳本</title><link>https://blog.wu-boy.com/2019/08/minio-remove-healthcheck-script-for-docker-image/</link><pubDate>Sun, 18 Aug 2019 05:20:45 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/minio-remove-healthcheck-script-for-docker-image/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/3lAv9HlhI9mxCfow0jHY5-G6H-tvXJLCv3S2QvzKReV_R-61oywRIXW6sruwPrS69CXpMAuIrccgVH8HY5hIzDGvenyhFhKcGmBk0CmU1c36k6NrjSvYESSmAEAejlxmxdW_gduXZio=w1920-h1080" title="minio golang">&lt;img src="https://lh3.googleusercontent.com/3lAv9HlhI9mxCfow0jHY5-G6H-tvXJLCv3S2QvzKReV_R-61oywRIXW6sruwPrS69CXpMAuIrccgVH8HY5hIzDGvenyhFhKcGmBk0CmU1c36k6NrjSvYESSmAEAejlxmxdW_gduXZio=w1920-h1080" alt="minio golang" title="minio golang">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://min.io/">Minio&lt;/a> 是一套開源專案的 Object 儲存容器，如果你有使用 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a>，相信要找一套代替 S3 的替代品，一定會想到這套用 &lt;a href="https://golang.org">Go 語言&lt;/a>開發的 Minio 專案。讓您在公司內部也可以享有 S3 的儲存容器，不需要變動任何程式碼就可以無痛從 AWS S3 搬到公司內部。剛好最近在整合 Traefik 搭配 Minio，由於 Minio 原先已經內建 healthcheck 腳本，所以當運行 Minio 時，使用 &lt;code>docker ps&lt;/code> 正常來說可以看到類似 &lt;code>Up 7 weeks (healthy)&lt;/code> 字眼，但是 Minio 運行了三分鐘之後，狀態就會從 &lt;code>healthy&lt;/code> 變成 &lt;code>unhealthy&lt;/code>，造成 Traefik 會自動移除 frontend 的對應設定，這樣 Web 就無法顯示了。我在 Udemy 上面有介紹如&lt;a href="https://www.udemy.com/course/golang-fight/learn/lecture/9962004#overview">何用 Golang 寫 healthcheck&lt;/a>，大家有興趣可以參考看看，coupon code 可以輸入 &lt;strong>GOLANG2019&lt;/strong> 。&lt;/p></description></item><item><title>架設 Go Proxy 服務加速 go module 下載速度</title><link>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</link><pubDate>Wed, 10 Jul 2019 22:54:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org">Go 語言&lt;/a>在 1.11 推出 go module 來統一市面上不同管理 Go 套件的工具，像是 &lt;a href="https://github.com/golang/dep">dep&lt;/a> 或 govendor 等，還不知道如何使用 go module，可以參考之前寫的一篇文章『&lt;a href="https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/">Go Module 導入到專案內且搭配 Travis CI 或 Drone 工具&lt;/a>』，在團隊內如果每個人在開發專案時，都透過網路去下載專案使用到的套件，這樣 10 個人就會浪費 10 個人的下載時間，並且佔用公司網路頻寬，所以我建議在公司內部架設一台 Go Proxy 服務，減少團隊在初始化專案所需要的時間，也可以減少在跑 CI/CD 流程時，所需要花費的時間，測試過公司 CI/CD 流程，有架設 Go Proxy，一般來說可以省下 1 ~ 2 分鐘時間，根據專案使用到的相依性套件用量來決定花費時間。本篇來介紹如何架設 &lt;a href="https://github.com/gomods/athens">ATHENS&lt;/a> 這套開源 Go Proxy 專案。&lt;/p></description></item><item><title>用 Ansible 安裝 Drone CI/CD 開源專案</title><link>https://blog.wu-boy.com/2019/06/install-drone-ci-cd-using-ansible/</link><pubDate>Mon, 17 Jun 2019 07:18:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/06/install-drone-ci-cd-using-ansible/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HZqWLZjp96azorhAZseeSbSj9Q5-dj99lM8cX4ApJjnDL0grXaMEoIHJl3dQEx-ZyFcI713_CeQlPSFMOLgxD19tBOLMmgdQlwMe_QMhwGKrh2pQDWE2bj4cul4ENt21sWRFOYq6agc=w1920-h1080" title="drone and ansible">&lt;img src="https://lh3.googleusercontent.com/HZqWLZjp96azorhAZseeSbSj9Q5-dj99lM8cX4ApJjnDL0grXaMEoIHJl3dQEx-ZyFcI713_CeQlPSFMOLgxD19tBOLMmgdQlwMe_QMhwGKrh2pQDWE2bj4cul4ENt21sWRFOYq6agc=w1920-h1080" alt="drone and ansible" title="drone and ansible">&lt;/a>&lt;/p>
&lt;p>相信大家對於 &lt;a href="https://github.com/drone/drone">Drone 開源專案&lt;/a>並不陌生，如果對於 Drone 不了解的朋友們，可以直接看之前寫的&lt;a href="https://blog.wu-boy.com/?s=drone">系列文章&lt;/a>，本篇要教大家如何使用 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 來安裝 Drone CI/CD 開源專案。目前 Drone 可以支援兩種安裝方式: 1. 使用 Docker 2. 使用 binary，如果您是進階開發者，可以使用 binary 方式來安裝，像是在 Debug 就可以透過 build binary 方式來測試。一般來說都是使用 Docker 方式來安裝，在使用 ansible 之前，請先準備一台 Ubuntu 或 Debian 作業系統的 VM 來測試。&lt;/p></description></item><item><title>GitHub 推出 CI/CD 服務 Actions 之踩雷經驗</title><link>https://blog.wu-boy.com/2019/05/introduction-to-github-actions/</link><pubDate>Tue, 21 May 2019 09:12:40 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/05/introduction-to-github-actions/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/vs6XKU4keYmwiBUeWrTVbYl4WKH7cTcmu6Lcggv0QWEBK81D06mbPg7skrmlnYrUf0JlEzhwjJwtmjVJ4p9wLXmbTs4mmzviiCK1RRwBhRXGom5w_3JSQwnV6UUbfH5Pd9uNNU5SCQE=w1920-h1080" title="GitHub Actions 簡介">&lt;img src="https://lh3.googleusercontent.com/vs6XKU4keYmwiBUeWrTVbYl4WKH7cTcmu6Lcggv0QWEBK81D06mbPg7skrmlnYrUf0JlEzhwjJwtmjVJ4p9wLXmbTs4mmzviiCK1RRwBhRXGom5w_3JSQwnV6UUbfH5Pd9uNNU5SCQE=w1920-h1080" alt="GitHub Actions 簡介" title="GitHub Actions 簡介">&lt;/a>&lt;/p>
&lt;p>今年很高興又去 &lt;a href="https://cloudsummit.ithome.com.tw/">Cloud Summit 研討會&lt;/a>給一場議程『初探 GitHub 自動化流程工具 Actions』，這場議程沒有講很多如何使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>，反倒是講了很多設計上的缺陷，以及為什麼我現在不推薦使用。GitHub Actions 在去年推出來，在這麼多 CI/CD 的免費服務，GitHub 自家出來做很正常，我還在想到底什麼時候才會推出，beta 版出來馬上就申請來試用，但是使用下來體驗非常的不好，有蠻多不方便的地方，底下我們就來聊聊 GitHub Acitons 有哪些缺陷以及該改進的地方。&lt;/p></description></item><item><title>CI/CD 大亂鬥: Drone 1.0 功能介紹</title><link>https://blog.wu-boy.com/2019/04/cicd-drone-1-0-feature/</link><pubDate>Mon, 22 Apr 2019 03:34:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/04/cicd-drone-1-0-feature/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/8kk2MLpEg38HGO6sYA2r1EOaJ6mNjhsS65H1tRwKSbmSgdhr-mRh6UH2tQwVucMNtMAbbIoa5DHn1mu-lcX-P6fKbRrs-sRJ3N9DjdaHwE-RS4RqxqYdwE6GO1mtyTtdvgdAFTAJ7ws=w1920-h1080" title="drone ci/cd">&lt;img src="https://lh3.googleusercontent.com/8kk2MLpEg38HGO6sYA2r1EOaJ6mNjhsS65H1tRwKSbmSgdhr-mRh6UH2tQwVucMNtMAbbIoa5DHn1mu-lcX-P6fKbRrs-sRJ3N9DjdaHwE-RS4RqxqYdwE6GO1mtyTtdvgdAFTAJ7ws=w1920-h1080" alt="drone ci/cd" title="drone ci/cd">&lt;/a>&lt;/p>
&lt;p>很高興受到 &lt;a href="https://www.facebook.com/groups/DevOpsTaiwan/">Devops Taiwan&lt;/a> 邀請到台北講『&lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 1.0 新功能』，現場太多 CI/CD 工具一起 PK，有興趣可以看&lt;a href="https://devopstw.club/">活動網頁&lt;/a>。其實我在其他場合講過很多次 &lt;a href="https://www.slideshare.net/appleboy/drone-cicd-platform">Drone 的基礎&lt;/a>，所以這次上台北最主要探討 Drone 在今年 2019 Release 1.0 的一些重大功能，我相信大家在用舊的版本已經很順了，其實如果不升級到新的版本也是沒差。底下我會一一介紹 1.0 的新功能。有&lt;a href="https://hackmd.io/ijAIcc3KRZmBHwrrB96epg">共筆紀錄&lt;/a>，大家可以先參考看看。&lt;/p></description></item><item><title>10 分鐘內用 Traefik 架設 Drone 搭配 GitHub 服務</title><link>https://blog.wu-boy.com/2019/03/setup-traefik-with-drone-ci-cd-in-ten-minutes/</link><pubDate>Fri, 22 Mar 2019 06:12:41 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/03/setup-traefik-with-drone-ci-cd-in-ten-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/HIVQn1cNncIZ8EdJ7P-Nc9ohmuoSgGfnhB0Nfjl3fxsSoZ_RUBrz0yPB73EQy2Plc5NB1919QKsU7gwioFV0A9f-kD46qFovSkeJBO64iKPnTxZ860YGjdhRDMxseJ67OjSVSsEoskY=w2400">&lt;img src="https://lh3.googleusercontent.com/HIVQn1cNncIZ8EdJ7P-Nc9ohmuoSgGfnhB0Nfjl3fxsSoZ_RUBrz0yPB73EQy2Plc5NB1919QKsU7gwioFV0A9f-kD46qFovSkeJBO64iKPnTxZ860YGjdhRDMxseJ67OjSVSsEoskY=w2400" alt="">&lt;/a>&lt;/p>
&lt;p>這標題也許有點誇張，但是如果實際操作一次，肯定可以在 10 分鐘內操作完成。本篇來教大家如何用 &lt;a href="https://traefik.io/">Traefik&lt;/a> 當作前端 Proxy，後端搭配 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 服務接 &lt;a href="https://github.com">GitHub&lt;/a>，為什麼會用 Traefik，原因很簡單，你可以把 Traefik 角色想成是 &lt;a href="https://www.nginx.com/">Nginx&lt;/a>，但是又比 Nginx 更簡單設定，另外一點就是，Traefik 自動整合了 &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a> 服務，您就不用擔心憑證會過期的問題。假如機器只會有一個 Drone 當 Host 的話，其實也可以不使用 Traefik，因為 Drone 其實也是內建自動更新憑證的功能。如果您對 Traefik 有興趣，可以直接參考底下兩篇文章&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/">用 Traefik 搭配 Docker 快速架設服務&lt;/a> (內附教學影片)&lt;/li>
&lt;li>&lt;a href="https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/">Traefik 搭配 Docker 自動更新 Let’s Encrypt 憑證&lt;/a> (內附教學影片)&lt;/li>
&lt;/ul></description></item><item><title>在 docker-in-docker 環境中使用 cache-from 提升編譯速度</title><link>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</link><pubDate>Sun, 24 Feb 2019 12:37:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" title="提升 docker build 時間">&lt;img src="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" alt="提升 docker build 時間" title="提升 docker build 時間">&lt;/a>&lt;/p>
&lt;p>在現代 CI/CD 的環境流程中，使用 &lt;a href="https://github.com/jpetazzo/dind">Docker In Docker&lt;/a> 來編譯容器已經相當流行了，像是 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a> 或 &lt;a href="https://github.com/drone/drone" title="Drone">Drone&lt;/a> 都是全走 &lt;a href="https://www.docker.com/" title="Docker">Docker&lt;/a> 環境，然而有很多人建議盡量不要在 CI 環境使用 Docker In Docker，原因在於 CI 環境無法使用 Host Image 資料，導致每次要上傳 Image 到 &lt;a href="https://hub.docker.com/" title="Docker Hub">Docker Hub&lt;/a> 時都需要重新下載所有的 Docker Layer，造成每次跑一次流程都會重複花費不少時間，而這個問題在 &lt;a href="https://github.com/docker/docker/releases/tag/v1.13.0">v1.13&lt;/a> 時被解決，現在只要在編譯過程指定一個或者是多個 Image 列表，先把 Layer 下載到 Docker 內，接著對照 Dockerfile 內只要有被 Cache 到就不會重新再執行，講得有點模糊，底下直接拿實際例子來看看。&lt;/p></description></item><item><title>快速部署網站到 Heroku 雲平台</title><link>https://blog.wu-boy.com/2019/02/deploy-golang-app-to-heroku/</link><pubDate>Mon, 18 Feb 2019 02:56:19 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/02/deploy-golang-app-to-heroku/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jx4kYMmehnuyhVbEhvZKNEQwjCAgcTg2JIQamusY9-SuIbEEvJl2zXLJidfq-m9Oy1PQrROA9GQxdjjSiRVsvAGIj3tikwT0ZNB9XhciyCwjE60XE_jDJIqqEMmaKqwDzCMirK0u7Hw=w1920-h1080" title="部署網站到 Heroku 平台">&lt;img src="https://lh3.googleusercontent.com/jx4kYMmehnuyhVbEhvZKNEQwjCAgcTg2JIQamusY9-SuIbEEvJl2zXLJidfq-m9Oy1PQrROA9GQxdjjSiRVsvAGIj3tikwT0ZNB9XhciyCwjE60XE_jDJIqqEMmaKqwDzCMirK0u7Hw=w1920-h1080" alt="部署網站到 Heroku 平台" title="部署網站到 Heroku 平台">&lt;/a>&lt;/p>
&lt;p>大家在寫開源專案時，一定需要一個免費的雲空間來放置網站，方便其他開發者在 &lt;a href="https://github.com" title="GitHub">GitHub&lt;/a> 看到時，可以先點選 Demo 網站來試用，也許開發者可以使用 GitHub 提供的免&lt;a href="https://pages.github.com/" title="費靜態網站">費靜態網站&lt;/a>，但是如果是跑 &lt;a href="https://golang.org" title="Golang">Golang&lt;/a> 或是其他語言 &lt;a href="https://nodejs.org/" title="Node.js">Node.js&lt;/a> 就不支援了，本篇來介紹 &lt;a href="https://www.heroku.com/" title="Ｈeroku 雲平台">Heroku 雲平台&lt;/a>，它提供了開發者免費的方案，您可以將 GitHub 儲存庫跟 Heroku 結合，快速的將程式碼部署上去，Heroku 會給開發者一個固定的 URL (含有 HTTPS 憑證)，也可以動態的用自己買的網域。最重要的是 Heroku 提供了兩種更新方式，第一為 Git，只要開發者將程式碼 Push 到 Heroku 儲存庫，Heroku 就可以自動判斷開發者上傳的語言，並進行相對應的部署，另一種方式為 &lt;a href="https://www.docker.com/" title="Docker">Docker&lt;/a> 部署，只要在儲存庫內放上 Dockerfile，透過 &lt;a href="https://devcenter.heroku.com/articles/heroku-cli" title="Heroku CLI">Heroku CLI&lt;/a> 指令就可以將 Docker 容器上傳到 &lt;a href="https://devcenter.heroku.com/articles/container-registry-and-runtime" title="Heroku Docker Registry">Heroku Docker Registry&lt;/a>，並且自動部署網站。底下我們來透過簡單的 Go 語言專案: &lt;a href="https://github.com/go-training/facebook-account-kit" title="Facebook Account Kit">Facebook Account Kit&lt;/a> 來說明如何快速部署到 Heroku。&lt;/p></description></item><item><title>Traefik 搭配 Docker 自動更新 Let’s Encrypt 憑證</title><link>https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/</link><pubDate>Sun, 20 Jan 2019 10:54:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/</guid><description>&lt;p>&lt;strong>2019.10.23 本篇教學以 Traefik 1.7 版本為主&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/sggr23jjw2BJb3HMIpM9RtSTetm8TeEuk1CCbV6658ZZO5CCwEPK2YdGpOYPFrw4fansfS-aMNE5h-uv-8s7quNiuj4EU-UF0DBaNbKZt3YyNruAICq6JxUss9S5IPAC7TQfQlHbL2M=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/sggr23jjw2BJb3HMIpM9RtSTetm8TeEuk1CCbV6658ZZO5CCwEPK2YdGpOYPFrw4fansfS-aMNE5h-uv-8s7quNiuj4EU-UF0DBaNbKZt3YyNruAICq6JxUss9S5IPAC7TQfQlHbL2M=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過蠻多篇 &lt;a href="https://blog.wu-boy.com/?s=+Let%27s+Encrypt" title="Let's Encrypt 的使用教學">Let&amp;rsquo;s Encrypt 的使用教學&lt;/a>，但是這次要跟大家介紹一套非常好用的工具 &lt;a href="https://traefik.io/" title="Traefik">Traefik&lt;/a> 搭配自動化更新 Let&amp;rsquo;s Encrypt 憑證，為什麼會推薦 Traefik 呢，原因在於 Traefik 可以自動偵測 Docker 容器內的 Label 設定，並且套用設定在 Traefik 服務內，也就是只要修改服務的 docker-compose 內容，重新啟動，Traefik 就可以抓到新的設定。這點在其它工具像是 &lt;a href="https://www.nginx.com/" title="Nginx">Nginx&lt;/a> 或 &lt;a href="https://caddyserver.com" title="Caddy">Caddy&lt;/a> 是無法做到的。底下我們來一步一步教大家如何設定啟用前後端服務。全部程式碼都放在 &lt;a href="https://github.com/go-training/training/tree/master/example25-traefik-golang-app-lets-encrypt" title="GitHub 上面">GitHub 上面&lt;/a>了。&lt;/p></description></item><item><title>用 Traefik 搭配 Docker 快速架設服務</title><link>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</link><pubDate>Tue, 08 Jan 2019 03:51:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</guid><description>&lt;p>&lt;strong>更新: 2019.01.10 新增教學影片&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" title="drone traefik docker deploy">&lt;img src="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" alt="drone traefik docker deploy" title="drone traefik docker deploy">&lt;/a>&lt;/p>
&lt;p>相信大家在架設服務肯定會選一套像是 &lt;a href="http://www.haproxy.org/">HAProxy&lt;/a>, &lt;a href="https://www.nginx.com/" title="Nginx">Nginx&lt;/a>, &lt;a href="https://httpd.apache.org/" title="Apache">Apache&lt;/a> 或 &lt;a href="https://caddyserver.com/" title="Caddy">Caddy&lt;/a>，這四套架設的難度差不多，如果要搭配 &lt;a href="https://letsencrypt.org/" title="Let's Encrypt">Let&amp;rsquo;s Encrypt&lt;/a> 前面兩套需要自己串接 (Nginx, Apache)，而 Caddy 是用 &lt;a href="https://golang.org/" title="Golang">Golang&lt;/a> 開發裡面已經內建了 Let&amp;rsquo;s Encrypt，，管理者不用擔心憑證過期，相當方便。但是本篇我要介紹另外一套工具叫 &lt;a href="https://traefik.io/" title="Traefik">Traefik&lt;/a>，這一套也是用 Go 語言開發，而我推薦這套的原因是，此套可以跟 Docker 很深度的結合，只要服務跑在 Docker 上面，Traefik 都可以自動偵測到，並且套用設定。透過底下的範例讓 Traefik 串接後端兩個服務，分別是 &lt;code>domain1.com&lt;/code> 及 &lt;code>domain2.com&lt;/code>。來看看如何快速設定 Traefik。&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" title="traefik + docker + golang">&lt;img src="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" alt="traefik + docker + golang" title="traefik + docker + golang">&lt;/a>&lt;/p></description></item><item><title>用 Docker 整合測試 Flutter 框架</title><link>https://blog.wu-boy.com/2018/12/docker-testing-with-flutter-sdk/</link><pubDate>Wed, 26 Dec 2018 03:56:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/docker-testing-with-flutter-sdk/</guid><description>&lt;p>&lt;a href="https://photos.google.com/share/AF1QipPVsiQNMhQf-l7rJBe-Ki9RMxMVz0x-xSDpayq967sskqwi2bzqgHBQyc9xaby8eA?key=b0xKVW5oSlEwZEl2b0FESUNDVFRGV2dYbkVPRVVB&amp;amp;source=ctrlq.org">&lt;img src="https://lh3.googleusercontent.com/REguGdEy6qgmZyU7hNscYxXV1lGzSTioUb_cBe4uVLdBNUxL2Y9oNwx2J8w6VU8BMcZhBOJoAI091l9lCJuueumNEef7ub75Dvrbl2ZC1Ri9QholsnccGd6txg9rbXP5oZoNIQVl_Fk=w700" alt="">&lt;/a> &lt;a href="https://flutter.io">Flutter&lt;/a> 是一套以 &lt;a href="https://www.dartlang.org/">Dart&lt;/a> 語言為主體的手機 App 開發框架，讓開發者可以寫一種語言產生 iOS 及 Android，只要裝好 Flutter 框架，就可以在個人電腦上面同時測試 iOS 及 Android 流程，如果您需要 Docker 環境，可以直接參考&lt;a href="https://github.com/appleboy/flutter-docker">此開源專案&lt;/a>，裡面已經將 Flutter 1.0 SDK 包在容器，只要將專案目錄掛載到 Docker 內，就可以透過 &lt;code>flutter test&lt;/code> 指令來完成測試，對於 CI/CD 流程使用 Docker 技術非常方便。&lt;/p></description></item><item><title>Drone CI/CD 推出 Cloud 服務支援開源專案</title><link>https://blog.wu-boy.com/2018/12/drone-cloud-service/</link><pubDate>Sun, 09 Dec 2018 11:25:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/drone-cloud-service/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/46191388892/in/dateposted-public/" title="Screen Shot 2018-12-08 at 10.36.20 PM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/46191388892_1446150027_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-12-08 at 10.36.20 PM" data-recalc-dims="1" />&lt;/a> &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 在上個月宣布推出 &lt;a href="https://blog.drone.io/drone-cloud/">Cloud 服務&lt;/a> 整合 &lt;a href="https://github.com">GitHub&lt;/a> 帳戶內的 Repo，只要登入後就可以跑 GitHub 上面的專案自動化整合及測試，原先在 GitHub 上面常見的就是 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 或 &lt;a href="https://circleci.com/">CircleCI&lt;/a>，現在 Drone 也正式加入角逐行列，但是從文中內可以看到其實是由 &lt;a href="http://packet.net/">Packet&lt;/a> 這間公司獨家贊助硬體及網路給 Drone，兩台實體機器，一台可以跑 X86 另外一台可以跑 ARM，也就是如果有在玩 ARM 開發版，現在可以直接在 Drone Cloud 上面直接跑測試。底下是硬體規格:&lt;/p></description></item><item><title>Drone 支援單機版安裝 (內附影片)</title><link>https://blog.wu-boy.com/2018/11/install-drone-in-single-machine/</link><pubDate>Mon, 26 Nov 2018 03:43:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/11/install-drone-in-single-machine/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32181752988/in/dateposted-public/" title="Screen Shot 2018-11-26 at 11.40.28 AM">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4820/32181752988_0112dca2a5_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-26 at 11.40.28 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在上週寫了『&lt;a href="https://blog.wu-boy.com/2018/11/drone-release-1-0-0-rc1/">Drone 推出 1.0.0 RC1 版本&lt;/a>』介紹，裡面提到一個很重要的改變，就是 Drone 現在支援『單機版』安裝了，你會問什麼是單機版安裝？以前不就是可以支援在單台機器把 Drone 給架設起來，那在 1.0.0 RC1 版本指的是什麼意思？在之前的版本，要完整的安裝完成 Drone，需要架設 drone server 及 drone agent，但是在 1.0 版本之後，只需要一個 drone 服務，裡面就內建了 server 及 agent，這很適合用在團隊非常小的狀況底下來快速安裝 drone，假設團隊專案很多，或者是成長很快，建議還是將 server 及 agent 分開架設，未來只需要擴充 agent 即可，底下來看看該如何架設單機版 drone。&lt;/p></description></item><item><title>高雄 Mopcon 濁水溪以南最大研討會 – Drone CI/CD 介紹</title><link>https://blog.wu-boy.com/2018/11/drone-ci-cd-platform-in-mopconf/</link><pubDate>Tue, 06 Nov 2018 05:28:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/11/drone-ci-cd-platform-in-mopconf/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/45693842842/in/dateposted-public/" title="Screen Shot 2018-11-06 at 1.16.22 PM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1948/45693842842_d5fb6105b5_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-06 at 1.16.22 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年又以講者身份參加 &lt;a href="https://mopcon.org">Mopcon&lt;/a> 南區最大研討會，此次回高雄最主要推廣 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 這套 CI/CD 平台。大家可以從過去的 Blog 或影片可以知道我在北部推廣了很多次 Drone 開源軟體，唯獨南台灣還沒講過，所以透過 Mopcon 研討會終於有機會可以來推廣了。本次把 Drone 的架構圖畫出來，如何架設在 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 上以及該如何擴展 drone agent，有興趣的可以參考底下投影片:&lt;/p></description></item><item><title>Drone 搭配 Kubernetes 部署 Go 語言項目</title><link>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</link><pubDate>Tue, 05 Jun 2018 02:36:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/27678088297/in/dateposted-public/" title="Screen Shot 2018-06-04 at 9.19.46 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1738/27678088297_1c6fe64e86_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-06-04 at 9.19.46 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/10/upgrade-kubernetes-container-using-drone/">Drone 搭配 Kubernetes 升級應用程式版本&lt;/a>』，裡面內容最主要介紹 &lt;a href="https://github.com/honestbee">honestbee&lt;/a> 撰寫的 &lt;a href="https://drone.io">drone&lt;/a> 外掛: &lt;a href="https://github.com/honestbee/drone-kubernetes">drone-kubernetes&lt;/a>，但是此外掛並非用 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫，而是用 Shell Script 透過 &lt;code>kubectl set image&lt;/code> 方式來更新專案項目，但是這邊會有幾個缺點，第一點就是假設在 Develop 環境永遠都是吃 master 分支，也就是讀取 Image 的 &lt;code>latest&lt;/code> 標籤，這時候此外掛就無法作用，第二點此外掛無法讀取 kubernetes YAML 檔案，假設專案要修正一個 ENV 值，此外掛也無法及時更新。綜合這兩點因素，只好捨棄此外掛，而本篇會帶給大家另一個用 Go 語言所撰寫的外掛，是由 &lt;a href="https://github.com/Sh4d1">@Sh4d1&lt;/a> 所開發的&lt;a href="https://github.com/Sh4d1/drone-kubernetes/">項目&lt;/a>，用法相當容易，底下會一步一步教大家如何部署 Go 語言項目。&lt;/p></description></item><item><title>[影片教學] 使用 Filter 將專案跑在特定 Drone Agent 服務</title><link>https://blog.wu-boy.com/2018/04/how-to-use-filter-in-drone/</link><pubDate>Sun, 15 Apr 2018 15:26:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/04/how-to-use-filter-in-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://drone.io">Drone&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 CI/CD &lt;a href="https://github.com/drone/drone">開源專案&lt;/a>，是由一個 Server 跟多個 Agent 所組成，Agent 上面必須安裝好 &lt;a href="https://www.docker.com">Dokcer&lt;/a> 才可以順利測試及部署，但是團隊內會出現一個狀況，每個專案的測試及部署方式不同，有的測試需要 Agent 很多 CPU 或記憶體資源，有的小專案則不需要那麼多，但是當大專案把 agent 系統資源吃光，其他專案都跑不動了，這邊的解決方式就是再建立一台新的 Agent 服務，將需要大量資源的專案跑在該台新的 Agent，Drone 這邊有支援 &lt;code>filter&lt;/code> 功能，讓開發者可以指定專案要跑在哪一台 Agent 上。底下來教大家如何設定 drone filter。&lt;/p></description></item><item><title>Go 語言搭配 Docker Healthy Check 檢查</title><link>https://blog.wu-boy.com/2018/03/docker-healthcheck-in-golang/</link><pubDate>Mon, 19 Mar 2018 03:18:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/docker-healthcheck-in-golang/</guid><description>&lt;p>[&lt;img src="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-03-17 at 11.40.12 PM" data-recalc-dims="1" />][1] 在 [Docker][2] 1.12 版本後，提供了 &lt;code>HEALTHCHECK&lt;/code> 指令，通過指定的一行命令來判斷容器內的服務是否正常運作。在此之前大部分都是透過判斷程式是否 Crash 來決定容器是否存活，但是這地方有點風險的是，假設服務並非 crash，而是沒辦法退出容器，造成無法接受新的請求，這就確保容器存活。現在呢我們可以透過在 &lt;code>Dockerfile&lt;/code> 內指定 &lt;code>HEALTHCHECK&lt;/code> 指令來確保服務是否正常。而用 [Go 語言][3]開發的 Web 服務該如何來實現呢？&lt;/p></description></item><item><title>用 Nginx 來架設線上即時縮圖機</title><link>https://blog.wu-boy.com/2018/03/nginx-reverse-proxy-image-resizing/</link><pubDate>Sat, 17 Mar 2018 02:28:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/nginx-reverse-proxy-image-resizing/</guid><description>&lt;p>&lt;a href="https://i0.wp.com/farm1.staticflickr.com/790/26946324088_93725a917b_z.jpg?ssl=1">&lt;img src="https://i0.wp.com/farm1.staticflickr.com/790/26946324088_93725a917b_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在更早以前我們怎麼實現縮圖機制，當使用者上傳一張檔案，後端會固定將圖片縮圖成各種前端網頁需要的大小，不管前端頁面是否有使用，後端都會先產生好，這有什麼缺陷？&lt;/p>
&lt;ol>
&lt;li>佔用硬碟空間大小&lt;/li>
&lt;li>前端又需要另外一種格式的縮圖?&lt;/li>
&lt;/ol>
&lt;p>第二個問題比較麻煩，當前端需要另一種縮圖格式，後端就要開始掃描系統的全部圖片，再重新產生一次。非常耗費後端系統效能。後來才改成透過 URL 定義長寬來決定即時縮圖，在 &lt;a href="https://golang.org">Go 語言&lt;/a>內可以選擇使用 &lt;a href="https://github.com/thoas/picfit">picfit&lt;/a> 來當作後端即時的縮圖機。本篇則是要提供另一種解法，就是使用 &lt;a href="http://nginx.org">Nginx&lt;/a> 搭配 &lt;a href="http://nginx.org/en/docs/http/ngx_http_image_filter_module.html">image_filter&lt;/a> 外掛來達成即時縮圖機制。&lt;/p></description></item><item><title>Drone CI/CD 系統簡介</title><link>https://blog.wu-boy.com/2018/01/introduction-to-drone-cicd/</link><pubDate>Thu, 18 Jan 2018 02:27:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/01/introduction-to-drone-cicd/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/38854798135/in/dateposted-public/" title="Screen Shot 2018-01-18 at 10.21.43 AM">&lt;img src="https://i1.wp.com/farm5.staticflickr.com/4660/38854798135_a4ed025e7f_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-01-18 at 10.21.43 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興到 &lt;a href="https://www.facebook.com/groups/GCPUG.TW/">GCPUG.TW&lt;/a> 分享『Drone CI/CD 系統簡介』，會議介紹了 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 系統架構，這套是由 &lt;a href="https://golang.org">Go 語言&lt;/a>所開發，前兩年我參加了 Drone 開源專案的開發，也貢獻了數個 &lt;a href="http://plugins.drone.io/">Drone Plugin&lt;/a>，去年我正式開始宣傳 Drone 的好處及優勢，以及為什麼要從 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://jenkins.io/">GitLab CI&lt;/a> 轉換到 Drone，會議大綱如下，很感謝 &lt;a href="https://www.qnap.com/zh-tw/">QNAP&lt;/a> 提供現場直播及錄影。&lt;/p></description></item><item><title>Caddy 搭配 Harbor 自架私有 Docker Registry</title><link>https://blog.wu-boy.com/2018/01/caddy-harbor-docker-registry/</link><pubDate>Thu, 04 Jan 2018 07:20:27 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/01/caddy-harbor-docker-registry/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://vmware.github.io/harbor/">Harbor&lt;/a> 是由 &lt;a href="https://www.vmware.com">VMWare&lt;/a> 公司用 &lt;a href="https://golang.org">Go 語言&lt;/a>所開發的開源軟體，它可以讓團隊存放各種不同的私有 &lt;a href="https://www.docker.com/">Docker&lt;/a> 映像檔，假如團隊內沒考慮 &lt;a href="https://aws.amazon.com/tw/ecr/">AWS 的 ECR&lt;/a> 或者是 Google 提供的 &lt;a href="https://cloud.google.com/container-registry/">GCR 方案&lt;/a>，建議您可以參考看看 Harbor，而 Harbor 提供了簡易的 UI 介面，包含權限控管，及跨區域的自動同步功能，比起自己從官網把 &lt;a href="https://docs.docker.com/registry/#what-it-is">Docker Registry&lt;/a> 架起來，功能多上不少。本篇不會教大家如何架設 Harbor，有興趣的可以直接參考&lt;a href="https://github.com/vmware/harbor/blob/master/docs/user_guide.md">官方文件&lt;/a>，此篇會紀錄如何透過 Caddy 將憑證用在 Harbor 內部。&lt;/p></description></item><item><title>Gorush 輕量級手機訊息發送服務</title><link>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</link><pubDate>Wed, 01 Nov 2017 02:03:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>今年第一次參加濁水溪以南最大研討會 &lt;a href="https://mopcon.org/2017/">Mopcon&lt;/a>，給了一場議程叫『&lt;a href="https://www.slideshare.net/appleboy/gorush-a-push-notification-server-written-in-go">用 Go 語言打造輕量級 Push Notification 服務&lt;/a>』，身為南部人一定要參加 Mopcon，剛好透過此議程順便發佈新版 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a>，其實今年投稿 Mopcon 最主要是回家鄉宣傳 &lt;a href="https://www.google.com">Google&lt;/a> 所推出的 &lt;a href="https://golang.org/">Go&lt;/a> 語言，藉由實際案例來跟大家分享如何入門 Go 語言，以及用 Go 語言最大好的好處有哪些。底下是此議程大綱:&lt;/p>
&lt;ul>
&lt;li>為什麼建立 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a> 專案&lt;/li>
&lt;li>如何用 Go 語言實作&lt;/li>
&lt;li>用 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 自動化測試及部署&lt;/li>
&lt;li>在 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 上跑 Gorush&lt;/li>
&lt;/ul></description></item><item><title>用 Kubernetes 將 Drone CI/CD 架設在 AWS</title><link>https://blog.wu-boy.com/2017/09/drone-on-kubernetes-on-aws/</link><pubDate>Sat, 23 Sep 2017 16:55:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/drone-on-kubernetes-on-aws/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/37237823752/in/dateposted-public/" title="Screen Shot 2017-09-24 at 12.53.39 AM">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4497/37237823752_68a508e4bb_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-09-24 at 12.53.39 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是我今年主推的 CI/CD 自架服務，詳細可以參考&lt;a href="https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/">這篇文章&lt;/a>，目前在公司內部團隊使用了一年以上，服務相當穩定。Drone 本身可以透過 &lt;a href="https://github.com/go-training/drone-tutorial">docker-compose 方式&lt;/a>快速在機器上架設完成，但是由於 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 的盛行，大家也希望能透過 Kubernetes 來安裝 Drone 服務。本篇會教大家如何在 AWS 上透過 Kubernetes 安裝完成。Drone 預設使用 &lt;a href="https://www.sqlite.org/">SQLite&lt;/a> 當作資料庫，檔案會直接存放在 &lt;code>/var/lib/drone&lt;/code> 路徑底下，但是容器內不支援寫入，所以必須要要額外掛上空間讓 Drone 可以寫入資料。此篇會以 &lt;a href="https://github.com">GitHub&lt;/a> 認證 + SQLite 來教學。&lt;/p></description></item><item><title>部署 Go 語言 App 到 Now.sh</title><link>https://blog.wu-boy.com/2017/09/deploy-go-app-to-zeit-now/</link><pubDate>Fri, 15 Sep 2017 03:35:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/deploy-go-app-to-zeit-now/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>本篇要教大家如何部署 &lt;a href="https://golang.org">Go&lt;/a> 語言的 App 到 &lt;a href="https://zeit.co/now">now.sh&lt;/a> 服務。now 服務是讓開發者可以透過 JavaScript 或用 Docker 方式直接部署到 now 雲端機器，也就是 now 所提供的服務可以在自己電腦透過 &lt;code>package.json&lt;/code> 或 &lt;code>Dockerfile&lt;/code> 來部署 app。原先剛出來時候，只有支援 node.js 部署，後來才增加 Docker。透過 Docker 就可以來部署各種不同語言的專案。&lt;/p></description></item><item><title>為什麼我用 Drone 取代 Jenkins 及 GitLab CI</title><link>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</link><pubDate>Thu, 07 Sep 2017 02:58:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36906030282/in/dateposted-public/" title="Logo-DevOpsDays">&lt;img src="https://farm5.staticflickr.com/4382/36906030282_f489c96be3_z.jpg" alt="Logo-DevOpsDays">&lt;/a>&lt;/p>
&lt;p>終於有機會正式跟大家介紹為什麼我會捨棄 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 跟 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a>，取而代之的是用 &lt;a href="https://golang.org">Go&lt;/a> 語言寫的 &lt;a href="https://github.com/drone/drone">Drone&lt;/a>。今年很高興錄取台灣第一屆 &lt;a href="https://devopsdays.tw/">DevOps Day&lt;/a> 講師，在今年主題是『用 Drone 打造輕量級容器持續交付平台』，主要推廣這套 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 工具，會議內容圍繞在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a>, &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 跟 Drone 的比較。也提到為什麼我不用 Jenkins 及 GitLab CI 的幾個原因。底下整理議程大綱。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>為什麼選擇 Drone&lt;/li>
&lt;li>Drone 基礎簡介&lt;/li>
&lt;li>Drone 架構擴展&lt;/li>
&lt;li>Drone 安裝方式&lt;/li>
&lt;li>Drone 管理介面&lt;/li>
&lt;li>Drone 測試部署&lt;/li>
&lt;li>Drone 自訂套件&lt;/li>
&lt;/ul></description></item><item><title>用 Go 語言打造微服務架構</title><link>https://blog.wu-boy.com/2017/08/microservice-in-go/</link><pubDate>Fri, 11 Aug 2017 08:17:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/08/microservice-in-go/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://modernweb.tw/">ModernWeb&lt;/a> 講『用 Go 語言打造微服務架構』，蠻開心看到底下很多 &lt;a href="https://golang.org">Go&lt;/a> 開發者，希望未來能有更多公司導入 Go 語言，底下是會議大綱:&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>Microservices vs. Monolithic 差異&lt;/li>
&lt;li>微服務核心架構 (Go 工具專案)&lt;/li>
&lt;li>Go 語言核心高並發&lt;/li>
&lt;li>為什麼選用 Go 語言&lt;/li>
&lt;li>微服務代價跟準備&lt;/li>
&lt;/ul></description></item><item><title>2017 COSCUP 研討會: Gitea + Drone 介紹</title><link>https://blog.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</link><pubDate>Mon, 07 Aug 2017 06:23:26 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36020937670/in/dateposted-public/" title="gitea-lg">&lt;img src="https://farm5.staticflickr.com/4377/36020937670_fbcf1ee3d3_z.jpg" alt="gitea-lg">&lt;/a>&lt;/p>
&lt;p>今年很高興可以到 &lt;a href="http://coscup.org/2017">COSCUP&lt;/a> 分享『&lt;strong>Gitea + Drone 介紹&lt;/strong>』，我是在第二天的最後一場來做分享，最後還被大會進來趕人，講超過時間了。這次是我第一次到&lt;a href="http://www.coss.ntu.edu.tw/">台大社科院&lt;/a>，太陽真的好大，兩天下來流的汗水，大概已經是一年份的了。由於今年 COSCUP 不供應午餐，在第一天中午到科技站出口，左轉第一個店面就坐下來吃麵，店面不大，賣傳統小吃，我點了麻醬麵大碗 55 元，燙青菜 35 元，真的很大碗，不知道是不是因為在學校附近的關係，所以特別大碗，我心裡想說，這裡不是台北嗎？&lt;/p></description></item><item><title>台灣第一屆 Laravel 研討會</title><link>https://blog.wu-boy.com/2017/07/laravel-conf-in-taipei/</link><pubDate>Mon, 03 Jul 2017 01:43:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/07/laravel-conf-in-taipei/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/35625404626/in/dateposted-public/" title="laravelconftw_o">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4237/35625404626_71f7a8a492_z.jpg?w=840&amp;#038;ssl=1" alt="laravelconftw_o" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這次很高興擔任第一屆 &lt;a href="https://laravelconf.tw">Laravel 台灣研討會&lt;/a>講者，會議當天中午才到現場，我是兩點分享的議程，在整天聽下來及最後的案例討論，聽到最多的都是原本從 &lt;a href="https://codeigniter.org.tw/">CodeIgniter&lt;/a> 架構換到 &lt;a href="https://laravel.com/">Laravel&lt;/a> 上面，身為 CodeIgniter 的維護人員的我，聽到是蠻開心的，在 Laravel 還沒出來前，大家都是選用這輕量級的 CodeIgniter。&lt;/p></description></item><item><title>台灣第一屆 GoPher 大會</title><link>https://blog.wu-boy.com/2017/06/gopher-day-in-taipei/</link><pubDate>Fri, 30 Jun 2017 02:56:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/gopher-day-in-taipei/</guid><description>&lt;p>&lt;a href="https://i0.wp.com/farm5.staticflickr.com/4285/35453214392_b37fcef501_z.jpg?ssl=1">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4285/35453214392_b37fcef501_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興可以擔任第一屆 &lt;a href="http://gopher.ithome.com.tw/">GoPher Day&lt;/a> 大會講者，每次參加聚會都是跟一堆網友見面，人在新竹很難得大家見到面。很感謝 &lt;a href="http://www.ithome.com.tw/">iThome&lt;/a> 大力幫忙舉辦，才可以讓整天議程順利完成。底下分享『用 Go 語言實戰 Push Notification 服務』投影片。&lt;/p></description></item><item><title>Drone 自動觸發 GitLab CI 或 Jenkins 任務</title><link>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</link><pubDate>Wed, 28 Jun 2017 04:24:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套由 &lt;a href="https://golang.org/">Go 語言&lt;/a>所開發的開源碼專案，讓開發者可以使用 &lt;a href="http://docker.com/">Docker&lt;/a> Container 快速設定自動化測試及部署，上篇有提到『&lt;a href="https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/">Cronjob 搭配 Drone 服務&lt;/a>』，讓 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 用戶可以轉換 Cron Job 任務到 Drone 上面。本篇則是會介紹如何透過 Drone 去觸發 Jenkins 或 GitLab CI 上的工作，當然這是過渡時期，希望大家最後能將工作完整移轉到 Drone 上面，不要再依靠 Jenkins 或 GitLab CI 了。本篇會教大家用三種方式來觸發 GitLab CI 或 Jenkins 任務。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>使用 Drone CI/CD&lt;/li>
&lt;li>使用 Docker 指令&lt;/li>
&lt;li>使用 Command Line (命令列)&lt;/li>
&lt;/ul></description></item><item><title>Cronjob 搭配 Drone 服務</title><link>https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/</link><pubDate>Sun, 25 Jun 2017 05:32:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套基於 &lt;a href="https://www.docker.com/">Docker&lt;/a> Container 技術的 CI/CD 服務，它是用 &lt;a href="https://golang.org/">Go&lt;/a> 語言所開發，可以安裝在任何作業系統內，你可以把 Drone 當作是開源版的 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 服務。Drone 本身不支援排程任務，也就是說無法像 Jenkins CI 一樣可以設定每天幾點幾分執行單一 Job 任務。但是可以透過第三方工具像是 &lt;code>cron&lt;/code> 來整合 Drone API 達成自動排程的效果，底下來看看該如何實作。&lt;/p></description></item><item><title>用 Docker Multi-Stage 編譯出 Go 語言最小 Image</title><link>https://blog.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</link><pubDate>Sat, 29 Apr 2017 13:23:55 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>之前應該沒寫過用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 結合 Go 語言編譯出最小 Image 的文章，剛好趁這機會來介紹。其實網路上可以直接找到文章，像是這篇『&lt;a href="https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/">Building Minimal Docker Containers for Go Applications&lt;/a>』，那本文來介紹 Docker 新功能 &lt;a href="https://github.com/moby/moby/pull/32063">multi-stage builds&lt;/a>，此功能只有在 &lt;a href="https://github.com/moby/moby/releases/tag/v17.05.0-ce-rc1">17.05.0-ce&lt;/a> 才支援，看起來是 2017/05/03 號會 release 出來。我們拿 Go 語言的 Hello World 來介紹 Single build 及 Multiple build。&lt;/p></description></item><item><title>用 Golang 寫 Command line 工具</title><link>https://blog.wu-boy.com/2017/02/write-command-line-in-golang/</link><pubDate>Thu, 16 Feb 2017 07:46:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/02/write-command-line-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>如果你要寫 Command line 工具，又想在各平台 (像是 MacOS, Windows 或 Linux) 上執行，這時候 &lt;a href="https://golang.org">Golang&lt;/a> 就是您最好的選擇。在 &lt;a href="https://www.reddit.com">Reddit&lt;/a> 讀到一篇 &lt;a href="https://www.reddit.com/r/golang/comments/5sdvoh/what_is_the_essential_difference_between/">Command line 工具比較介紹&lt;/a>，這篇最主要講到兩個 CLI 工具，一個是 &lt;a href="https://github.com/urfave/cli">urfave/cli&lt;/a>，另一個是 &lt;a href="https://github.com/spf13/cobra">spf13/cobra&lt;/a>，這兩個工具其實都非常好用，後者是&lt;a href="http://spf13.com/post/joining-go-team-at-google/">去年加入 Google Golang 團隊&lt;/a>的 &lt;a href="http://spf13.com/">spf13&lt;/a> 所開發，該作者加入 Google 後呢，非常的忙，但是強者他同事有幫忙繼續維護 cobra 專案，兩個 CLI 工具各自都有有大型專案使用 urfave/cli 有 &lt;a href="https://github.com/docker/libcompose">docker/libcompose&lt;/a>, &lt;a href="https://github.com/docker/machine">docker/machine&lt;/a>, &lt;a href="https://github.com/drone/drone">Drone&lt;/a>, &lt;a href="https://gitea.io/">Gitea&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a> 等，而後者 spf13/cobra 則有 &lt;a href="https://docker.com">docker&lt;/a>, &lt;a href="https://github.com/docker/distribution">docker/distribution&lt;/a>, &lt;a href="https://github.com/coreos/etcd">etcd&lt;/a> 等。本篇筆者會介紹 urfave/cli 該如何使用？&lt;/p></description></item><item><title>Caddy 搭配 Drone 伺服器設定</title><link>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</link><pubDate>Tue, 07 Feb 2017 06:46:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/32758934825/in/dateposted-public/" title="The_Caddy_web_server_logo.svg">&lt;img src="https://i0.wp.com/c1.staticflickr.com/1/528/32758934825_665c449ff3_z.jpg?resize=640%2C138&amp;#038;ssl=1" alt="The_Caddy_web_server_logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;h2 id="緣由">緣由&lt;/h2>
&lt;p>&lt;a href="https://caddyserver.com/">Caddy&lt;/a> 是一套 &lt;a href="https://zh.wikipedia.org/zh-tw/HTTP/2">HTTP/2&lt;/a> 伺服器，你可以想成跟 &lt;a href="https://nginx.org/">Nginx&lt;/a> 是同一種角色，但是 Caddy 有一點不一樣的地方就是自動支援 HTTPS 設定，也就是 Caddy 幫網站自動申請 &lt;a href="https://letsencrypt.org/">Letsencrypt&lt;/a> 憑證，開發者不需要擔心憑證會過期，Caddy 會定期幫忙更換。&lt;a href="https://www.docker.com/">Drone&lt;/a> 則是一套以 &lt;a href="https://www.docker.com/">Docker&lt;/a> 為基礎的 &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration&lt;/a> 平台。就在上個月 Caddy 發佈了 &lt;a href="https://github.com/mholt/caddy/releases/tag/v0.9.5">0.9.5&lt;/a> 版本，更新過後，發現 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 的 WebSocket 連線會斷線又連線，底下來看看 Caddy 更動了什麼造成 WebSocket 連線失效。&lt;/p></description></item><item><title>用 Docker 發送 Line 訊息</title><link>https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</link><pubDate>Tue, 15 Nov 2016 08:48:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年各家網路公司 (&lt;a href="https://www.facebook.com">Facebook&lt;/a>, &lt;a href="https://line.me/">Line&lt;/a> 和 &lt;a href="https://telegram.org/">Telegram&lt;/a>&amp;hellip;) 分別推出 Bot 服務，看起來 Bot 會是未來趨勢，對 Bot 不是很了解的話，可以參考 Eric ShangKuan 寫了一篇: &lt;a href="https://medium.com/@ericsk/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%B0%8D%E8%AB%87%E6%A9%9F%E5%99%A8%E4%BA%BA-bot-%E7%9A%84%E5%85%A9%E4%B8%89%E4%BA%8B-f28f1a0ce7c4#.uuo64bw2e">關於寫對談機器人 (bot) 的兩三事&lt;/a>。本篇會介紹如何透過 &lt;a href="https://www.docker.com/">Docker&lt;/a> 整合 &lt;a href="https://business.line.me/en/services/bot">Line Message API&lt;/a>，下面所有指令都會跟 Docker 有關，但是程式碼都是用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫，想說順便在台灣推廣 ^__^。就在今年四月 Line 推出第一版 SDK，但是到了九月，突然收到 Line 的通知，說舊版的不支援了，請大家換到&lt;a href="https://devdocs.line.me/en">新板 API&lt;/a>，最近更動到新版本時，踩到官網 UI 的雷就是原來 Line 有分 Developer 跟一般帳號，這兩種差別就是在於有無&lt;code>主動 Push Message&lt;/code> 功能，後來在 &lt;a href="https://github.com/line/line-bot-sdk-go">Line-Go-SDK&lt;/a> 發問才找到&lt;a href="https://github.com/line/line-bot-sdk-go/issues/32#issuecomment-260235045">解答&lt;/a>。底下會一步一步教大家如何透過 Docker 發送 Line 訊息。&lt;/p></description></item><item><title>在 Travis 實現 Docker Cache</title><link>https://blog.wu-boy.com/2016/09/docker-cache-on-travis/</link><pubDate>Sat, 17 Sep 2016 08:25:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/docker-cache-on-travis/</guid><description>&lt;p>&lt;a href="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?ssl=1">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>前一篇寫了『&lt;a href="https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/">用 Travis 自動上傳 Docker Image&lt;/a>』，Travis 跑完測試成功後才自動編譯 Docker Image 並且上傳到 Docker Hub。在每次 commit 後，&lt;a href="https://travis-ci.com/">Travis&lt;/a> 執行 docker build 時間總是非常長，當然原因很多。如果選用的 Docker base image 非常肥，指令非常多，每次編譯都要重新下載及執行指令，所以執行時間就是這麼長。本篇就是想辦法減少 Travis 編譯 Image 時間，就像把 &lt;code>node_modules&lt;/code> 壓縮起來，下次執行測試前先解壓縮再安裝，可以大幅減少 npm install 時間(可以參考之前的『&lt;a href="https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/">用一行指令加速 npm install&lt;/a>』)。這邊我們就需要用到 Travis 的 &lt;a href="https://docs.travis-ci.com/user/caching/">Cache 功能&lt;/a>。&lt;/p></description></item><item><title>用 Travis 自動上傳 Docker Image 到 Docker Registry</title><link>https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/</link><pubDate>Sat, 17 Sep 2016 07:13:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/</guid><description>&lt;p>&lt;a href="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?ssl=1">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在今年七月寫了一篇『&lt;a href="https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/">在 Travis 升級 Docker 和 docker-compose 版本&lt;/a>』，就在上個月底 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 終於將 &lt;a href="https://www.docker.com/">Docker&lt;/a> 預設版本換成 1.12.x 版本，並且將 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 也一併升級到 1.8.0，這樣就可以不用手動升級了。那這篇會紀錄如何用 Travis 自動編譯 Docker Image 並且上傳到 &lt;a href="https://hub.docker.com/">Docker Hub&lt;/a>。Docker Hub 提供兩種方式讓開發者上傳 Image，第一種是透過 Command line 下指令手動上傳，另外一種則是在 Docker Hub 後台指定 Dockerfile 路徑及需要執行編譯的分支，這樣只要 Push commit 到 &lt;a href="https://github.com/">Github&lt;/a>，Docker Hub 就會根據 &lt;a href="https://docs.docker.com/engine/reference/builder/">Dockerfile&lt;/a> 來自動編譯 Docker Image。本篇會介紹如何透過 Travis 服務來自動上傳 Dokcer Image，像是 Golang 的部屬方式通常是編譯出 Binary 執行檔後，將此執行檔加入 Image 最後才上傳。&lt;/p></description></item><item><title>Drone CI Server 搭配 Atlassian Bitbucket Server (前身 Stash)</title><link>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</link><pubDate>Tue, 13 Sep 2016 03:25:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29645454615/in/dateposted-public/" title="Screen Shot 2016-09-13 at 10.36.58 AM">&lt;img src="https://i2.wp.com/c8.staticflickr.com/9/8044/29645454615_79d329eacb_z.jpg?resize=640%2C361&amp;#038;ssl=1" alt="Screen Shot 2016-09-13 at 10.36.58 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>目前團隊是使用 &lt;a href="https://www.atlassian.com/software/bitbucket/server">Atlassian Bitbucket&lt;/a> 搭配 &lt;a href="https://www.atlassian.com/software/bamboo">Bamboo&lt;/a>，雖然 Bamboo 搭配自家的 Bitbucket (前身是 Stash Server) 整合得相當不錯，但是個人覺得設定上蠻複雜的，所以才想測試看看其他家 CI Service 對團隊學習及設定上更容易。最近找到一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 寫的 CI Server 就是 &lt;a href="https://drone.io/">Drone&lt;/a>，Drone &lt;a href="http://readme.drone.io/">線上文件&lt;/a>提供了 &lt;a href="https://github.com/">Github&lt;/a>, &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a>, Bitbucket (Stash) 等整合。在整合 Drone 搭配 Bitbucket 時，文件寫得不是很清楚，尤其是在 Bitbucket 建立 Application Link 遇到許多問題，官方文件也沒寫得很清楚，故寫此篇記錄如何將 Drone 服務整合 Bitbucket 伺服器。&lt;/p></description></item><item><title>2016 COSCUP 用 Golang 寫 Microservices</title><link>https://blog.wu-boy.com/2016/08/build-microservices-in-golang/</link><pubDate>Sun, 21 Aug 2016 10:18:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/08/build-microservices-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://coscup.org">COSCUP&lt;/a> 投稿『&lt;a href="http://coscup.org/2016/schedules.html#H07">用 Golang 寫 Microservice&lt;/a>』，這場議程最主要是介紹 &lt;a href="https://golang.org/">Golang&lt;/a> 入門篇，以及用了哪些 Golang Library 在 &lt;a href="https://en.wikipedia.org/wiki/Microservices">Microservices&lt;/a> 上，目的希望能多推廣 Golang 語言在 Server 開發上，將來能更多公司導入使用。底下是今年的簡報及大綱:&lt;/p></description></item><item><title>在 Travis 升級 Docker 和 docker-compose 版本</title><link>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</link><pubDate>Mon, 25 Jul 2016 13:10:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://travis-ci.org/">Travis&lt;/a> 是在 &lt;a href="https://github.com/">Github&lt;/a> 上常用的整合測試服務，支援了各種程式語言 &lt;a href="https://golang.org/">Golang&lt;/a>, PHP, Node.js ..等測試及部署，也同時支援了一些常用 Service，像是 &lt;a href="https://www.docker.com/">Docker&lt;/a>, Redis 或 Database。這次來聊聊&lt;a href="https://docs.travis-ci.com/user/docker/">在 Travis 如何使用 Docker&lt;/a>，在 Travis 內建的 Docker 跟 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 版本都是非常舊，所以使用預設的 docker-compose 指令常常會出現 (詳細 build log 可以參考&lt;a href="https://travis-ci.org/appleboy/golang-testing/jobs/147125401">這裡&lt;/a>)&lt;/p></description></item><item><title>用 Docker 改善團隊合作模式</title><link>https://blog.wu-boy.com/2016/07/docker-team-work/</link><pubDate>Fri, 15 Jul 2016 07:11:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/docker-team-work/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年第一次參加 &lt;a href="http://www.ithome.com.tw/">iThome&lt;/a> 舉辦的 &lt;a href="http://devopssummit.ithome.com.tw/">DevOps Summit&lt;/a> 研討會，這次舉辦在台北文創大樓，就是在大巨蛋隔壁，很高興今年第一次投稿就錄取，題目是『&lt;strong>用 Dokcer 改善團隊合作模式&lt;/strong>』，主題偏向如何用 Docker 改善個人或團隊的開發狀況，尤其是在 IC 或系統廠如何導入 Docker。研討會上沒有提到很深入的 Docker 應用，在投影片內強調的是，如何將 &lt;a href="https://git-scm.com/">Git&lt;/a> 及 &lt;a href="https://www.docker.com/">Docker&lt;/a> 帶入團隊內不同角色，包含 QA 及 PM，讓大家在團隊合作上能夠各自獨立，不會互相影響。底下就是我今年的投影片:&lt;/p></description></item><item><title>在 Docker 偵測 MySQL 或 Postgres 是否啟動</title><link>https://blog.wu-boy.com/2016/06/server-monitoring-mysql-postgres-daemon-in-docker/</link><pubDate>Sat, 11 Jun 2016 08:42:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/06/server-monitoring-mysql-postgres-daemon-in-docker/</guid><description>&lt;p>&lt;a title="Screen Shot 2016-06-11 at 6.58.22 PM" href="https://www.flickr.com/photos/appleboy/27525281071/in/dateposted-public/" data-flickr-embed="true">&lt;img src="https://i2.wp.com/c2.staticflickr.com/8/7626/27525281071_50bc0dec77_o.png?resize=591%2C580&amp;#038;ssl=1" alt="Screen Shot 2016-06-11 at 6.58.22 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>監控 Service 是否存活也是 &lt;a href="http://www.ithome.com.tw/news/96861">DevOps&lt;/a> 重要的一環，此篇來紀錄在 &lt;a href="https://www.docker.com/">Docker&lt;/a> 內偵測 &lt;a href="https://www.mysql.com/">MySQL&lt;/a> 或 &lt;a href="https://www.postgresql.org/">Postgres&lt;/a> 是否已經啟動。在 Docker 自動測試內，其中一步就是建立 Database 環境，底下為測試步驟:&lt;/p></description></item><item><title>Docker 基礎介紹與實戰</title><link>https://blog.wu-boy.com/2016/04/introduction-to-docker/</link><pubDate>Fri, 22 Apr 2016 01:08:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/introduction-to-docker/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg" width="640" height="217" alt="docker">&lt;/a>&lt;/p>
&lt;p>在個人開發環境或者是部署上，&lt;a href="https://www.docker.com/">Docker&lt;/a> 已經是不可或缺的工具，尤其是團隊開發上，如何用 Docker 統一團隊開發環境，減少團隊成員浪費在環境建置及開發上互不影響，底下來看看投影片大綱:&lt;/p></description></item><item><title>Docker 實用指令及 Best Practices Cheat Sheet 圖表</title><link>https://blog.wu-boy.com/2016/03/docker-commands-and-best-practices-cheat-sheet/</link><pubDate>Sun, 20 Mar 2016 05:33:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/03/docker-commands-and-best-practices-cheat-sheet/</guid><description>在網路上看到有人提供 Docker 的 Cheat Sheet，裡面整理了很多常用的指令，建議剛入門 Docker 的初學者務必把底下指令學完，底下就是 Cheat Sheet
點我大圖
container 放大架構圖
基本指令 下載映像檔
1 $ docker pull image_name 啟動或關閉 container
1 $ docker [start|stop] container_name 建立 -&amp;gt; 啟動 -&amp;gt; 執行指令 (-ti 參數)
1 $ docker run -ti --name container_name image_name command 建立 -&amp;gt; 啟動 -&amp;gt; 執行指令 -&amp;gt; 刪除 container (-rm 參數)
1 $ docker run --rm -ti image_name command file system 及 port 對應 (-v 及 -p 參數)</description></item><item><title>用 Docker 取代 Laravel Homestead 開發環境</title><link>https://blog.wu-boy.com/2016/03/replace-laravel-homestead-with-docker/</link><pubDate>Thu, 10 Mar 2016 06:37:40 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/03/replace-laravel-homestead-with-docker/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>新手第一次接觸 &lt;a href="http://laravel.com/">Laravel&lt;/a>，我都會推薦使用 &lt;a href="https://laravel.com/docs/5.2/homestead">Homestead&lt;/a> 來解決開發環境的困擾，但是我發現 Homestead 對於第一次接觸 &lt;a href="https://www.virtualbox.org/">Virtualbox&lt;/a> 及指令的初學者，設定還是比較複雜，造成很多新手光是在這邊就卡關了，有沒有什麼辦法可以解決這煩人又複雜的 Homestead 設定，剛好今天在 &lt;a href="https://github.com/">Github&lt;/a> 上看到 &lt;a href="https://github.com/laraedit/laraedit-docker">laraedit-docker&lt;/a> 專案，此專案是把 Homestead 轉換成用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 來跑，這樣只要您的環境有支援 Docker，就可以快速設定好環境含 MySQL, Redis &amp;hellip;等&lt;/p></description></item><item><title>在 MAC OS 快速又簡單安裝 Docker 環境 – dlite</title><link>https://blog.wu-boy.com/2016/02/the-simplest-way-to-use-docker-on-os-x-dlite/</link><pubDate>Mon, 15 Feb 2016 08:40:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/the-simplest-way-to-use-docker-on-os-x-dlite/</guid><description>在 Mac OS X 底下安裝 Docker 服務不難，只需要到 Docker Mac 教學網站下載 Docker Toolbox，就可以使用 docker-machine, docker, docker-compose 等指令操作 Docker 服務。本篇提供另外一種工具，讓 Mac 開發者可以快速使用 Docker 服務，就是這套用 Go 語言寫的 dlite 工具。
安裝方式 dlite 提供三種方式安裝
直接下載執行檔案 (推薦) (下載連結) 直接透過 brew 指令安裝: brew install dlite 開發者模式: git clone 專案，然後下 make dlite 產生執行檔案 請大家直接使用第一種方式安裝即可。
使用方式 安裝 dlite 需要使用到磁碟空間及記憶體，你可以動態指定 memory 使用量，或者是磁碟空間，詳細指令可以透過 dlite install -h 觀看
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ sudo dlite install -h Usage: dlite [OPTIONS] install [install-OPTIONS] creates an empty disk image, downloads the os, saves configuration and creates a launchd agent Help Options: -h, --help Show this help message [install command options] -c, --cpus= number of CPUs to allocate (default: 1) -d, --disk= size of disk in GiB to create (default: 20) -m, --memory= amount of memory in GiB to allocate (default: 2) -s, --ssh-key= path to public ssh key (default: $HOME/.</description></item><item><title>Laravel Homestead 搭配 phpMyAdmin Docker</title><link>https://blog.wu-boy.com/2016/01/laravel-homestead-and-phpmyadmin-docker/</link><pubDate>Sat, 02 Jan 2016 08:14:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/01/laravel-homestead-and-phpmyadmin-docker/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23493872563/in/dateposted-public/" title="laravel">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1655/23493872563_4f01a9c336_o.png?resize=400%2C400&amp;#038;ssl=1" alt="laravel" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信大家對於 &lt;a href="https://laravel.com/">Laravel&lt;/a> 推出的 &lt;a href="https://laravel.com/docs/5.1/homestead">Homestead&lt;/a> 開發環境不陌生，本篇不會教學使用 Homestead，直接看&lt;a href="https://laravel.tw/docs/5.1/homestead">繁中官網的教學&lt;/a>就可以完成了，Homestead 可以幫助開發者快速架設好 Laravel 環境，當然 Homestead 也適用於 &lt;a href="https://codeigniter.org.tw/">CodeIgniter&lt;/a> 的開發，因為兩套 Framework 的環境是一樣的，Homestead 開啟 VM 後，會自動將 Local port 對應到 VM port 如下&lt;/p>
&lt;ul>
&lt;li>SSH: 2222 → Forwards To 22&lt;/li>
&lt;li>HTTP: 8000 → Forwards To 80&lt;/li>
&lt;li>HTTPS: 44300 → Forwards To 443&lt;/li>
&lt;li>MySQL: 33060 → Forwards To 3306&lt;/li>
&lt;li>Postgres: 54320 → Forwards To 5432&lt;/li>
&lt;/ul></description></item><item><title>Docker 下載 Images 遇到 Network timed out</title><link>https://blog.wu-boy.com/2015/12/docker-images-network-timed-out/</link><pubDate>Wed, 30 Dec 2015 15:51:15 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/docker-images-network-timed-out/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/22947137613/in/datetaken-public/" title="Docker">&lt;img src="https://i2.wp.com/farm1.staticflickr.com/778/22947137613_69a88cb94b_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="Docker" data-recalc-dims="1" />&lt;/a> 最近在弄 &lt;a href="https://www.docker.com/">Docker&lt;/a> 忽然發現不管怎麼樣都不能 Pull Images 下來，會噴出底下錯誤訊息&lt;/p>
&lt;blockquote>
&lt;p>Unable to find image &amp;lsquo;corbinu/docker-phpmyadmin:latest&amp;rsquo; locally Pulling repository docker.io/corbinu/docker-phpmyadmin Network timed out while trying to connect to &lt;a href="https://index.docker.io/v1/repositories/corbinu/docker-phpmyadmin/images">https://index.docker.io/v1/repositories/corbinu/docker-phpmyadmin/images&lt;/a>. You may want to check your internet connection or if you are behind a proxy.&lt;/p>
&lt;/blockquote></description></item><item><title>Alpine Linux 挑戰最小 docker image OS</title><link>https://blog.wu-boy.com/2015/12/a-super-small-docker-image-based-on-alpine-linux/</link><pubDate>Sun, 27 Dec 2015 01:25:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/a-super-small-docker-image-based-on-alpine-linux/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23885045552/in/datetaken-public/" title="Screen Shot 2015-12-27 at 9.17.22 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1582/23885045552_eb06df81c8.jpg?resize=500%2C123&amp;#038;ssl=1" alt="Screen Shot 2015-12-27 at 9.17.22 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.alpinelinux.org/">Alpine Linux&lt;/a> 是一套極小安全又簡單的作業系統，在現今 &lt;a href="https://www.docker.com/">Docker&lt;/a> Images 裡面，最主要推崇的就是 &lt;a href="http://www.ubuntu.com/">Ubuntu&lt;/a> 作業系統，但是令人詬病的是 Ubuntu 還是不夠小，今天看到 Alpine 在 docker 內的大小大約是 &lt;code>5 MB&lt;/code>，看到這 size 大小，相信是令人很震撼，之前要是看到這 size 大概只有 &lt;a href="https://openwrt.org/">OpenWRT&lt;/a> 編譯 &lt;a href="https://busybox.net/">BusyBox&lt;/a> 才有可能的大小，但是 OpenWRT 最主要還是缺乏很多目前 popular 的套件，所以 Alpine 幫你解決這問題，提供大量的 &lt;a href="https://pkgs.alpinelinux.org/packages">Packages&lt;/a> 讓開發者使用。底下就可以看出 Alpine 擊敗目前盛行的 docker images 大小比較圖。&lt;/p></description></item></channel></rss>