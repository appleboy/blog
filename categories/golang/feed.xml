<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/golang/</link><description>Recent content in Golang on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 13 Nov 2022 08:23:09 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/golang/feed.xml" rel="self" type="application/rss+xml"/><item><title>系統設計: 處理服務讀取多個任務遇到的問題 (Go 語言)</title><link>https://blog.wu-boy.com/2022/11/simple-scheduler-with-multiple-worker-using-golang/</link><pubDate>Sun, 13 Nov 2022 08:23:09 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/11/simple-scheduler-with-multiple-worker-using-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/lbY6KzL.png" alt="system design 02">&lt;/p>
&lt;p>不同的服務都會有需要處理比較久的任務，這些任務是不能即時執行完成，才回應給前端，這樣使用者體驗會非常的差。將類型的任務存在資料庫或放在&lt;a href="https://zh.m.wikipedia.org/zh-hant/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息對列&lt;/a>就是一種處理方式，接著啟動另一個服務來消化非即時性的任務，而常見的處理方式就是在服務內啟動多個 Worker Node 來平行消化任務 (如上圖)。&lt;/p></description></item><item><title>三款好用的繪圖工具來解決系統架構或流程圖</title><link>https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/</link><pubDate>Sat, 17 Sep 2022 21:30:26 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/0sA0St5.png" alt="drwaio 01">&lt;/p>
&lt;p>不管是長官還是同事甚至下屬，在公司無時無刻都需要跨團隊進行溝通，當系統架構或流程越來越複雜的時候，如果沒有按照當下情況記錄下來，對於未來接手的同事，或者是自己都會不小心忘記，而在記憶最清楚的當下用文字或流程圖記錄下來，對團隊及自己是有相當大的幫助。而有沒有工具可以快速畫出系統架構或流程圖？我們可以分幾種情境來討論。&lt;/p></description></item><item><title>用 Google 團隊推出的 Wire 工具解決 Dependency Injection</title><link>https://blog.wu-boy.com/2022/09/dependency-injection-in-go/</link><pubDate>Sat, 10 Sep 2022 13:17:01 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/09/dependency-injection-in-go/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/DZOA6zy.png" alt="proposal">&lt;/p>
&lt;p>不知道大家在用 &lt;a href="https://go.dev">Go 語言&lt;/a>寫服務的時候，會不會遇到 Components 會有相互依賴的關係，A 物件依賴 B 物件，B 物件又依賴 C 物件，所以在初始化 A 物件前，就必須先將 B 跟 C 初始化完成，這就是錯綜復雜的關係。也許大家會想到另一個做法，就是把每個物件都宣告成&lt;strong>全域變數&lt;/strong>，我個人不推薦這個使用方式，雖然很方便，但是就會讓整體架構變得很複雜。而本篇要介紹一個救星工具，就是 Google 團隊開發的 &lt;a href="https://github.com/google/wire">Wire&lt;/a> 工具，官方部落格也可以&lt;a href="https://blog.golang.org/wire">參考看看&lt;/a>。此工具就是為了解決底下兩個問題 (&lt;a href="https://en.wikipedia.org/wiki/Dependency_injection">dependency injection&lt;/a>)。&lt;/p>
&lt;ol>
&lt;li>Components 互相依賴錯綜復雜的關係&lt;/li>
&lt;li>不要宣告全域變數&lt;/li>
&lt;/ol></description></item><item><title>三種好用的 gRPC 測試工具</title><link>https://blog.wu-boy.com/2022/08/three-grpc-testing-tool/</link><pubDate>Wed, 24 Aug 2022 16:29:31 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/08/three-grpc-testing-tool/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/ZfDNgPP.png" alt="grpc flow proposal">&lt;/p>
&lt;p>最近在用 &lt;a href="https://go.dev">Go 語言&lt;/a>實作微服務，溝通的接口採用 &lt;a href="https://grpc.io/">gRPC&lt;/a>，除了可以透過 gRPC 支援的&lt;a href="https://grpc.io/docs/languages/">第三方語言&lt;/a>來寫客戶端的測試之外，有沒有一些好用的工具來驗證檢查 gRPC 實現的接口。剛好今年看到 &lt;a href="https://www.postman.com/">Postman&lt;/a> 宣布&lt;a href="https://blog.postman.com/postman-now-supports-grpc/">開始支援 gRPC&lt;/a>，相信大家對於 Postman 工具並不會太陌生，畢竟測試 &lt;a href="https://en.wikipedia.org/wiki/WebSocket">Websocket&lt;/a> 或 RESTful API 都是靠這工具呢。本篇除了介紹 Postman 之外，還有一套 CLI 工具 &lt;a href="https://github.com/fullstorydev/grpcurl">grpcurl&lt;/a> 及一套 GUI 工具 &lt;a href="https://github.com/fullstorydev/grpcui">grpcui&lt;/a> 也是不錯用，後面這兩套都是由同一家公司 &lt;a href="https://www.fullstory.com/blog/tag/engineering/">FullStory&lt;/a> 開源出來的專案，底下就來一一介紹。&lt;/p></description></item><item><title>監控服務 Gatus 系統架構</title><link>https://blog.wu-boy.com/2022/07/gatus-system-architecture/</link><pubDate>Tue, 26 Jul 2022 17:29:31 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/07/gatus-system-architecture/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/mvEGMva.png" alt="gatus proposal">&lt;/p>
&lt;p>今年第一場公開的演講 &lt;a href="https://cloudsummit.ithome.com.tw/">2022 台灣雲端大會&lt;/a>，台灣五月開始疫情變嚴重，故延遲了一次到七月才舉辦，這次帶給大家的是『&lt;a href="https://cloudsummit.ithome.com.tw/2022/speaker-page/69">自動化監控網站運行服務 – Gatus&lt;/a>』，內容可以拆為兩個部分，第一部分是介紹為什麼要使用 &lt;a href="https://github.com/TwiN/gatus">Gatus&lt;/a>，用來解決開發團隊哪些問題，我也整理了三大點為什麼我選擇 Gatus，另一部分就是本篇的主軸，Gatus 系統架構跟流程。&lt;/p>
&lt;ol>
&lt;li>監控條件 (客製化回應)&lt;/li>
&lt;li>開源專案 (Go 語言)&lt;/li>
&lt;li>簡易頁面 (Status Page)&lt;/li>
&lt;/ol>
&lt;p>對於使用 Gatus 有興趣的朋友可以參考我之前寫的文章：『&lt;a href="https://blog.wu-boy.com/2022/03/automated-service-health-dashboard-gatus/">自動化監控網站運行服務 - Gatus&lt;/a>』，本篇就不介紹怎麼使用 Gatus 了。&lt;/p></description></item><item><title>在 Go 語言測試使用 Setup 及 Teardown</title><link>https://blog.wu-boy.com/2022/07/setup-and-teardown-with-unit-testing-in-golang/</link><pubDate>Sun, 17 Jul 2022 07:44:49 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/07/setup-and-teardown-with-unit-testing-in-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/FD5go1t.png" alt="logo">&lt;/p>
&lt;p>相信大家在寫測試時，都會需要啟動而外服務，像是 &lt;a href="https://redis.io/">Redis&lt;/a> 或 &lt;a href="https://www.postgresql.org/">Postgres&lt;/a> 等，而開始測試前會需要初始化資料庫連線，或者是準備測試資料，測試結束後就關閉資料庫連線，並且移除不必要的測試資料或檔案。在 &lt;a href="https://go.dev">Go 語言&lt;/a>內開發者不用去依賴第三方的套件，透過內建的 &lt;code>TestMain&lt;/code> 就可以非常輕鬆完成此事情。底下看看如何操作及使用。&lt;/p></description></item><item><title>優化重構 Worker Pool 程式碼</title><link>https://blog.wu-boy.com/2022/06/refactor-worker-pool-source-code/</link><pubDate>Tue, 07 Jun 2022 20:42:17 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/06/refactor-worker-pool-source-code/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/mDJolWF.png" alt="logo">&lt;/p>
&lt;p>最近看到 &lt;a href="https://go.dev">Go 語言&lt;/a>一段程式碼，認為有很大的優化空間，也將過程跟想法分享給大家。也許每個人優化的方向不同，各位讀者可以把&lt;a href="https://go.dev/play/p/aZFiLXm16lI">程式碼&lt;/a>整個看完後，先停住，不要繼續往下看，想看看是否有優化的空間。此程式碼本身沒有任何問題，執行過程不會出現任何錯誤。&lt;/p>
&lt;p>先說明底下範例在做什麼，相信大家都有聽過在 Go 語言內要實現 &lt;a href="https://gobyexample.com/worker-pools">Worker Pools&lt;/a> 機制相當簡單，看到 &lt;code>ExecuteAll&lt;/code> 函式就是讓開發者可以自訂同時間開多少個 Goroutine 來平行執行工作，第二個參數可以自訂義工作內容是什麼。&lt;/p></description></item><item><title>在 Go 語言內使用 bytes.Buffer 注意事項</title><link>https://blog.wu-boy.com/2022/06/reuse-the-bytes-buffer-in-go/</link><pubDate>Tue, 07 Jun 2022 20:42:17 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/06/reuse-the-bytes-buffer-in-go/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/FD5go1t.png" alt="logo">&lt;/p>
&lt;p>在 &lt;a href="https://go.dev">Go 語言&lt;/a>中，如何高效的處理字串相加，由於字串 (string) 是不可變的，所以將很多字串拼接起來，會如同宣告新的變數來儲存。這邊就可以透過 &lt;a href="https://pkg.go.dev/strings">strings.Builder&lt;/a> 或 &lt;a href="https://pkg.go.dev/bytes">bytes.Buffer&lt;/a> 來解決字串相加效能問題。除了效能問題之外，還需要注意在 &lt;code>bytes.Buffer&lt;/code> 處理 &lt;code>[]byte&lt;/code> 及 &lt;code>string&lt;/code> 之間的轉換，底下拿實際專案上寫出來的錯誤給大家參考看看&lt;/p></description></item><item><title>用 10 分鐘了解 Go 語言如何從 Channel 讀取資料</title><link>https://blog.wu-boy.com/2022/05/read-data-from-channel-in-go/</link><pubDate>Sun, 22 May 2022 22:42:46 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/05/read-data-from-channel-in-go/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/NGE7q2U.png" alt="logo">&lt;/p>
&lt;p>Go 語言強大的 &lt;a href="https://go.dev/tour/concurrency/1">goroutine 特性&lt;/a>，讓各位開發者愛不釋手，而多個 goroutine 如何溝通呢？就是透過 &lt;a href="https://go.dev/tour/concurrency/2">Channel&lt;/a> 來做到。本篇教大家從 Channel 讀取資料的兩種方式及使用時機，並實際用一個案例快速了解 Channel 實作上會遇到哪些問題？底下用兩個範例讓大家了解如何讀取 Channel 資料出來。&lt;/p></description></item><item><title>用 Go 語言實現 Pub-Sub 模式</title><link>https://blog.wu-boy.com/2022/04/simple-publish-subscribe-pattern-in-golang/</link><pubDate>Sat, 30 Apr 2022 20:56:49 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/04/simple-publish-subscribe-pattern-in-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/k7fF6V0.png" alt="logo">&lt;/p>
&lt;p>相信大家都知道&lt;a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85">發布 / 訂閱模式&lt;/a>，開發者可以透過第三方開源工具像是 &lt;a href="https://redis.io">Redis&lt;/a>, &lt;a href="https://nsq.io">NSQ&lt;/a> 或 &lt;a href="https://nats.io">Nats&lt;/a> 等來實現訂閱機制，本篇則是會教大家如何用 &lt;a href="https://go.dev">Go 語言&lt;/a>寫出一個單機版本的 Pub/Sub 模式，在單一系統內非常輕量級，且不需要靠第三方服務就可以輕易實現。底下會直接用單一訂閱 Topic 機制來撰寫 Publisher 及 Subscriber。&lt;/p></description></item><item><title>Go 語言實作 Graceful Shutdown 套件</title><link>https://blog.wu-boy.com/2022/04/new-package-graceful-shutdown-in-golang/</link><pubDate>Sun, 17 Apr 2022 07:41:33 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/04/new-package-graceful-shutdown-in-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/D5FfhY5.png" alt="background job 01">&lt;/p>
&lt;blockquote>
&lt;p>歡迎追蹤 &lt;a href="https://github.com/appleboy/graceful">appleboy/graceful&lt;/a> 套件&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://go.dev">Go 語言&lt;/a>撰寫的服務如何優雅的重新啟動，避免工作執行到一半就被關閉，是一個很中要的議題。故實作了簡易 Graceful Shutdown 套件，讓服務都可以支援此功能，如果不知道什麼是 Graceful Shutdown 的朋友們，可以參考這篇『 &lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">[Go 教學] 什麼是 graceful shutdown?&lt;/a>』，本篇跟大家介紹一個好用的套件『&lt;a href="https://github.com/appleboy/graceful">appleboy/graceful&lt;/a>』，使用後。不用再擔心背景的服務沒完成就被關閉，不只是背景的工作需要處理，在關閉服務前，開發者也要確保部分工作要在關閉服務前才執行，像是關閉 Database 及 Redis 連線。&lt;/p></description></item><item><title>使用 AWS IAM Policy 設定 S3 Bucket 底下特定目錄權限</title><link>https://blog.wu-boy.com/2022/04/grant-access-to-user-specific-folders-in-amazone-s3-bucket/</link><pubDate>Sat, 02 Apr 2022 15:49:44 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/04/grant-access-to-user-specific-folders-in-amazone-s3-bucket/</guid><description>&lt;p>如何有效控制 &lt;a href="https://aws.amazon.com/tw/">AWS&lt;/a> User 能看到哪些功能，以及執行哪些操作，最仰賴的就是 &lt;a href="https://aws.amazon.com/iam/">AWS Identity and Access Management&lt;/a> (簡稱 IAM)，IAM 可以讓管理者透過 UI 或自定義 JSON 格式來客製化使用者權限。剛好最近跟其他團隊合作到一個專案，需求就是開發者透過 Web 進行 AI Model 訓練，訓練前 &lt;a href="https://aws.amazon.com/pm/sagemaker">SageMaker&lt;/a> 會將使用者的 Dataset 下載到容器內，接著開始訓練，而團隊將此下載 Dataset 動作記錄到 AWS S3 Bucket 的 &lt;code>syslog&lt;/code> 目錄內，確保檔案存取紀錄。最後將目錄底下的檔案，開權限給客戶進行查看，避免管理者或其他 User 不小心存取到別人的 Dataset 資料。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zg8abD1.png" alt="log">&lt;/p>
&lt;p>一般來說在 Bucket 內會有許多 Sub-Folder，而 AWS 透過 IAM 方式設定 User 只能存取特定的目錄。可以參考 AWS 官方這篇文章『&lt;a href="https://aws.amazon.com/blogs/security/writing-iam-policies-grant-access-to-user-specific-folders-in-an-amazon-s3-bucket/">Writing IAM Policies: Grant Access to User-Specific Folders in an Amazon S3 Bucket&lt;/a>』。&lt;/p></description></item><item><title>推薦自動化監控網站運行服務 - Gatus</title><link>https://blog.wu-boy.com/2022/03/automated-service-health-dashboard-gatus/</link><pubDate>Sun, 20 Mar 2022 09:59:59 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/03/automated-service-health-dashboard-gatus/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/duUxnBC.jpg" alt="gatus dashboard">&lt;/p>
&lt;p>部署服務後，怎麼明確讓團隊清楚知道服務的運行狀況，就像 GitHub 就是提供&lt;a href="https://www.githubstatus.com/">整體運行的網頁&lt;/a>，監控常用的操作指令，像是 Git Operations, Webhooks 或 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 等服務狀況。讓開發者遇到問題的時候，可以即時查看現在狀態做出相對應動作。而類似這樣的線上服務很多，像是 Atlassian 的 &lt;a href="https://www.atlassian.com/software/statuspage">Statuspage&lt;/a> 或 &lt;a href="https://pingpong.one/">PingPong&lt;/a> 等，更多免費服務可以直接參考 &lt;a href="https://github.com/ivbeg/awesome-status-pages">awesome-status-pages&lt;/a>。而本篇要介紹一套開源軟體 &lt;a href="https://github.com/TwiN/gatus">Gatus&lt;/a>，它是用 &lt;a href="https://go.dev">Go 語言&lt;/a>撰寫出來的，非常輕量。&lt;/p></description></item><item><title>使用 pyroscope adhoc 加速找到效能瓶頸</title><link>https://blog.wu-boy.com/2022/02/pyroscope-adhoc-profiling-in-golang/</link><pubDate>Sun, 27 Feb 2022 09:07:55 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/02/pyroscope-adhoc-profiling-in-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/KMl96Ks.png" alt="pyroscope profiling">&lt;/p>
&lt;p>大家在開發軟體時，會快速迭代專案時程跟需求，功能越多，系統就會開始出現效能上的瓶頸，而最快的解決方式就是先垂直擴展，把 CPU 跟記憶體先往上加，但是這是治標不治本，所以之前有推薦大家一套如何在服務執行時，快速找到哪個地方執行較慢，請參考之前的文章『&lt;a href="https://blog.wu-boy.com/2021/03/debug-performance-issues-using-pyroscope/">即時效能分析工具 Pyroscope&lt;/a>』，&lt;a href="https://pyroscope.io">Pyroscope&lt;/a> 目前支援了很多語言，像是 Go, Python, Java, Ruby, Rust, PHP 及 .Net，如果你想要快速在本地端找到效能瓶頸，請繼續將本篇看完。底下會用 &lt;a href="https://go.dev">Go 語言&lt;/a>實際範例教大家。&lt;/p></description></item><item><title>Go 1.18 generics 新套件 constraints, slices 及 maps</title><link>https://blog.wu-boy.com/2022/02/golang-1-18-generics-constraints-slices-maps/</link><pubDate>Sat, 19 Feb 2022 11:38:38 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/02/golang-1-18-generics-constraints-slices-maps/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="logo">&lt;/p>
&lt;p>今天看到 Go1.18 終於推出 &lt;a href="https://groups.google.com/g/golang-announce/c/QHL1fTc352o/m/5sE6moURBwAJ">RC1 版本&lt;/a>了，離正式 Release 又跨出一大步了。繼上一篇『&lt;a href="https://blog.wu-boy.com/2022/02/introduction-to-golang-1-18-generics/">初探 golang 1.18 generics 功能&lt;/a>』教學後，本次來看看 go1.18 推出三個新的 Package: &lt;a href="https://pkg.go.dev/golang.org/x/exp/constraints">constraints&lt;/a>, &lt;a href="https://pkg.go.dev/golang.org/x/exp/slices">slices&lt;/a> 及 &lt;a href="https://pkg.go.dev/golang.org/x/exp/maps">maps&lt;/a> 使用方式。目前這三個 Package 會統一放在 &lt;code>golang.org/x/exp&lt;/code> 內。本篇程式碼都可以在&lt;a href="https://github.com/go-training/training/tree/master/example46-go-1.18-generics-part2">這邊找到&lt;/a>。&lt;/p></description></item><item><title>初探 golang 1.18 generics 功能</title><link>https://blog.wu-boy.com/2022/02/introduction-to-golang-1-18-generics/</link><pubDate>Fri, 11 Feb 2022 08:18:19 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2022/02/introduction-to-golang-1-18-generics/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="logo">&lt;/p>
&lt;p>&lt;a href="https://go.dev/">Go 語言&lt;/a>在近期內會推出 &lt;a href="https://tip.golang.org/doc/go1.18">1.18&lt;/a> 版本，而 1.18 最重要的功能之一就是 &lt;a href="https://go.dev/doc/tutorial/generics">generics&lt;/a>，在此版本之前，最令人詬病的就是 Go 無法支援多種 Type 當參數，造成在寫 Package 時候多出很多重複性的程式碼，本篇會教大家基礎認識什麼是 generics，及怎麼使用。&lt;/p></description></item><item><title>Introduction to Open Policy Agent 初探權限控管機制</title><link>https://blog.wu-boy.com/2021/10/introduction-to-open-police-agent-in-mopconf/</link><pubDate>Sun, 24 Oct 2021 11:39:20 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/10/introduction-to-open-police-agent-in-mopconf/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" alt="logo">&lt;/p>
&lt;p>很高興可以在 &lt;a href="https://mopcon.org/2021/">Mopconf&lt;/a> 分享 &lt;a href="https://www.openpolicyagent.org/">Open Policy Agent&lt;/a>。本議程最主要是跟大家初步分享 OPA 的概念，我們團隊如何將 OPA 導入系統架構，及分享如何設計 RBAC 及 &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM Role&lt;/a> 架構，底下是這次預計會分享的內容:&lt;/p>
&lt;ol>
&lt;li>Why do we need a Policy Engine?&lt;/li>
&lt;li>Why do we choose Open Policy Agent?&lt;/li>
&lt;li>Workflow with Open Policy Agent?&lt;/li>
&lt;li>What is Policy Language (Rego)?&lt;/li>
&lt;li>RBAC and IAM Role Design&lt;/li>
&lt;li>Three ways to deploy an Open Policy Agent.&lt;/li>
&lt;/ol>
&lt;p>可以參考另外兩篇介紹&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/">初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.wu-boy.com/2021/05/comunicate-with-open-policy-agent-using-resful-api/">使用 RESTful API 串接 Open Policy Agent&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>如果可以的話，大家可以給我一些回饋，請填寫&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSfRuK40O1j5KIPHt6RQyY3Au77bW91kgGIEGOrNxsjxHUSwgA/viewform">會後問卷&lt;/a>&lt;/p></description></item><item><title>用 Supervisor 管理系統程式</title><link>https://blog.wu-boy.com/2021/09/control-system-process-using-supervisor-in-golang/</link><pubDate>Mon, 20 Sep 2021 18:55:22 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/09/control-system-process-using-supervisor-in-golang/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/4uBJZAG.png" alt="cover">&lt;/p>
&lt;p>相信大家都有管理 Linux 主機 Process 的經驗，用的工具也是千奇百種，但是肯定對 &lt;a href="https://www.python.org/">Python&lt;/a> 版本的 &lt;a href="http://supervisord.org/">Supervisor&lt;/a> 並不陌生，這套工具相當好用，可以監控不同的 Process 狀態，也可以自動重啟。而本篇要介紹用 &lt;a href="http://golang.org/">Go 語言&lt;/a>寫出來的開源套件『&lt;a href="https://github.com/ochinchina/supervisord">Supervisord&lt;/a>』，作者提到為什麼要用 Go 語言開發此工具，原因很簡單，就是透過 Go 語言的跨平台優勢，寫一套程式，可以直接跑在任何平台，管理者就不需要再為了 Python 環境而煩惱。&lt;/p></description></item><item><title>NSQ Consumers 處理 Graceful Shutdown 技巧</title><link>https://blog.wu-boy.com/2021/09/graceful-shutdown-with-nsq-consumers/</link><pubDate>Sun, 19 Sep 2021 14:50:42 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/09/graceful-shutdown-with-nsq-consumers/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/i98snGt.png" alt="Imgur">&lt;/p>
&lt;p>&lt;a href="https://nsq.io/">NSQ&lt;/a> 是一套即時分散式處理消息平台，目的在於提供大量的訊息傳遞，團隊可以依據不同的任務來設計分散式架構去消化大量的訊息。而我在最近開發了一套開源項目 &lt;a href="https://github.com/golang-queue/queue">golang-queue/queue&lt;/a>，這套詳細的資訊會再開另一篇進行討論，簡單來說這個套件可以讓開發者使用在單機的 Producer 及 Consumer 架構，使用的就是 &lt;a href="https://golang.org">Go 語言&lt;/a>的 Goroutine 及 Channel，又或者直接搭配 &lt;a href="https://nsq.io/">NSQ&lt;/a>, &lt;a href="https://nats.io/">NATs&lt;/a> 或 &lt;a href="https://redis.io/topics/pubsub">Redis Pub/Sub&lt;/a> 第三方的系統取代內建的 Channel 機制。而本篇會講在整合 NSQ 要處理 &lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">Graceful Shutdown&lt;/a> 所遇到的問題跟解決方式。&lt;/p></description></item><item><title>用 AWS EFS 或 FSx Lustre 加速 Sagemaker AI 模型訓練</title><link>https://blog.wu-boy.com/2021/09/speed-up-amazon-sagemaker-training-using-efs-or-fsx-lustre/</link><pubDate>Sat, 04 Sep 2021 12:43:19 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/09/speed-up-amazon-sagemaker-training-using-efs-or-fsx-lustre/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/X4wpl6d.png" alt="cover">&lt;/p>
&lt;p>前不久寫過一篇『&lt;a href="https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/">AI 團隊整合導入 AWS SageMaker 流程&lt;/a>』介紹如何用 &lt;a href="https://golang.org">Go 語言&lt;/a>整合 &lt;a href="https://aws.amazon.com/tw/pm/sagemaker/">SageMaker API&lt;/a>。本篇會介紹在訓練 AI 模型前，如何將 Dataset 準備好並整合 SageMaker，過程中遇到什麼問題跟挑戰。團隊提供 AI 平台讓使用者可以上傳自家的 Dataset 搭配團隊內部預設的 Dataset 進行 AI 模型的訓練，最後將模型提供給使用者下載使用，簡單來說，使用者只需要提供 Dataset 並把 AI 訓練參數設定完畢，就可以拿到最後的模型進行後續的整合開發。底下我們探討使用者上傳 Dataset 的流程。&lt;/p></description></item><item><title>開源專案 Drone CI/CD 平台真的免費嗎？</title><link>https://blog.wu-boy.com/2021/08/drone-license/</link><pubDate>Sun, 01 Aug 2021 09:57:19 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/08/drone-license/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/2P2MVNK.png" alt="cover">&lt;/p>
&lt;p>自己推行 &lt;a href="https://www.drone.io/">Drone&lt;/a> CI/CD 開源平台已經多年，很多人都會問我說，Drone 真的可以免費使用嗎？用在開源上面，或者是導入進公司內部團隊，這費用該怎麼計算呢？好的，本篇就帶大家了解 Drone 用在開源上或是公司內部團隊上需要注意的地方，官方其實有寫了一整頁 &lt;a href="https://docs.drone.io/enterprise/">FAQ 非常詳細&lt;/a>，底下是我整理幾點給大家知道。&lt;/p></description></item><item><title>AI 團隊整合導入 AWS SageMaker 流程</title><link>https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/</link><pubDate>Sun, 27 Jun 2021 11:35:53 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/REuJgTP.png" alt="Flow">&lt;/p>
&lt;h2 id="團隊困境">團隊困境&lt;/h2>
&lt;p>如果團隊未來想把&lt;a href="https://medium.com/@troy801125/machine-learning-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E5%92%8C%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E6%98%AF%E4%BB%80%E9%BA%BC-49a6ba41ab3e">機器學習&lt;/a>推廣成一個服務，可以讓開發者帶入不同的參數進行客製化的學習，最終拿到學習過的 Model。或是團隊資源不夠，想要使用大量的 GPU 資源來加速 AI Model Training，這時就是要朝向使用第三方資源像是 &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html">AWS SageMaker&lt;/a> 來進行整合。而在團隊內會分成機器學習團隊，及後端團隊，前者是專門進行資料分析及 AI Model 演算法及程式碼開發，後者則是專攻全部工作流程，從產生測試資料，前置準備，到 Training Model，及將產生的結果發送給開法者，這整段流程會由後端團隊進行串接。所以當我們要用第三方服務時 AWS SageMaker，對於機器學習團隊來說，要將整個環境打包成容器模式，並且符合 SageMaker 所規定的格式，&lt;strong>過程相當複雜&lt;/strong>，而為了讓開發環境統一，我們使用了&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/docker-containers.html">容器技術&lt;/a> (Docker Container) 來進行 SageMaker 串接，本篇會教大家如何整合 SageMaker 流程，讓機器學習團隊可以專注於 Model 流程開發，而不需要花時間在整合容器技術並符合 SageMaker 格式。&lt;/p></description></item><item><title>用 docker-compose 優雅關閉服務</title><link>https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/</link><pubDate>Sun, 20 Jun 2021 10:28:17 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="logo">&lt;/p>
&lt;p>大家應該遇過如果服務還有工作還沒處理完，服務要進行更新，需要等到全部工作處理完成才可以將服務的停止，而當服務收到關閉通知信號時，第一要先停止接受 Job 任務，接著等待 Worker 將手上 Job 處理完畢後，才停止服務，接著更新再上線。而這狀況怎麼透過 docker-compose 來處理停止服務，這就是本篇的重點。文章內會用 &lt;a href="https://golang.org/">Go 語言&lt;/a>當教學範例，如何接受 &lt;a href="https://www.docker.com/">Docker&lt;/a> 傳來的 Signal 訊號，接受訊號後該如何處理，及如何設定 docker-compose 的 YAML 檔案確保所有的工作都可以正常執行完畢。&lt;/p>
&lt;p>之前已經有寫過幾篇關於 Graceful Shutdown 教學文章，大家有興趣可以先閱讀底下教學連結資訊，而本篇最主要是紀錄在如何用 docker 指令優雅關閉容器服務，尤其是關閉服務前，可以讓原本服務內的工作可以正常做完，才正式關閉。在本文開始前，先將 &lt;a href="https://www.docker.com/">docker&lt;/a> 及 &lt;a href="https://docs.docker.com/compose/compose-file/">docker-compose&lt;/a> 版本資訊貼出來，避免有資訊的落差，畢竟 docker-compose 在不同版本之間有不同的設定方式。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/">[Go 教學] graceful shutdown 搭配 docker-compose 實現 rolling update&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.wu-boy.com/2020/02/graceful-shutdown-with-multiple-workers/">[Go 教學] graceful shutdown with multiple workers&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go 語言內 new 跟 make 使用時機</title><link>https://blog.wu-boy.com/2021/06/what-is-different-between-new-and-make-in-golang/</link><pubDate>Tue, 08 Jun 2021 08:51:18 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/06/what-is-different-between-new-and-make-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="logo">&lt;/p>
&lt;p>大家接觸 Go 語言肯定對 &lt;code>new&lt;/code> 跟 &lt;code>make&lt;/code> 不陌生，但是什麼時候要使用 &lt;code>new&lt;/code> 什麼時候用 &lt;code>make&lt;/code>，也許是很多剛入門的開發者比較不懂，本篇就簡單筆記 &lt;code>new&lt;/code> 跟 &lt;code>make&lt;/code> 的差異及使用時機。&lt;/p></description></item><item><title>將部落格從 Wordpress 轉換到 Hugo</title><link>https://blog.wu-boy.com/2021/05/migrate-wordpress-to-hugo/</link><pubDate>Sun, 30 May 2021 13:34:20 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/05/migrate-wordpress-to-hugo/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/hJRgySS.png" alt="blog cover">&lt;/p>
&lt;p>自己的 Blog 從 2006 年開始撰寫各類技術性文章，用的都是 &lt;a href="https://wordpress.com/zh-tw/">Wordpress&lt;/a> 系統，這是當時最盛行的 &lt;a href="https://github.com/WordPress/WordPress">Blog 開源專案&lt;/a>，想想當年第一個學習的語言是 &lt;a href="https://www.php.net/">PHP&lt;/a>，這個選擇也陪伴了我 15 年以上，而是什麼原因讓我想從 Wordpress 轉換到 Hugo 呢？&lt;/p></description></item><item><title>如何取得上傳進度條 progress bar 相關數據及實作 Graceful Shutdown</title><link>https://blog.wu-boy.com/2021/05/graceful-shutdown-with-progress-bar-in-golang/</link><pubDate>Fri, 21 May 2021 04:52:17 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/05/graceful-shutdown-with-progress-bar-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/ASkclquxfpPTlJ_QWnhZjB5katrz18NyK4zt2w47UM8gS71MCjWodDoGp50nHRyeQx8MfbJJbwWjfIWCoKbZYLkec7a-FqMEw-r9Lh3U8XGAuwEqWa3DVMB2lkhdgMQUI1IMiKWL5Ss=w1920-h1080" alt="">&lt;/p>
&lt;p>由於專案需求，需要開發一套 CLI 工具，讓 User 可以透過 CLI 上傳大檔案來進行 Model Training，請參考上面的流程圖。首先第一步驟會先跟 API Server 驗證使用者，驗證完畢就開始上傳資料到 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a> 或其他 Storage 空間，除了上傳過程需要在 CLI 顯示目前進度，另外也需要將目前上傳的進度 (速度, 進度及剩餘時間) 都上傳到 API Server，最後在 Web UI 介面透過 &lt;a href="https://www.apollographql.com/docs/react/data/subscriptions/">GraphQL Subscription&lt;/a> 讓使用者可以即時看到上傳進度數據。&lt;/p>
&lt;p>而 CLI 上傳進度部分，我們選用了一套開源套件 &lt;a href="https://github.com/cheggaaa/pb">cheggaaa/pb&lt;/a>，相信有在寫 &lt;a href="https://golang.org">Go 語言&lt;/a>都並不會陌生。而此套件雖然可以幫助在 Terminal 顯示進度條，但是有些接口是沒有提供的，像是即時速度，上傳進度及剩餘時間。本篇教大家如何實作這些數據，及分享過程會遇到相關問題。&lt;/p></description></item><item><title>使用 RESTful API 串接 Open Policy Agent</title><link>https://blog.wu-boy.com/2021/05/comunicate-with-open-policy-agent-using-resful-api/</link><pubDate>Tue, 04 May 2021 02:14:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/05/comunicate-with-open-policy-agent-using-resful-api/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" title="Open Policy Agent">&lt;img src="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" alt="Open Policy Agent" title="Open Policy Agent">&lt;/a>&lt;/p>
&lt;p>上一篇『&lt;a href="https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/">初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管&lt;/a>』介紹了如何透過 &lt;a href="https://golang.org">Go 語言&lt;/a>直接嵌入 Open Policy Agent (簡稱 OPA)設定檔，並透過 Go 套件直接查詢使用者權限。由於目前 OPA 只有支援三種模式串接各種不同的 Application，一種是透過 Go 語言直接整合，詳細請看上一篇教學，另一種是透過 RESTful API，也就是本篇的教學，最後一種是透過 &lt;a href="https://webassembly.org/">WebAssembly&lt;/a> 讓其他 application 可以直接讀取。之後有機會再來寫 WebAssembly 教學。而本篇將帶您了解如何透過 RESTful API 方式來完成 &lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control">RBAC 權限控管&lt;/a>，其實我比較期待支援 &lt;a href="https://grpc.io/">gRPC&lt;/a> 模式，但是看到這篇 &lt;a href="https://github.com/open-policy-agent/opa/issues/841">issue 提到&lt;/a>，OPA 現在已經支援 Plugin 模式，大家想擴充的，可以自行處理。&lt;/p></description></item><item><title>初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管</title><link>https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/</link><pubDate>Sun, 18 Apr 2021 07:24:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" title="Open Policy Agent">&lt;img src="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" alt="Open Policy Agent" title="Open Policy Agent">&lt;/a>&lt;/p>
&lt;p>最近公司內部多個專案都需要用到 &lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">RBAC&lt;/a> (Role-based access control) 權限控管，所以決定來找尋 Go 語言的解決方案及套件，在 Go 語言比較常聽到的就是 &lt;a href="https://casbin.org/">Casbin&lt;/a>，大家眾所皆知，但是隨著專案變大，系統複雜性更高，希望未來可以打造一套可擴充性的權限機制，故網路上看到一篇 &lt;a href="https://gist.github.com/Wang-Kai/18fe4e662ef795805c14b1ec94932834">ladon vs casbin&lt;/a> 的介紹文章，文章留言有中國開發者對於 Casbin 的一些看法，以及最後他推薦另一套 &lt;a href="https://www.cncf.io/">CNCF&lt;/a> 的專案叫 &lt;a href="https://www.openpolicyagent.org/">Open Policy Agent&lt;/a> 來實作權限控管機制。本篇直接來針對 Open Policy Agent 簡稱 (OPA) 來做介紹，並且用 Go 語言來驗證 RBAC 權限。底下是文章內其他開發者用過 Casbin 的感想&lt;/p>
&lt;blockquote>
&lt;p>1.使用覺得ladon的質量更好，支持類ACL和RBAC的權限系統，跟亞馬遜AWS的IAM非常契合 2.casbin那些庫的質量真的是無力吐槽，都沒有經常測試的東西就往github發，UI也到處bug，全都是畢業生寫的一樣，試用便知 3.casbin這個項目不讓提問題，提問題就給你關閉，作者很涉別人提問題 4.這些確實是本人的經歷，大家慎重選擇吧&lt;/p>
&lt;/blockquote>
&lt;p>最後的推薦&lt;/p>
&lt;blockquote>
&lt;p>強烈推薦CNCF今年畢業的策略引擎OPA（維護團隊主要是Google，微軟，Styra等），可以實現ABAC，RBAC，PBAC等各種權限模型，目前我們已經在生產環境中使用。 也是基於OPA實現的。&lt;/p>
&lt;/blockquote>
&lt;p>本篇所使用的範例程式碼請從&lt;a href="https://github.com/go-training/opa-demo/tree/v0.0.1">這邊下載或觀看&lt;/a>。&lt;/p></description></item><item><title>為什麼 signal.Notify 要使用 buffered channel</title><link>https://blog.wu-boy.com/2021/03/why-use-buffered-channel-in-signal-notify/</link><pubDate>Tue, 30 Mar 2021 03:19:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/03/why-use-buffered-channel-in-signal-notify/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>如果不了解什麼是 buffer 或 unbuffer &lt;a href="https://tour.golang.org/concurrency/2">channel&lt;/a> 的朋友們，可以參考&lt;a href="https://blog.wu-boy.com/2019/04/understand-unbuffered-vs-buffered-channel-in-five-minutes/">這篇文章&lt;/a>先做初步了解，本文要跟大家介紹為什麼 signal.Notify 要使用 buffered channel 才可以，底下先來看看如何使用 signal.Notify，當我們要做 &lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">graceful shutdown&lt;/a> 都會使用到這功能，想要正常關閉服務或連線，透過 signal 可以偵測訊號來源，執行後續相關工作 (關閉 DB 連線，檢查 Job 是否結束 &amp;hellip; 等)。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-15">15&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-16">16&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-17">17&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-18">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-18">18&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-19">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-19">19&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;os/signal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Set up channel on which to send signal notifications.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// We must use a buffered channel or risk missing the signal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// if we&amp;#39;re not ready to receive when the signal is sent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> c := &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">chan&lt;/span> os.Signal, &lt;span style="color:#b452cd">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal.&lt;span style="color:#008b45">Notify&lt;/span>(c, os.Interrupt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Block until a signal is received.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> s := &amp;lt;-c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Got signal:&amp;#34;&lt;/span>, s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面例子可以很清楚看到說明，假如沒有使用 buffered channel 的話，你有一定的風險會沒抓到 Signal。那為什麼會有這段說明呢？底下用其他例子來看看。&lt;/p></description></item><item><title>即時效能分析工具 Pyroscope</title><link>https://blog.wu-boy.com/2021/03/debug-performance-issues-using-pyroscope/</link><pubDate>Mon, 01 Mar 2021 13:20:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/03/debug-performance-issues-using-pyroscope/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/PIRK3Qj4WiToHgB0QDDf6fMHZxDmEswjWJdTIfVJ8xY7UtSau5C0mosjALev5qbJMflIfrIWsC3bPjjxHRRWQNAiFZSCLbVlin-r1-ICV-lOnopbnpRj4BiMKJnTbslpdo-n3CS2zbQ=w1920-h1080" alt="">&lt;/p>
&lt;p>當網站上線後，流量增加或短暫功能故障，都會造成使用者體驗相當不好，而這時該怎麼快速找到效能的瓶頸呢？通常 CPU 衝到 100% 時，有時候也蠻難複製及找出關鍵問題點。本篇會介紹一套工具叫 &lt;a href="https://pyroscope.io/">pyroscope&lt;/a>，讓開發者可以快速找到效能瓶頸的程式碼。之前也寫了相關的效能瓶頸文章，可以參考看看『&lt;a href="https://blog.wu-boy.com/2020/06/golang-benchmark-pprof/">Go 語言用 pprof 找出程式碼效能瓶頸&lt;/a>』或『&lt;a href="https://blog.wu-boy.com/2020/11/improve-parser-performance-using-go-benchmark-tool/">善用 Go 語言效能測試工具來提升執行效率&lt;/a>』，上述兩篇都是針對 &lt;a href="https://golang.org">Go 語言&lt;/a>的效能分析文章，而 pyroscope 目前可以支援在 &lt;a href="https://www.python.org/">Python&lt;/a>, &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 或 &lt;a href="https://golang.org">Go&lt;/a> 的環境。底下筆者會針對 Go 環境做介紹。&lt;/p></description></item><item><title>兩台電腦透過 croc 工具來傳送檔案 (簡單, 加密, 快速)</title><link>https://blog.wu-boy.com/2021/02/share-files-between-two-computer-using-croc-tool/</link><pubDate>Tue, 16 Feb 2021 03:46:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/share-files-between-two-computer-using-croc-tool/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/VHlioiLpLfqBnh5PnGjYhU6l7dZ2V3PURxz5RfulFL74xYYr4kL5EgkOa-OfLQyIALLgmRIcKlLHnbIENFe0cyv82XQW5ia0HgeNwm4u2ijNsjSQQjkrY4JJjloB_pHTOT-EtxzxOlw=w1920-h1080" alt="croc">&lt;/p>
&lt;p>兩台電腦之間該如何傳送檔案，其實方法有超多種的，像是 FTP 或透過 SSH 方式來傳送檔案，但是這些方法步驟都有點複雜，FTP 需要架設 FTP 服務，SSH 要學習 SCP 指令，那有沒有更好的方式從單一電腦點對點傳送檔案到另一台呢？傳送過程需要快速又要安全，本篇介紹一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>寫的工具叫 &lt;a href="https://github.com/schollz/croc">croc&lt;/a>，詳細的介紹可以參考看看&lt;a href="https://schollz.com/blog/croc6/">作者的 Blog 介紹&lt;/a>，此工具有底下功能及優勢。&lt;/p></description></item><item><title>初探 Pulumi 上傳靜態網站到 AWS S3 (二)</title><link>https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/</link><pubDate>Thu, 11 Feb 2021 07:55:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" title="cover">&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>上一篇『&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/">初探 Pulumi 上傳靜態網站到 AWS S3 (一)&lt;/a>』主要介紹 Pulumi 基本使用方式，而本篇會延續上一篇教學把剩下的章節教完，底下是本篇會涵蓋的章節內容:&lt;/p>
&lt;ol>
&lt;li>設定 Pulumi Stack 環境變數&lt;/li>
&lt;li>建立第二個 Pulumi Stack 環境&lt;/li>
&lt;li>刪除 Pulumi Stack 環境&lt;/li>
&lt;/ol>
&lt;p>讓開發者可以自由新增各種不同環境，像是 Testing 或 Develop 環境，以及該如何動態帶入不同環境的變數內容，最後可以透過單一指令將全部資源刪除。&lt;/p></description></item><item><title>初探 Pulumi 上傳靜態網站到 AWS S3 (一)</title><link>https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/</link><pubDate>Thu, 11 Feb 2021 07:29:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" title="cover">&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>上一篇作者提到了兩套 &lt;a href="https://www.pulumi.com/docs/get-started/install/">Infrastructure as Code&lt;/a> 工具，分別是 &lt;a href="https://www.terraform.io/">Terraform&lt;/a> 跟 &lt;a href="https://www.pulumi.com/">Pulumi&lt;/a>，大家對於前者可能會是比較熟悉，那本篇用一個實際案例『建立 AWS S3 並上傳靜態網站』來跟大家分享如何從無開始一步一步使用 Pulumi。本教學使用的程式碼都可以在 &lt;a href="https://github.com/go-training/infrastructure-as-code-workshop/tree/main/pulumi/labs/lab01-modern-infrastructure-as-code">GitHub 上面瀏覽及下載&lt;/a>。教學會拆成七個章節:&lt;/p>
&lt;ol>
&lt;li>建立 Pulumi 新專案&lt;/li>
&lt;li>設定 AWS 環境&lt;/li>
&lt;li>初始化 Pulumi 架構 (建立 S3 Bucket)&lt;/li>
&lt;li>更新 AWS 架構 (S3 Hosting)&lt;/li>
&lt;li>設定 Pulumi Stack 環境變數 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;li>建立第二個 Pulumi Stack 環境 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;li>刪除 Pulumi Stack 環境 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;/ol></description></item><item><title>使用 GraphQL Gateway 串接多個 Data Schema</title><link>https://blog.wu-boy.com/2021/02/graphql-gateway-in-golang/</link><pubDate>Sat, 06 Feb 2021 01:12:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/graphql-gateway-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/eWR5fi9ipIuscey-E940I6fhwU5ZySehbItzPLyPVchJxBlq8N1uXT-psLHdX_wV6xojac3_EeCFZH6vs6C1R910vzDV1mY2uOo33so6QqpWgNqbDjGZPB6ar2NwspITQ7paTfjqSo8=w1920-h1080" title="infra">&lt;img src="https://lh3.googleusercontent.com/eWR5fi9ipIuscey-E940I6fhwU5ZySehbItzPLyPVchJxBlq8N1uXT-psLHdX_wV6xojac3_EeCFZH6vs6C1R910vzDV1mY2uOo33so6QqpWgNqbDjGZPB6ar2NwspITQ7paTfjqSo8=w1920-h1080" alt="infra" title="infra">&lt;/a>&lt;/p>
&lt;p>不久之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/">從 graphql-go 轉換到 gqlgen&lt;/a>』，目前團隊舊有的專案還是繼續用 &lt;a href="https://github.com/graphql-go/graphql">graphql-go&lt;/a> 來撰寫，不過之後需求量越來越大，維護 graphql-go 就越來越困難，故有在想怎麼把 &lt;a href="https://gqlgen.com/">gqlgen&lt;/a> 跟 graphql-go 相容在一起，那就是把這兩個套件想成不同的服務，再透過 Gateway 方式完成 &lt;a href="https://principledgraphql.com/integrity#1-one-graph">single data graph&lt;/a>。至於怎麼選擇 GraphQL Gateway 套件，最容易的方式就是使用 &lt;a href="https://www.apollographql.com/docs/federation/gateway/">@apollo/gateway&lt;/a>，但是由於個人比較偏好 &lt;a href="https://golang.org">Go 語言&lt;/a>的解決方案，就稍微找看看有無人用 Go 實現了 Gateway，後來找到 &lt;a href="https://github.com/nautilus/gateway">nautilus/gateway&lt;/a>，官方有&lt;a href="https://gateway.nautilus.dev/">提供文件&lt;/a>以及&lt;a href="https://medium.com/@aaivazis/a-guide-to-schema-federation-part-1-995b639ac035">教學 Blog&lt;/a> 可以供開發者參考。底下會教大家使用 nautilus/gateway 將兩個不同的服務串接在一起。&lt;/p></description></item><item><title>用 Go 語言撰寫簡單的 Command Line 工具</title><link>https://blog.wu-boy.com/2020/12/write-the-simple-cli-tool-in-golang/</link><pubDate>Sun, 27 Dec 2020 13:50:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/12/write-the-simple-cli-tool-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>之前介紹了一個開源工具『&lt;a href="https://blog.wu-boy.com/2020/12/docker-image-to-periodically-backup-your-database-mysql-postgres-or-mongodb-to-s3/">用 Docker 每天自動化備份 MySQL, Postgres 或 MongoDB 並上傳到 AWS S3&lt;/a>』，讓開發者可以快速透過 Docker 方式來備份資料庫，而本篇要介紹我如何用 Go 語言來撰寫 CLI 並且整合 Docker 來實現備份。此工具都是透過各大資料庫官方提供的 CLI 指令 (&lt;a href="https://docs.postgresql.tw/reference/client-applications/pg_dump">pg_dump&lt;/a>, &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html">mysqldump&lt;/a> &amp;hellip; 等)，故大家不用猜想是什麼神奇的技巧。底下來依序介紹整個目錄結構，及我如何實現。&lt;/p></description></item><item><title>Go 1.16 推出 Embedding Files</title><link>https://blog.wu-boy.com/2020/12/embedding-files-in-go-1-16/</link><pubDate>Sun, 27 Dec 2020 08:32:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/12/embedding-files-in-go-1-16/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org">Go 語言&lt;/a>官方維護團隊 rsc 之前在 &lt;a href="https://github.com/golang/go/issues/41191">GitHub Issue&lt;/a> 上面提出要在 go command line 直接支援 Embedding Files，沒想到過沒幾個月，就直接實現出來了，並且預計在 2021 的 &lt;a href="https://tip.golang.org/doc/go1.16">go 1.16&lt;/a> 版本直接支援 &lt;a href="https://tip.golang.org/pkg/embed/">embed 套件&lt;/a>。有了這個功能，就可以將靜態檔案或專案設定檔直接包起來，這樣部署就更方便了。底下來看看官方怎麼使用。&lt;/p></description></item><item><title>善用 Go 語言效能測試工具來提升執行效率</title><link>https://blog.wu-boy.com/2020/11/improve-parser-performance-using-go-benchmark-tool/</link><pubDate>Mon, 02 Nov 2020 08:46:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/11/improve-parser-performance-using-go-benchmark-tool/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>在 AI 訓練模型前，都需要經過大量的資料處理，而資料處理的速度在整個流程內扮演很重要的角色，寫出高效能的 Parser 能降低整體處理時間，那如何評估程式效能如何，以及如何快速找到效能瓶頸？本議程會帶大家了解 &lt;a href="https://golang.org">Go 語言&lt;/a>內建的效能測試工具，透過 &lt;a href="https://blog.wu-boy.com/2018/06/how-to-write-benchmark-in-go/">Benchmark&lt;/a> 來找出程式效能瓶頸的地方，快速改善及優化，讓整個系統流程更順暢。也會順道分享 Go 在字串處理優化的一些小技巧。聽過此議程相信您對 Go 語言會有更深入的了解，如果你想寫出有效率的程式碼，本議程一定不能錯過。&lt;/p></description></item><item><title>Go 語言 Select Multiple Channel 注意事項</title><link>https://blog.wu-boy.com/2020/10/select-multiple-channel-in-golang/</link><pubDate>Mon, 12 Oct 2020 07:44:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/10/select-multiple-channel-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信大家都知道 Select 可以用來處理多個 Channel，但是大家有沒有想過一個情境，如果是 for 搭配 select 時，肯定會用一個 Timer 或 context 來處理 Timeout 或手動 Cancel，假設如果跟其他 Channel 同時到達時，官方說法是 Select 會隨機選擇一個狀況來執行，如果並非選到我們所要的 case 那就會造成情境或流程上的錯誤，而本影片就是講解該如何解決此問題，請大家務必詳細了解業務的需求，來決定程式碼架構該如何寫。&lt;/p></description></item><item><title>用 Go 語言打造多台機器 Scale 架構</title><link>https://blog.wu-boy.com/2020/09/golang-scale-in-cloud-summit-taiwan/</link><pubDate>Thu, 10 Sep 2020 06:27:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/09/golang-scale-in-cloud-summit-taiwan/</guid><description>&lt;h2 id="演講投影片">演講投影片&lt;/h2>
&lt;p>底下是 2020 的 &lt;a href="https://cloudsummit.ithome.com.tw/">Cloud Summit&lt;/a> 演講投影片，歡迎大家參考看看&lt;/p>
&lt;script async class="speakerdeck-embed" data-id="cf53a56cdf324a57bd8ab6b1437c10ed" data-ratio="1.33333333333" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item><item><title>用 Go 語言實戰 Limit Concurrency 方法</title><link>https://blog.wu-boy.com/2020/09/limit-concurrency-in-golang/</link><pubDate>Sun, 06 Sep 2020 02:31:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/09/limit-concurrency-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>最近看到一篇文章討論的非常熱烈，就是『&lt;a href="https://utcc.utoronto.ca/~cks/space/blog/programming/GoConcurrencyStillNotEasy">concurrency is still not easy&lt;/a>』這篇文章甚至上了 &lt;a href="https://news.ycombinator.com/item?id=24359650">Hack News&lt;/a>，大家有興趣可以點進去看看，而本篇會用一個實際案例介紹為什麼作者會說寫 Concurrency 不是這麼容易。大家都知道在 &lt;a href="https://golang.org">Go 語言&lt;/a>內，要寫 Concurrency 只要透過一個關鍵字 &lt;code>go&lt;/code> 就可以輕易寫出，而多個 Goroutine 要溝通就是需要透過 Channel 方式，而網路上有一堆 Concurrency Pattern 提供給各位開發者，但是官方 Go 的標準庫內並沒有包含這些 Pattern，所以實作之後，說實在很難看出問題。文章內提到 &lt;a href="https://github.com/google/gops">gops&lt;/a> 實作 Limit Concurrency 遇到系統整個 hang 住的問題？什麼是 Limit Concurrency，就是當系統有多個工作需要同時執行，但是需要限制 Concurrency 數量，避免整個資源都被吃光。底下來介紹文章內遇到的問題。&lt;/p></description></item><item><title>在 Go 語言內管理 Concurrency 的三種方式</title><link>https://blog.wu-boy.com/2020/08/three-ways-to-manage-concurrency-in-go/</link><pubDate>Sun, 09 Aug 2020 07:58:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/08/three-ways-to-manage-concurrency-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信大家踏入 &lt;a href="https://golang.org/">Go 語言&lt;/a>的世界，肯定是被強大的 Concurrency 所吸引，Go 語言用最簡單的關鍵字 &lt;code>go&lt;/code> 就可以將任務丟到背景處理，但是怎麼有效率的控制 Concurrency，這是入門 Go 語言必學的項目，本篇會介紹三種方式來帶大家認識 Concurrency，而這三種方式分別對應到三個不同的名詞: &lt;a href="https://gobyexample.com/waitgroups">WaitGroup&lt;/a>, &lt;a href="https://tour.golang.org/concurrency/2">Channel&lt;/a>, 及 &lt;a href="https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/">Context&lt;/a>，底下用簡單的範例帶大家了解。&lt;/p></description></item><item><title>Go 1.15 新增 Module cache 環境變數</title><link>https://blog.wu-boy.com/2020/06/go-module-cache-variable-gomodcache/</link><pubDate>Sat, 13 Jun 2020 13:45:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/06/go-module-cache-variable-gomodcache/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信各位開發者在寫 &lt;a href="https://golang.org">Go 語言&lt;/a>專案，現在肯定都是使用 &lt;a href="https://blog.golang.org/using-go-modules">Go module&lt;/a> 了，而 Go Module 檔案預設寫在 &lt;code>/go/pkg/mod&lt;/code> 目錄內，要串 CI/CD 流程時，由於不在專案路徑底下，所以每一個 Container 無法共用 &lt;code>/go/pkg/mod&lt;/code> 路徑，造成重複下載第三方套件，其實跨容器的解決方式可以透過 &lt;a href="https://cloud.drone.io">Drone&lt;/a> 的 &lt;a href="https://docs.drone.io/pipeline/docker/syntax/volumes/temporary/">Temporary Volumes&lt;/a> 方式解決，但是最終希望跑完編譯流程時，可以將最後的 mod 目錄打包留到下次的 CI/CD 部署流程使用，這時候如果可以改變 &lt;code>/go/pkg/mod&lt;/code> 路徑，就可以動態調整目錄結構了。底下是針對 Drone 這套部署工具進行解說。&lt;/p></description></item><item><title>Go 語言用 pprof 找出程式碼效能瓶頸</title><link>https://blog.wu-boy.com/2020/06/golang-benchmark-pprof/</link><pubDate>Sun, 07 Jun 2020 05:11:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/06/golang-benchmark-pprof/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org">Go 語言&lt;/a>除了內建強大的測試工具 (&lt;a href="https://golang.org/pkg/testing/">go test&lt;/a>) 之外，也提供了效能評估的工具 (&lt;a href="https://blog.golang.org/pprof">go tool pprof&lt;/a>)，整個生態鏈非常完整，這也是我推薦大家使用 Go 語言的最大原因，這篇會介紹如何使用 pprof 來找出效能瓶頸的地方。假設開發者在寫任何邏輯功能時，發現跑出來的速度不是想像的這麼快，或者是在串接服務流程時，整個回覆時間特別久，這時候可以透過 benchmark 先找出原因。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go &lt;span style="color:#658b00">test&lt;/span> -bench=. -benchtime=3s ./lexer/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>用 10 分鐘了解 Go 語言 context package 使用場景及介紹</title><link>https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/</link><pubDate>Sun, 03 May 2020 02:45:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org/pkg/context/">context&lt;/a> 是在 &lt;a href="https://golang.org/">Go 語言&lt;/a> 1.7 版才正式被納入官方標準庫內，為什麼今天要介紹 context 使用方式呢？原因很簡單，在初學 Go 時，寫 API 時，常常不時就會看到在 http handler 的第一個參數就會是 &lt;code>ctx context.Context&lt;/code>，而這個 context 在這邊使用的目的及含義到底是什麼呢，本篇就是帶大家了解什麼是 context，以及使用的場景及方式，內容不會提到 context 的原始碼，而是用幾個實際例子來了解。&lt;/p></description></item><item><title>使用 Docker BuildKit 加速編譯 Image</title><link>https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/</link><pubDate>Sun, 26 Apr 2020 05:29:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/fr-DxVaFf3lryJs-FUfDOp-azBpG7_atca4zJGuipRMUshXX-ICZXB9PdrqevF8DHRwUhG8gVrfI8jSv5LjS0Yj4R-dovaucEyCZ8U6hz68iYYU30RTFqdjO-u8ozGaPmPsyD5Ax-4c=w1920-h1080" title="docker buildkit">&lt;img src="https://lh3.googleusercontent.com/fr-DxVaFf3lryJs-FUfDOp-azBpG7_atca4zJGuipRMUshXX-ICZXB9PdrqevF8DHRwUhG8gVrfI8jSv5LjS0Yj4R-dovaucEyCZ8U6hz68iYYU30RTFqdjO-u8ozGaPmPsyD5Ax-4c=w1920-h1080" alt="docker buildkit" title="docker buildkit">&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/go-training/docker-buildkit-demo">程式碼範例請看這邊&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>之前就有看到 &lt;a href="https://docker.com">Docker&lt;/a> 推出 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">BuildKit&lt;/a> 功能，這次跟大家介紹什麼是 BuildKit。現在部署編譯流程肯定都會用到 Docker，不管測試及部署都盡量在 Docker 內實現，來做到環境隔離，但是要怎麼縮短 Docker 在編譯 Image 時間，這又是另外的議題，本篇跟大家介紹一個實驗性的功能就是 &lt;a href="https://docs.docker.com/develop/develop-images/build_enhancements/">BuildKit&lt;/a>，原始碼可以&lt;a href="https://github.com/moby/buildkit">參考這邊&lt;/a>，希望未來這實驗性的功能可以正式納入 Docker 官方，網路上其實可以找到很多方式來做 Docker Layer 的 Cache，我個人最常用的就是 &lt;code>--cache-from&lt;/code> 機制，可以適用在任何 CI/CD 流程，詳細說明可以參考這篇『&lt;a href="https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/">在 docker-in-docker 環境中使用 cache-from 提升編譯速度&lt;/a>』，下面使用到的程式碼都可以直接參考&lt;a href="https://github.com/go-training/docker-buildkit-demo">此 Repository&lt;/a>，我還是使用 &lt;a href="https://golang.org">Go 語言&lt;/a>當作參考範例。&lt;/p></description></item><item><title>[Go 語言] 從 graphql-go 轉換到 gqlgen</title><link>https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/</link><pubDate>Thu, 16 Apr 2020 07:05:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信各位開發者對於 &lt;a href="https://graphql.org/">GraphQL&lt;/a> 帶來的好處已經非常清楚，如果對 GraphQL 很陌生的朋友們，可以直接參考之前作者寫的一篇『&lt;a href="https://blog.wu-boy.com/2018/07/graphql-in-go/">Go 語言實戰 GraphQL&lt;/a>』，內容會講到用 &lt;a href="https://golang.org">Go 語言&lt;/a>實戰 GraphQL 架構，教開發者如何撰寫 GraphQL 測試及一些開發小技巧，不過內容都是以 &lt;a href="https://github.com/graphql-go/graphql">graphql-go&lt;/a> 框架為主。而本篇主題會講為什麼我從 &lt;a href="https://github.com/graphql-go/graphql">graphql-go&lt;/a> 框架轉換到 &lt;a href="https://gqlgen.com/">gqlgen&lt;/a>。&lt;/p></description></item><item><title>停止 Go 服務前先處理完 Worker 內的 Job</title><link>https://blog.wu-boy.com/2020/03/shutdown-the-service-after-job-completely/</link><pubDate>Sat, 28 Mar 2020 05:40:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/shutdown-the-service-after-job-completely/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>在閱讀本文章之前，作者有寫過一篇『&lt;a href="https://blog.wu-boy.com/2020/02/graceful-shutdown-with-multiple-workers/">graceful shutdown with multiple workers&lt;/a>』介紹了在服務停止前做一些正確的 Shutdown 流程，像是處理 Http Handler 或關閉資料庫連線等等，假設有服務內有實作 Worker 處裡多個 Job，那該如何等到全部的 Job 都執行完畢才正確關閉且刪除服務 (使用 &lt;a href="https://docker.com">Docker&lt;/a>) 呢？底下是整個運作流程:&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/bsmMhN5bVzpyDy-741CsS8s_wTyPfRpbLeZvJ0u7hOmCkXhBmS0qmVwkky4zveLxtNqQgGTUufWeNi2OVvOyXwx6QrADvt5n_6tAJlSzmRJK27U9C1EgOhzziZmLqNp_FTyqf4NAits=w1920-h1080" alt="">&lt;/p></description></item><item><title>Go Modules 處理私有 GIT Repository 流程</title><link>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</link><pubDate>Wed, 04 Mar 2020 14:41:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/03/read-private-module-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/_swpUXXC6aFQLaC3ooXMAgebOkHkgCl7M3RVH6Yrs2vDF-4T_dlUhHUz3MMmdtsV5H_vi6r5-fu_fpSI0RFtmYtmwVIK_zzRIO_YhrmIa3-PATRnyUtfVPtU4J7sxhkF_aQzXjGDdbU=w1920-h1080" alt="golang">&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Golang&lt;/a> 在 &lt;a href="https://golang.org/doc/go1.14#introduction">1.14&lt;/a> 正式說明可以將 &lt;a href="https://github.com/golang/go/wiki/Modules">Go Modules&lt;/a> 用在正式環境上了，還沒換上 Go Modules 的團隊，現在可以開始轉換了，轉換方式也相當容易啦，只要在原本的專案底下執行底下指令，就可以無痛轉移&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go mod init project_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假設專案內有用到私有 Git Repository 該怎麼解決了？現在 go mod 會預設走 &lt;code>proxy.golang.org&lt;/code> 去抓取最新的資料，但是要抓私有的，就需要透過其他方式:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go env -w &lt;span style="color:#00688b">GOPRIVATE&lt;/span>=github.com/appleboy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代表告訴 go 指令，只要遇到 &lt;code>github.com/appleboy&lt;/code> 就直接讀取，不需要走 Proxy 流程。拿 GitHub 當作範例，在本機端開發該如何使用？首先要先去申請 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>，接著設定 Git&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-2-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global url.&lt;span style="color:#cd5555">&amp;#34;https://&lt;/span>&lt;span style="color:#00688b">$USERNAME&lt;/span>&lt;span style="color:#cd5555">:&lt;/span>&lt;span style="color:#00688b">$ACCESS_TOKEN&lt;/span>&lt;span style="color:#cd5555">@github.com&amp;#34;&lt;/span>.insteadOf &lt;span style="color:#cd5555">&amp;#34;https://github.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 Username 就是 GitHub 帳號，Access token 就是上面的 &lt;a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Personal Access Token&lt;/a>。&lt;/p></description></item><item><title>[Go 教學] graceful shutdown 搭配 docker-compose 實現 rolling update</title><link>https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/</link><pubDate>Sat, 08 Feb 2020 14:50:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/graceful-shutdown-using-docker-compose-with-rolling-update/</guid><description>&lt;blockquote>
&lt;p>線上課程:『&lt;a href="https://www.udemy.com/course/golang-fight/?couponCode=202002" title="Docker 容器實用實戰">Go 語言實戰&lt;/a>』目前特價 &lt;strong>$2100 TWD&lt;/strong>，優惠代碼『&lt;strong>202003&lt;/strong>』，也可以直接匯款（價格再減 &lt;strong>100&lt;/strong>），如果想搭配另外兩門課程合購可以透過 &lt;a href="http://facebook.com/appleboy46">FB 聯絡我&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>上一篇作者有提到『&lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">什麼是 graceful shutdown?&lt;/a>』，本篇透過 docker-compose 方式來驗證 &lt;a href="https://golang.org">Go 語言&lt;/a>的 graceful shutdown 是否可以正常運作。除了驗證之外，單機版 &lt;a href="https://docker.com">Docker&lt;/a> 本身就可以設定 scale 容器數量，那這時候又該如何搭配 graceful shutdown 來實現 rolling update 呢？相信大家對於 rolling update 並不陌生，現在的 &lt;a href="https://kubernetes.io/">kubernetes&lt;/a> 已經有實現這個功能，用簡單的指令就可以達到此需求，但是對於沒有在用 k8s 架構的開發者，可能網站也不大，那該如何透過單機本的 docker 來實現呢？底下先來看看為什麼會出現這樣的需求。&lt;/p></description></item><item><title>[Go 教學] 什麼是 graceful shutdown?</title><link>https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/</link><pubDate>Sat, 08 Feb 2020 03:29:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>我們該如何升級 Web 服務，你會說很簡單啊，只要關閉服務，上程式碼，再開啟服務即可，可是很多時候開發者可能沒有想到現在服務上面是否有正在處理的資料，像是購物車交易？也或者是說背景有正在處理重要的事情，如果強制關閉服務，就會造成下次啟動時會有一些資料上的差異，那該如何優雅地關閉服務，這就是本篇的重點了。底下先透過簡單的 gin http 服務範例介紹簡單的 web 服務&lt;/p></description></item><item><title>[Go 教學] graceful shutdown with multiple workers</title><link>https://blog.wu-boy.com/2020/02/graceful-shutdown-with-multiple-workers/</link><pubDate>Sun, 02 Feb 2020 14:53:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/graceful-shutdown-with-multiple-workers/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>在閱讀本文章之前請先預習『&lt;a href="https://blog.wu-boy.com/2019/11/implement-job-queue-using-buffer-channel-in-golang/">用 Go 語言 buffered channel 實作 Job Queue&lt;/a>』，本篇會針對&lt;a href="https://www.slideshare.net/appleboy/job-queue-in-golang-184064840">投影片&lt;/a> p.26 到 p.56 做詳細的介紹，教大家如何從無到有寫一個簡單的 multiple worker，以及如何處理 graceful shutdown with workers，為什麼要處理 graceful shutdown? 原因是中途手動執行 ctrl + c 或者是部署新版程式都會遇到該如何確保 job 執行完成後才結束 main 函式。&lt;/p></description></item><item><title>使用 Go Channel 及 Goroutine 時機</title><link>https://blog.wu-boy.com/2020/01/when-to-use-go-channel-and-goroutine/</link><pubDate>Sat, 18 Jan 2020 06:11:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/01/when-to-use-go-channel-and-goroutine/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信不少開發者肯定聽過 Go 語言之所以讓人非常喜歡，就是因為 Go concurrency，如果您對於 concurrency 不了解的朋友們，可以直接參考&lt;a href="https://tour.golang.org/concurrency/1">官網的範例&lt;/a>開始了解，範例會帶您一步一步了解什麼是 Channel 什麼是 Go concurrency？本篇會介紹 Channel 使用時機，在大部分寫 application 時，老實說很少用到 Channel，所以很多人其實不知道該在哪種場景需要使用 Channel，底下這句名言大家肯定聽過:&lt;/p>
&lt;blockquote>
&lt;p>Do not communicate by sharing memory; instead, share memory by communicating.&lt;/p>
&lt;/blockquote>
&lt;p>本篇會用簡單的例子來帶大家理解上述名言。&lt;/p></description></item><item><title>用 GitHub Actions 部署 Go 語言服務</title><link>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</link><pubDate>Sat, 14 Dec 2019 11:44:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/NI2lnMOEhkrZJ-x_bmre_RoQxLnzYcpPXVB_p6eBMmPQ73yDgoftVmUHvk0P86Tt2MM_Q23IHNu7qq7j99RXzTEzG95BU1u1vdpell9krVGHlUmW3Ng7J7egj1LHugWHcHoezCty9o0=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 也推出一陣子了，相信有不少雷，也是有很多優勢，未來在 GitHub 上面串接任何開源專案，都可以免費使用，過幾年可以看看 GitHub Actions 對 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 的影響是多少？本篇要來介紹如何透過 GitHub Actions 來部署 &lt;a href="https://golang.org">Go 語言&lt;/a>服務，會用一個簡單 httpd 範例教大家如何透過 &lt;a href="https://docker.com">Docker&lt;/a> 方式來更新。使用 Go 語言基本服務流程大致上會是『測試 -&amp;gt; 編譯 -&amp;gt; 上傳 -&amp;gt; 啟動』，透過這四個步驟來學習 GitHub Actions 該如何設定。&lt;/p>
&lt;ul>
&lt;li>測試: Unit Testing 多一層保護&lt;/li>
&lt;li>編譯: 透過 go build 編譯出 Binary 檔案&lt;/li>
&lt;li>上傳: 寫 Dockerfile 將 Binary 包進容器內&lt;/li>
&lt;li>啟動: 透過 docker-compose 方式來更新服務&lt;/li>
&lt;/ul></description></item><item><title>Go 語言使用 Select 四大用法</title><link>https://blog.wu-boy.com/2019/11/four-tips-with-select-in-golang/</link><pubDate>Sat, 23 Nov 2019 01:36:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/11/four-tips-with-select-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/CXyuE0Z1x4_dEciwiP9HRfXD2kHiola3SI-dAsU_HciuBxb3nA_NyZewO70gGlvA59eLapIRAEO0TZbAAx_z85Uqp-OGWx06-3lZ3HilrhnXvbr3nsilF1TcYIhSOtud_G7-wldkZNo=w1920-h1080" title="photo">&lt;img src="https://lh3.googleusercontent.com/CXyuE0Z1x4_dEciwiP9HRfXD2kHiola3SI-dAsU_HciuBxb3nA_NyZewO70gGlvA59eLapIRAEO0TZbAAx_z85Uqp-OGWx06-3lZ3HilrhnXvbr3nsilF1TcYIhSOtud_G7-wldkZNo=w1920-h1080" alt="photo" title="photo">&lt;/a>&lt;/p>
&lt;p>本篇教學要帶大家認識 &lt;a href="https://golang.org">Go 語言&lt;/a>的 &lt;a href="https://tour.golang.org/concurrency/5">Select&lt;/a> 用法，相信大家對於 switch 並不陌生，但是 &lt;code>select&lt;/code> 跟 &lt;code>switch&lt;/code> 有個共同特性就是都過 case 的方式來處理，但是 select 跟 switch 處理的事情完全不同，也完全不相容。來看看 switch 有什麼特性: 各種類型及型別操作，接口 &lt;code>interface{}&lt;/code> 型別判斷 &lt;code>variable.(type)&lt;/code>，重點是會依照 case &lt;strong>順序依序執行&lt;/strong>。底下看個例子:&lt;/p></description></item><item><title>初探 Go 語言 Project Layout (新人必看)</title><link>https://blog.wu-boy.com/2019/11/how-to-define-the-golang-folder-layout/</link><pubDate>Fri, 15 Nov 2019 23:30:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/11/how-to-define-the-golang-folder-layout/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pKaq_CvDy37QrubxGcYfXpOoORzOO0t1zJ0eSDpiyNzl0IlrbXeY3zNRGmBVUkK6QdjcfE514j2MxeNdVQRfl8S9wfdEmbeK54414LFUVZLSob62AVimIlmbI7qiQhH_mPjqNDZoL18=w1920-h1080" title="cover photo">&lt;img src="https://lh3.googleusercontent.com/pKaq_CvDy37QrubxGcYfXpOoORzOO0t1zJ0eSDpiyNzl0IlrbXeY3zNRGmBVUkK6QdjcfE514j2MxeNdVQRfl8S9wfdEmbeK54414LFUVZLSob62AVimIlmbI7qiQhH_mPjqNDZoL18=w1920-h1080" alt="cover photo" title="cover photo">&lt;/a>&lt;/p>
&lt;p>很多人初次進入 Go 語言，肯定都會尋找在 Go 裡面是否有一套標準且最多人使用的 Framework 來學習，但是在 Go 語言就是沒有這樣的標準，所有的開源專案架構目錄都是由各團隊自行設計，沒有誰對誰錯，也沒任何一個是最標準的。那你一定會問，怎樣才是最好的呢？很簡單，如果可以定義出一套結構是讓團隊所有成員可以一目瞭然的目錄結構，知道發生問題要去哪個地方找，要加入新的功能，就有相對應的目錄可以存放，那這個專案就是最好的。當然這沒有標準答案，只是讓團隊有個共識，未來有新人進入專案，可以讓他在最短時間內吸收整個專案架構。&lt;/p></description></item><item><title>用 Go 語言 buffered channel 實作 Job Queue</title><link>https://blog.wu-boy.com/2019/11/implement-job-queue-using-buffer-channel-in-golang/</link><pubDate>Sat, 02 Nov 2019 14:53:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/11/implement-job-queue-using-buffer-channel-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/7QKuBYqzmOWPCbAnS6EMG2ypPSeUYU7VEl9sF66zv9cIUCWwErs4CF1qNkWcwKdM7TmR-ygyqWkBvGhPnPQemG1bJl6bxj6ZcNNcS_uecl2xXFXp9qRFJyCqUzYnCfneOPgRPrInO8U=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/7QKuBYqzmOWPCbAnS6EMG2ypPSeUYU7VEl9sF66zv9cIUCWwErs4CF1qNkWcwKdM7TmR-ygyqWkBvGhPnPQemG1bJl6bxj6ZcNNcS_uecl2xXFXp9qRFJyCqUzYnCfneOPgRPrInO8U=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>上個月在高雄 mopcon 講了一場『&lt;a href="https://www.slideshare.net/appleboy/job-queue-in-golang-184064840">Job Queue in Golang&lt;/a>』，裡面提到蠻多技術細節，但是要在一場 40 分鐘的演講把大家教會，或者是第一次聽到 &lt;a href="https://golang.org">Go 語言&lt;/a>的，可能都很難在 40 分鐘內吸收完畢，所以我打算分好幾篇部落格來分享細部的實作，本篇會講解投影片第 19 ~ 25 頁，透過本篇你可以清楚學到什麼是 &lt;a href="https://tour.golang.org/concurrency/3">buffered channel&lt;/a>，以及實作的注意事項。&lt;/p></description></item><item><title>用 Go 語言實作 Job Queue 機制</title><link>https://blog.wu-boy.com/2019/10/job-queue-in-golang/</link><pubDate>Sat, 19 Oct 2019 13:54:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/job-queue-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>很高興可以在 &lt;a href="https://mopcon.org/2019/">Mopcon&lt;/a> 分享『用 &lt;a href="https://golang.org">Go 語言&lt;/a>實現 Job Queue 機制』，透過簡單的 &lt;a href="https://tour.golang.org/concurrency/1">goroutine&lt;/a> 跟 &lt;a href="https://tour.golang.org/concurrency/2">channel&lt;/a> 就可以實現簡單 Queue 機制，並且限制同時可以執行多少個 Job，才不會讓系統超載。最後透過編譯放進 Docker 容器內，就可以跑在各種環境上，加速客戶安裝及部署。&lt;/p></description></item><item><title>Go 語言目錄結構與實踐</title><link>https://blog.wu-boy.com/2019/08/golang-project-layout-and-practice/</link><pubDate>Sat, 31 Aug 2019 10:53:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/golang-project-layout-and-practice/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>很高興今年錄取 &lt;a href="https://modernweb.tw/">Modernweb&lt;/a> 講師，又有機會去宣傳 &lt;a href="https://golang.org">Go 語言&lt;/a>，這次的議程最主要跟大家介紹 Go 專案的目錄該如何設計，一個基本的專案該需要有哪些功能，以及如何實現。大家剛入門 Go 時，肯定會開始找是否有一套 Web Framework 可以參考實踐，可惜的是，在 Go 語言沒有定義任何的目錄結構，所有的結構都可以根據團隊的狀況而有所改變，而這邊我想強調的是如果能讓團隊看到結構後，一目瞭然知道什麼功能該放哪個目錄，或什麼目錄內大概有什麼功能，那其實就夠了。看了許多開源專案，每個設計方式都是不同，但是當你要找什麼功能時，其實從根目錄就可以很清楚的知道要進入哪個地方可以找到您想要的功能及程式碼。這次在 Moderweb 上面的議題，就是分享我在開源專案所使用的目錄結構，以及結構內都放哪些必要的功能。&lt;/p></description></item><item><title>Minio 從 Docker 容器移除 healthcheck 腳本</title><link>https://blog.wu-boy.com/2019/08/minio-remove-healthcheck-script-for-docker-image/</link><pubDate>Sun, 18 Aug 2019 05:20:45 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/minio-remove-healthcheck-script-for-docker-image/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/3lAv9HlhI9mxCfow0jHY5-G6H-tvXJLCv3S2QvzKReV_R-61oywRIXW6sruwPrS69CXpMAuIrccgVH8HY5hIzDGvenyhFhKcGmBk0CmU1c36k6NrjSvYESSmAEAejlxmxdW_gduXZio=w1920-h1080" title="minio golang">&lt;img src="https://lh3.googleusercontent.com/3lAv9HlhI9mxCfow0jHY5-G6H-tvXJLCv3S2QvzKReV_R-61oywRIXW6sruwPrS69CXpMAuIrccgVH8HY5hIzDGvenyhFhKcGmBk0CmU1c36k6NrjSvYESSmAEAejlxmxdW_gduXZio=w1920-h1080" alt="minio golang" title="minio golang">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://min.io/">Minio&lt;/a> 是一套開源專案的 Object 儲存容器，如果你有使用 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a>，相信要找一套代替 S3 的替代品，一定會想到這套用 &lt;a href="https://golang.org">Go 語言&lt;/a>開發的 Minio 專案。讓您在公司內部也可以享有 S3 的儲存容器，不需要變動任何程式碼就可以無痛從 AWS S3 搬到公司內部。剛好最近在整合 Traefik 搭配 Minio，由於 Minio 原先已經內建 healthcheck 腳本，所以當運行 Minio 時，使用 &lt;code>docker ps&lt;/code> 正常來說可以看到類似 &lt;code>Up 7 weeks (healthy)&lt;/code> 字眼，但是 Minio 運行了三分鐘之後，狀態就會從 &lt;code>healthy&lt;/code> 變成 &lt;code>unhealthy&lt;/code>，造成 Traefik 會自動移除 frontend 的對應設定，這樣 Web 就無法顯示了。我在 Udemy 上面有介紹如&lt;a href="https://www.udemy.com/course/golang-fight/learn/lecture/9962004#overview">何用 Golang 寫 healthcheck&lt;/a>，大家有興趣可以參考看看，coupon code 可以輸入 &lt;strong>GOLANG2019&lt;/strong> 。&lt;/p></description></item><item><title>架設 Go Proxy 服務加速 go module 下載速度</title><link>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</link><pubDate>Wed, 10 Jul 2019 22:54:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/07/speed-up-go-module-download-using-go-proxy-athens/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org">Go 語言&lt;/a>在 1.11 推出 go module 來統一市面上不同管理 Go 套件的工具，像是 &lt;a href="https://github.com/golang/dep">dep&lt;/a> 或 govendor 等，還不知道如何使用 go module，可以參考之前寫的一篇文章『&lt;a href="https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/">Go Module 導入到專案內且搭配 Travis CI 或 Drone 工具&lt;/a>』，在團隊內如果每個人在開發專案時，都透過網路去下載專案使用到的套件，這樣 10 個人就會浪費 10 個人的下載時間，並且佔用公司網路頻寬，所以我建議在公司內部架設一台 Go Proxy 服務，減少團隊在初始化專案所需要的時間，也可以減少在跑 CI/CD 流程時，所需要花費的時間，測試過公司 CI/CD 流程，有架設 Go Proxy，一般來說可以省下 1 ~ 2 分鐘時間，根據專案使用到的相依性套件用量來決定花費時間。本篇來介紹如何架設 &lt;a href="https://github.com/gomods/athens">ATHENS&lt;/a> 這套開源 Go Proxy 專案。&lt;/p></description></item><item><title>Go Module 如何發佈 v2 以上版本</title><link>https://blog.wu-boy.com/2019/06/how-to-release-the-v2-or-higher-version-in-go-module/</link><pubDate>Fri, 07 Jun 2019 02:54:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/06/how-to-release-the-v2-or-higher-version-in-go-module/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/golang/go/wiki/Modules#semantic-import-versioning">Go Module&lt;/a> 是 &lt;a href="https://golang.org">Golang&lt;/a> 推出的一套件管理系統，在 Go 1.11 推出後，許多 Package 也都陸續支援 Go Module 取代舊有的套件管理系統，像是 govendor 或 dep 等，而再過不久之後，保留 vendor 的方式也會被移除，畢竟現在開發已經不需要在 &lt;code>GOPATH&lt;/code> 目錄底下了。對於 Go Module 不熟的話，建議先看官方今年寫的一篇&lt;a href="https://blog.golang.org/using-go-modules">教學部落格&lt;/a>，底下是教學會涵蓋的範圍&lt;/p>
&lt;ul>
&lt;li>Creating a new module.&lt;/li>
&lt;li>Adding a dependency.&lt;/li>
&lt;li>Upgrading dependencies.&lt;/li>
&lt;li>Adding a dependency on a new major version.&lt;/li>
&lt;li>Upgrading a dependency to a new major version.&lt;/li>
&lt;li>Removing unused dependencies.&lt;/li>
&lt;/ul>
&lt;p>而本篇最主要會跟大家探討如何發佈 v2 以上的套件版本。&lt;/p></description></item><item><title>15 分鐘學習 Go 語言如何處理多個 Channel 通道</title><link>https://blog.wu-boy.com/2019/05/handle-multiple-channel-in-15-minutes/</link><pubDate>Mon, 13 May 2019 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/05/handle-multiple-channel-in-15-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>大家在初學 &lt;a href="https://golang.org">Go 語言&lt;/a>時，肯定很少用到 Go Channel，也不太確定使用的時機點，其實在官方 Blog 有提供一篇不錯的文章『&lt;a href="https://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation&lt;/a>』，相信大家剛跨入學習新語言時，不會馬上看 Go Channel，底下我來用一個簡單的例子來說明如何使用 Go Channel，使用情境非常簡單，就是假設今天要同時處理 20 個背景工作，一定想到要使用 &lt;a href="https://tour.golang.org/concurrency/1">Goroutines&lt;/a>，但是又想要收到這 20 個 JOB 處理的結果，並顯示在畫面上，如果其中一個 Job 失敗，就跳出 main 函式，當然又會希望這 20 個 JOB 預期在一分鐘內執行結束，如果超過一分鐘，也是一樣跳出 main 函式。針對這個問題，我們可以整理需要三個 Channel + 一個 Timeout 機制。&lt;/p>
&lt;ul>
&lt;li>使用 outChan 顯示各個 JOB 完成狀況&lt;/li>
&lt;li>使用 errChan 顯示 JOB 發生錯誤並且跳出 main 主程式&lt;/li>
&lt;li>使用 finishChan 通知全部 JOB 已經完成&lt;/li>
&lt;li>設定 Timeout 機制 (1 秒之內要完成所有 job)&lt;/li>
&lt;/ul>
&lt;p>在看此文章之前，也許可以先理解什麼是『&lt;a href="https://blog.wu-boy.com/2019/04/understand-unbuffered-vs-buffered-channel-in-five-minutes/">buffer vs unbuffer channel&lt;/a>』。&lt;/p></description></item><item><title>[Go 語言教學影片] 在 struct 內的 pointers 跟 values 差異</title><link>https://blog.wu-boy.com/2019/05/what-is-different-between-pointer-and-value-in-golang/</link><pubDate>Mon, 06 May 2019 07:29:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/05/what-is-different-between-pointer-and-value-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gobyexample.com/methods">Struct Method&lt;/a> 在 &lt;a href="https://golang.org">Go 語言&lt;/a>開發上是一個很重大的功能，而新手在接觸這塊時，通常會搞混為什麼會在 function 內的 struct name 前面多一個 &lt;code>*&lt;/code> pointer 符號，而有時候又沒有看到呢？以及如何用 struct method 實現 Chain 的實作，本影片會實際用寄信當作範例講解什麼時候該用 &lt;code>pointer&lt;/code> 什麼時候該用用 &lt;code>Value&lt;/code>。也可以參考我之前的一篇文章『&lt;a href="https://blog.wu-boy.com/2017/05/go-struct-method-pointer-or-value/">Go 語言內 struct methods 該使用 pointer 或 value 傳值?&lt;/a>』&lt;/p></description></item><item><title>在 appveyor 內指定 Go 語言編譯版本</title><link>https://blog.wu-boy.com/2019/04/install-specific-go-version-in-appveyor/</link><pubDate>Sun, 14 Apr 2019 08:45:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/04/install-specific-go-version-in-appveyor/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>相信比較少人知道 &lt;a href="https://www.appveyor.com/">appveyor&lt;/a> 這服務，我會接觸到此服務最大的原因是，要提供 &lt;a href="https://www.microsoft.com">Windows&lt;/a> 的 Docker Image，並且上傳到 &lt;a href="https://hub.docker.com/">DockrHub&lt;/a>，此服務提供了 Windows 環境，讓開發者可以透過此服務編譯 Windows 的 Binary 檔案，並且在 Windows 上執行測試，這對於我在寫 &lt;a href="https://golang.org">Go 語言&lt;/a>開源專案非常有幫助，畢竟平常開發真的沒有 Windows 相關的環境可以使用。但是 appveyor 在更新&lt;a href="https://www.appveyor.com/docs/windows-images-software/#golang">第三方套件&lt;/a>非常的慢，這時候我們想要用 GO 的 1.12 版本就需要自行來安裝，安裝方式其實也不難，請參考底下設定。&lt;/p></description></item><item><title>用 Go 語言讀取專案內 .env 環境變數</title><link>https://blog.wu-boy.com/2019/04/how-to-load-env-file-in-go/</link><pubDate>Thu, 11 Apr 2019 08:38:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/04/how-to-load-env-file-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>在現代開發專案時，一定會用到環境變數，像是讀取 AWS Secret Key 等等，在部署上面也會透過設定變數讓專案依據不同環境讀取不同環境變數，而 &lt;a href="https://golang.org">Go 語言&lt;/a>內如何實現讀取環境變數，又可以讓開發者透過 .env 檔案動態改變環境變數，本影片用簡單的套件來實現。這個在其他語言的 Framework 都有實現，像是 &lt;a href="https://laravel.com/docs/5.8/configuration">Laravel 的 .env 設定&lt;/a>。透過本篇例子也教大家如何 import Go 語言的 Package。&lt;/p></description></item><item><title>用五分鐘了解什麼是 unbuffered vs buffered channel</title><link>https://blog.wu-boy.com/2019/04/understand-unbuffered-vs-buffered-channel-in-five-minutes/</link><pubDate>Thu, 04 Apr 2019 01:05:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/04/understand-unbuffered-vs-buffered-channel-in-five-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>本篇要跟大家聊聊在 &lt;a href="https://golang.org" title="Go 語言">Go 語言&lt;/a>內什麼是『unbuffered vs buffered channel』，在初學 Go 語言時，最大的挑戰就是了解 Channel 的使用時機及差異，而 Channel 又分為兩種，一種是 buffered channel，另一種是 unbuffered channel，底下我來用幾個簡單的例子帶大家了解這兩種 channel 的差異，讓初學者可以很快的了解 channel 使用方式。&lt;/p></description></item><item><title>快速部署網站到 Heroku 雲平台</title><link>https://blog.wu-boy.com/2019/02/deploy-golang-app-to-heroku/</link><pubDate>Mon, 18 Feb 2019 02:56:19 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/02/deploy-golang-app-to-heroku/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jx4kYMmehnuyhVbEhvZKNEQwjCAgcTg2JIQamusY9-SuIbEEvJl2zXLJidfq-m9Oy1PQrROA9GQxdjjSiRVsvAGIj3tikwT0ZNB9XhciyCwjE60XE_jDJIqqEMmaKqwDzCMirK0u7Hw=w1920-h1080" title="部署網站到 Heroku 平台">&lt;img src="https://lh3.googleusercontent.com/jx4kYMmehnuyhVbEhvZKNEQwjCAgcTg2JIQamusY9-SuIbEEvJl2zXLJidfq-m9Oy1PQrROA9GQxdjjSiRVsvAGIj3tikwT0ZNB9XhciyCwjE60XE_jDJIqqEMmaKqwDzCMirK0u7Hw=w1920-h1080" alt="部署網站到 Heroku 平台" title="部署網站到 Heroku 平台">&lt;/a>&lt;/p>
&lt;p>大家在寫開源專案時，一定需要一個免費的雲空間來放置網站，方便其他開發者在 &lt;a href="https://github.com" title="GitHub">GitHub&lt;/a> 看到時，可以先點選 Demo 網站來試用，也許開發者可以使用 GitHub 提供的免&lt;a href="https://pages.github.com/" title="費靜態網站">費靜態網站&lt;/a>，但是如果是跑 &lt;a href="https://golang.org" title="Golang">Golang&lt;/a> 或是其他語言 &lt;a href="https://nodejs.org/" title="Node.js">Node.js&lt;/a> 就不支援了，本篇來介紹 &lt;a href="https://www.heroku.com/" title="Ｈeroku 雲平台">Heroku 雲平台&lt;/a>，它提供了開發者免費的方案，您可以將 GitHub 儲存庫跟 Heroku 結合，快速的將程式碼部署上去，Heroku 會給開發者一個固定的 URL (含有 HTTPS 憑證)，也可以動態的用自己買的網域。最重要的是 Heroku 提供了兩種更新方式，第一為 Git，只要開發者將程式碼 Push 到 Heroku 儲存庫，Heroku 就可以自動判斷開發者上傳的語言，並進行相對應的部署，另一種方式為 &lt;a href="https://www.docker.com/" title="Docker">Docker&lt;/a> 部署，只要在儲存庫內放上 Dockerfile，透過 &lt;a href="https://devcenter.heroku.com/articles/heroku-cli" title="Heroku CLI">Heroku CLI&lt;/a> 指令就可以將 Docker 容器上傳到 &lt;a href="https://devcenter.heroku.com/articles/container-registry-and-runtime" title="Heroku Docker Registry">Heroku Docker Registry&lt;/a>，並且自動部署網站。底下我們來透過簡單的 Go 語言專案: &lt;a href="https://github.com/go-training/facebook-account-kit" title="Facebook Account Kit">Facebook Account Kit&lt;/a> 來說明如何快速部署到 Heroku。&lt;/p></description></item><item><title>Traefik 搭配 Docker 自動更新 Let’s Encrypt 憑證</title><link>https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/</link><pubDate>Sun, 20 Jan 2019 10:54:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/traefik-docker-and-lets-encrypt/</guid><description>&lt;p>&lt;strong>2019.10.23 本篇教學以 Traefik 1.7 版本為主&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/sggr23jjw2BJb3HMIpM9RtSTetm8TeEuk1CCbV6658ZZO5CCwEPK2YdGpOYPFrw4fansfS-aMNE5h-uv-8s7quNiuj4EU-UF0DBaNbKZt3YyNruAICq6JxUss9S5IPAC7TQfQlHbL2M=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/sggr23jjw2BJb3HMIpM9RtSTetm8TeEuk1CCbV6658ZZO5CCwEPK2YdGpOYPFrw4fansfS-aMNE5h-uv-8s7quNiuj4EU-UF0DBaNbKZt3YyNruAICq6JxUss9S5IPAC7TQfQlHbL2M=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過蠻多篇 &lt;a href="https://blog.wu-boy.com/?s=+Let%27s+Encrypt" title="Let's Encrypt 的使用教學">Let&amp;rsquo;s Encrypt 的使用教學&lt;/a>，但是這次要跟大家介紹一套非常好用的工具 &lt;a href="https://traefik.io/" title="Traefik">Traefik&lt;/a> 搭配自動化更新 Let&amp;rsquo;s Encrypt 憑證，為什麼會推薦 Traefik 呢，原因在於 Traefik 可以自動偵測 Docker 容器內的 Label 設定，並且套用設定在 Traefik 服務內，也就是只要修改服務的 docker-compose 內容，重新啟動，Traefik 就可以抓到新的設定。這點在其它工具像是 &lt;a href="https://www.nginx.com/" title="Nginx">Nginx&lt;/a> 或 &lt;a href="https://caddyserver.com" title="Caddy">Caddy&lt;/a> 是無法做到的。底下我們來一步一步教大家如何設定啟用前後端服務。全部程式碼都放在 &lt;a href="https://github.com/go-training/training/tree/master/example25-traefik-golang-app-lets-encrypt" title="GitHub 上面">GitHub 上面&lt;/a>了。&lt;/p></description></item><item><title>用 Traefik 搭配 Docker 快速架設服務</title><link>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</link><pubDate>Tue, 08 Jan 2019 03:51:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/01/deploy-service-using-traefik-and-docker/</guid><description>&lt;p>&lt;strong>更新: 2019.01.10 新增教學影片&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" title="drone traefik docker deploy">&lt;img src="https://lh3.googleusercontent.com/TAK3Xi-hQKY1RCRGFLWmUGwdhP8UdI5mrWDyV5rQstQaQMDa27Fp0JOX2lezArNrZEdX227TyajH9wmVO3geDSFGQH9QBU4MANFSCBmPnlL2_eEehszF2tPhm1NNv1xYiCgiSM6air8=w1920-h1080" alt="drone traefik docker deploy" title="drone traefik docker deploy">&lt;/a>&lt;/p>
&lt;p>相信大家在架設服務肯定會選一套像是 &lt;a href="http://www.haproxy.org/">HAProxy&lt;/a>, &lt;a href="https://www.nginx.com/" title="Nginx">Nginx&lt;/a>, &lt;a href="https://httpd.apache.org/" title="Apache">Apache&lt;/a> 或 &lt;a href="https://caddyserver.com/" title="Caddy">Caddy&lt;/a>，這四套架設的難度差不多，如果要搭配 &lt;a href="https://letsencrypt.org/" title="Let's Encrypt">Let&amp;rsquo;s Encrypt&lt;/a> 前面兩套需要自己串接 (Nginx, Apache)，而 Caddy 是用 &lt;a href="https://golang.org/" title="Golang">Golang&lt;/a> 開發裡面已經內建了 Let&amp;rsquo;s Encrypt，，管理者不用擔心憑證過期，相當方便。但是本篇我要介紹另外一套工具叫 &lt;a href="https://traefik.io/" title="Traefik">Traefik&lt;/a>，這一套也是用 Go 語言開發，而我推薦這套的原因是，此套可以跟 Docker 很深度的結合，只要服務跑在 Docker 上面，Traefik 都可以自動偵測到，並且套用設定。透過底下的範例讓 Traefik 串接後端兩個服務，分別是 &lt;code>domain1.com&lt;/code> 及 &lt;code>domain2.com&lt;/code>。來看看如何快速設定 Traefik。&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" title="traefik + docker + golang">&lt;img src="https://lh3.googleusercontent.com/e4VvNhQLdG0agSrE3EbxYURmbZevK8kVUaBhvHE3FVg_9iCRFeDFdFo9PHEm9EGPkYX2Q-ZmdcwyJhsDRbPi0HdZIN1HRjdkgFI8mWrbVWPLscPKI2WxCDIlSkCzB2zoh6pay-3R2Xg=w1920-h1080" alt="traefik + docker + golang" title="traefik + docker + golang">&lt;/a>&lt;/p></description></item><item><title>Go Module 導入到專案內且搭配 Travis CI 或 Drone 工具</title><link>https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/</link><pubDate>Sun, 30 Dec 2018 03:07:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/go-module-integrate-with-travis-or-drone/</guid><description>&lt;p>&lt;a href="https://photos.google.com/share/AF1QipPZ8MkcLAazbfRWwBrT1CQpipCL8N_1uAcYosJmJ-o6du2XRRHNEokVarxey5Bp8w?key=clctLU9JYVMzcEdHYWR2dUlVTVZ6YnZUUjlYRG9B&amp;amp;source=ctrlq.org">&lt;img src="https://lh3.googleusercontent.com/Q5CP9S-xtRHxnDRvxDpWWkvBsEVw5C5uRyb5EiBh-UpYkrp_dkZp_oN8yi1WtqwruhSgnwNMB5QjJPxO94ABjG9oLBqmcRjlouNTNmrChIWbQcsAAbuV9eWB1wbsK-x-OY6iolb5ahc=w2400" alt="">&lt;/a>&lt;/p>
&lt;p>相信各位 &lt;a href="http://golang.org">Go 語言&lt;/a>開發者陸陸續續都將專案從各種 &lt;a href="https://github.com/golang/go/wiki/PackageManagementTools">Vendor 工具&lt;/a>轉換到 &lt;a href="https://github.com/golang/go/wiki/Modules">Go Module&lt;/a>，本篇會帶大家一步一步從舊專案轉換到 Go Module，或是該如何導入新專案，最後會結合 CI/CD 著名的兩套工具 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 或 &lt;a href="https://drone.io/">Drone&lt;/a> 搭配 Go Module 測試。&lt;/p></description></item><item><title>將 Flickr 相簿備份到 Google Photos</title><link>https://blog.wu-boy.com/2018/12/upload-flickr-to-google-photos/</link><pubDate>Thu, 20 Dec 2018 02:43:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/12/upload-flickr-to-google-photos/</guid><description>Flickr 在 2019 年一月會開始將免費會員照片刪除到剩下 1000 張，這次透過 Go 工具 來將備份好的 Flickr 相簿上傳到 Google Photos，此工具只適合用在 MacOS 及 Linux 上面，Windows 請改用『Backup and Sync from Google』工具。
*Free members with more than 1,000 photos or videos uploaded to Flickr have until Tuesday, January 8, 2019, to upgrade to Pro or download content over the limit. After January 8, 2019, members over the limit will no longer be able to upload new photos to Flickr. After February 5, 2019, free accounts that contain over 1,000 photos or videos will have content actively deleted &amp;ndash; starting from oldest to newest date uploaded &amp;ndash; to meet the new limit.</description></item><item><title>用 10 分鐘部署專案到 AWS Lambda</title><link>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</link><pubDate>Thu, 25 Oct 2018 03:10:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/10/deploy-app-to-aws-lambda-using-up-tool-in-ten-minutes/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/43711539730/in/dateposted-public/" title="Screen Shot 2018-10-24 at 9.37.49 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1956/43711539730_7bd9f610c3_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-10-24 at 9.37.49 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>看到這標題也許非常聳動，也可能覺得不可思議，今天來探討如何將專案直接部署到 &lt;a href="https://aws.amazon.com/tw/lambda/">AWS Lambda&lt;/a> 並且自動化將 &lt;a href="https://aws.amazon.com/tw/api-gateway/">API Gateway&lt;/a> 設定完成。當然要做到完全自動化，必須要使用一些工具才能完成，本篇將介紹由 &lt;a href="https://github.com/tj">TJ&lt;/a> 所開發的 &lt;a href="https://github.com/apex/up">apex/up&lt;/a> 工具，如果您不熟悉 EC2 也不太懂 Command line 操作，本文非常適合您，不需要管理任何 EC2 機器，也不需要在熟悉任何 Linux Command 就可以完成簡單的專案部署。首先為什麼我選擇 apex/up 而不是選擇 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a>，原因是使用 up 工具，您的專案是不用更動任何程式碼，就可以將專案直接執行在 AWS Lambda，那 API Gateway 部分也會一並設定完成，將所有 Request 直接 Proxy 到該 Lambda function。如果您希望對於 AWS Lambda 有更多進階操作，我會建議您用 &lt;a href="https://github.com/apex/apex">apex/apex&lt;/a> 或 &lt;a href="https://serverless.com/">Serverless&lt;/a>。您可以想像使用 up 就可以將 AWS Lambda 當作小型的 EC2 服務，但是不用自己管理 EC2，現在 up 支援 &lt;a href="https://golang.org">Golang&lt;/a>, &lt;a href="https://nodejs.org/en/">Node.js&lt;/a>, &lt;a href="https://www.python.org/">Python&lt;/a> 或 Java 程式語言，用一行 command 就可以將專案部署到雲端了。&lt;/p></description></item><item><title>Go 語言 1.11 版本推出 go module</title><link>https://blog.wu-boy.com/2018/10/go-1-11-support-go-module/</link><pubDate>Tue, 16 Oct 2018 04:48:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/10/go-1-11-support-go-module/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/40093179410/in/dateposted-public/" title="Go-Logo_Blue">&lt;img src="https://i1.wp.com/farm1.staticflickr.com/908/40093179410_53df4bb9e8_z.jpg?w=840&amp;#038;ssl=1" alt="Go-Logo_Blue" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇來聊聊 &lt;a href="https://golang.org">Go 語言&lt;/a>在 1.11 版本推出的 &lt;a href="https://github.com/golang/go/wiki/Modules">新功能&lt;/a>，相信大家也許還不知道此功能是做什麼用的，我們來回顧看看在初學 Go 語言的時候，最令人困擾的就是 &lt;code>GOPATH&lt;/code>，所有的專案都必須要在 GOPATH 底下開發，然而在更久前還沒有 Vendor 時候，兩個專案用不同版本的同一個 Package 就必須要使用多個 GOPATH 來解決，但是隨著 Vendor 在 1.5 版的推出，解決了這問題，所以現在只要把專案放在 GOPATH 底下，剩下的 Package 管理都透過 Vendor 目錄來控管，在很多大型開源專案都可以看到把 Vendor 目錄放入版本控制已經是基本的 Best Practice，而 go module 推出最大功能用來解決 GOPATH 問題，也就是未來開發專案，&lt;strong>隨意讓開發者 clone 專案到任何地方都可以&lt;/strong>，另外也統一個 Package 套件管理，不再需要 &lt;code>Vendor&lt;/code> 目錄，底下舉個實際例子來說明。&lt;/p></description></item><item><title>gofight 支援多個檔案上傳測試</title><link>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</link><pubDate>Tue, 25 Sep 2018 01:20:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 HTTP API 測試套件，之前已經寫過&lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">一篇介紹用法&lt;/a>，當時候尚未支援檔案上傳測試，也就是假設寫了一個&lt;a href="https://github.com/gin-gonic/gin/#upload-files">檔案上傳的 http handler&lt;/a> 在專案內如何寫測試，底下來看看該如何使用。&lt;/p></description></item><item><title>Go 語言專案程式碼品質</title><link>https://blog.wu-boy.com/2018/09/golang-project-quality/</link><pubDate>Thu, 20 Sep 2018 01:58:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/09/golang-project-quality/</guid><description>&lt;p>&lt;a href="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg?ssl=1">&lt;img src="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇想介紹我在寫開源專案會用到的工具及服務，其實在編譯 &lt;a href="https://golang.org">Go 語言&lt;/a>同時，就已經確保了一次程式碼品質，或者是在編譯之前會跑 &lt;code>go fmt&lt;/code> 或 &lt;code>go vet&lt;/code> 的驗證，網路上也蠻多工具可以提供更多驗證，像是：&lt;/p>
&lt;ul>
&lt;li>errcheck (檢查是否略過錯誤驗證)&lt;/li>
&lt;li>unused (檢查沒用到的 func, variable or const)&lt;/li>
&lt;li>structcheck (檢查 struct 內沒有用到的 field)&lt;/li>
&lt;li>varcheck (拿掉沒有用到的 const 變數)&lt;/li>
&lt;li>deadcode (沒有用到的程式碼)&lt;/li>
&lt;/ul>
&lt;p>但是這麼多驗證工具，要一一導入專案，實在有點麻煩，我自己在公司內部只有驗證 &lt;code>go fmt&lt;/code> 或 &lt;code>go vet&lt;/code> 或 &lt;a href="github.com/client9/misspell">misspell-check&lt;/a> (驗證英文單字是否錯誤) 及 &lt;a href="https://github.com/kardianos/govendor">vendor-check&lt;/a> (驗證開發者是否有去修改過 vendor 而沒有恢復修正)。如果你有在玩開源專案，其實可以不用這麼麻煩，導入兩套工具就可以讓你安心驗證別人發的 PR。底下來介紹一套工具及另外一套雲端服務。&lt;/p></description></item><item><title>Go 語言的 graphQL-go 套件正式支援 Concurrent Resolvers</title><link>https://blog.wu-boy.com/2018/09/graphql-go-library-support-concurrent-resolvers/</link><pubDate>Sun, 16 Sep 2018 03:35:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/09/graphql-go-library-support-concurrent-resolvers/</guid><description>要在 Go 語言寫 graphQL，大家一定對 graphql-go 不陌生，討論度最高的套件，但是我先說，雖然討論度是最高，但是效能是最差的，如果大家很要求效能，可以先參考此專案，裡面有目前 Go 語言的 graphQL 套件比較效能，有機會在寫另外一篇介紹。最近 graphql-go 的作者把 Concurrent Resolvers 的解法寫了一篇 Issue 來討論，最終採用了 Resolver returns a Thunk 方式來解決 Concurrent 問題，這個 PR 沒有用到額外的 goroutines，使用方式也最簡單
1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;#34;pullRequests&amp;#34;: &amp;amp;graphql.Field{ Type: graphql.NewList(PullRequestType), Resolve: func(p graphql.ResolveParams) (interface{}, error) { ch := make(chan []PullRequest) // Concurrent work via Goroutines. go func() { // Async work to obtain pullRequests. ch &amp;lt;- pullRequests }() return func() interface{} { return &amp;lt;-ch }, nil }, }, 使用方式 先用一個簡單例子來解釋之前的寫法會是什麼形式</description></item><item><title>在 Go 語言內的 URL RawQuery 的改變</title><link>https://blog.wu-boy.com/2018/08/escape-url-rawquery-on-parse-in-golang/</link><pubDate>Mon, 27 Aug 2018 06:00:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/08/escape-url-rawquery-on-parse-in-golang/</guid><description>&lt;p>&lt;strong>更新 (2018.08.29) 感謝中國網友幫忙發個 &lt;a href="https://github.com/golang/go/issues/27302">Issue&lt;/a>，大家有空可以關注看看，等官方怎麼回應&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Go 語言&lt;/a>內的 &lt;code>net/url&lt;/code> 函式庫讓開發者可以簡單的 Parse 指定的 URL，最近 Google 上了這個 &lt;a href="https://github.com/golang/go/commit/1040626c0ce4a1bc2b312aa0866ffeb2ff53c1ab">Patch&lt;/a>，這個 Patch 讓原本的 RawQuery 值產生了變化，原先沒有驗證 RawQuery 是否包含了不合法的字元，現在只要 RawQuesy 內含有任意的不合法字元，就會直接被 &lt;code>QueryEscape&lt;/code> 函式轉換，這個 Patch 不影響這次 &lt;a href="https://blog.golang.org/go1.11">Go 1.11 版本&lt;/a>，會影響的是明年 2019 年釋出的 Go 1.12 版本，但是大家都知道在 &lt;a href="https://github.com">GitHub&lt;/a> 上面有在寫測試的話，都會在 &lt;a href="https://travis-ci.org">Travis&lt;/a> 內加入 &lt;code>master&lt;/code> 版本當作驗證，如果有用到 RawQuery 的話，肯定會遇到這問題，底下來描述為什麼會出現這問題。&lt;/p></description></item><item><title>Go 語言實戰 GraphQL</title><link>https://blog.wu-boy.com/2018/07/graphql-in-go/</link><pubDate>Thu, 19 Jul 2018 01:12:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/07/graphql-in-go/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/41690303080/in/dateposted-public/" title="Screen Shot 2018-07-19 at 8.58.48 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1769/41690303080_3d1a278b8a_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-07-19 at 8.58.48 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興能在 &lt;a href="http://modernweb.tw/">2018 ModernWeb&lt;/a> 研討會跟大家分享用 &lt;a href="https://golang.org">Go 語言&lt;/a>實戰 &lt;a href="https://graphql.org/">GraphQL&lt;/a>，相信大家都知道 GraphQL 帶給前端後端及手機開發者很多好處，強烈推薦大家來嘗試看看。這場議程最主要是推廣 GraphQL 及 Go 語言。底下有投影片大家可以參考看看。&lt;/p></description></item><item><title>在本機端快速產生網站免費憑證</title><link>https://blog.wu-boy.com/2018/07/mkcert-zero-config-tool-to-make-locally-trusted-development-certificates/</link><pubDate>Fri, 06 Jul 2018 02:36:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/07/mkcert-zero-config-tool-to-make-locally-trusted-development-certificates/</guid><description>&lt;p>&lt;a href="https://i1.wp.com/farm2.staticflickr.com/1785/43227213371_a041db0810_o.png?ssl=1">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1785/43227213371_a041db0810_o.png?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>大家看到網站免費憑證，一定會想到 &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s encrypt&lt;/a> 服務商提供一個網域可以使用 100 個免費憑證，如果您有很多 subdomain 需求，還可以申請獨立一張 &lt;a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579">wildcard 憑證&lt;/a>，但是這是在伺服器端的操作，假設在本機端開發，該如何快速產生憑證，這樣開啟瀏覽器時，就可以看到綠色的 https 字眼&lt;/p>
&lt;p>&lt;a href="https://i2.wp.com/farm1.staticflickr.com/921/43177490822_974612c015_z.jpg?ssl=1">&lt;img src="https://i2.wp.com/farm1.staticflickr.com/921/43177490822_974612c015_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>如何在 Go 語言內寫效能測試</title><link>https://blog.wu-boy.com/2018/06/how-to-write-benchmark-in-go/</link><pubDate>Tue, 26 Jun 2018 02:18:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/06/how-to-write-benchmark-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Go 語言&lt;/a>不只有內建基本的 &lt;a href="https://golang.org/pkg/testing/">Testing&lt;/a> 功能，另外也內建了 &lt;a href="https://golang.org/pkg/testing/#hdr-Benchmarks">Benchmark&lt;/a> 工具，讓開發者可以快速的驗證自己寫的程式碼效能如何？該如何使用基本的 Benchmark 工具，底下用簡單的例子來說明如何寫 Benchmark，透過內建工具可以知道程式碼單次執行多少時間，以及用了多少記憶體。不多說直接用『數字轉字串』來當例子。&lt;/p></description></item><item><title>Drone 搭配 Kubernetes 部署 Go 語言項目</title><link>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</link><pubDate>Tue, 05 Jun 2018 02:36:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/06/drone-kubernetes-with-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/27678088297/in/dateposted-public/" title="Screen Shot 2018-06-04 at 9.19.46 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1738/27678088297_1c6fe64e86_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-06-04 at 9.19.46 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/10/upgrade-kubernetes-container-using-drone/">Drone 搭配 Kubernetes 升級應用程式版本&lt;/a>』，裡面內容最主要介紹 &lt;a href="https://github.com/honestbee">honestbee&lt;/a> 撰寫的 &lt;a href="https://drone.io">drone&lt;/a> 外掛: &lt;a href="https://github.com/honestbee/drone-kubernetes">drone-kubernetes&lt;/a>，但是此外掛並非用 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫，而是用 Shell Script 透過 &lt;code>kubectl set image&lt;/code> 方式來更新專案項目，但是這邊會有幾個缺點，第一點就是假設在 Develop 環境永遠都是吃 master 分支，也就是讀取 Image 的 &lt;code>latest&lt;/code> 標籤，這時候此外掛就無法作用，第二點此外掛無法讀取 kubernetes YAML 檔案，假設專案要修正一個 ENV 值，此外掛也無法及時更新。綜合這兩點因素，只好捨棄此外掛，而本篇會帶給大家另一個用 Go 語言所撰寫的外掛，是由 &lt;a href="https://github.com/Sh4d1">@Sh4d1&lt;/a> 所開發的&lt;a href="https://github.com/Sh4d1/drone-kubernetes/">項目&lt;/a>，用法相當容易，底下會一步一步教大家如何部署 Go 語言項目。&lt;/p></description></item><item><title>如何在 Go 專案內寫測試</title><link>https://blog.wu-boy.com/2018/05/how-to-write-testing-in-golang/</link><pubDate>Mon, 14 May 2018 03:19:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/05/how-to-write-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/24407557644/in/dateposted-public/" title="Go-brown-side.sh">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1622/24407557644_36087ca6de.jpg?w=840&amp;#038;ssl=1" alt="Go-brown-side.sh" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信大家都知道專案內不導入測試，未來越來越多功能，技術債就會越來越多，接手的人罵聲連連，而寫測試的簡單與否決定專案初期是否要先導入。為什麼專案要導入測試，導入測試有什麼好處，對於團隊而言，導入測試好處實在太多了，底下列了幾點是我個人覺得非常重要的。&lt;/p>
&lt;ol>
&lt;li>減少 Review 時間&lt;/li>
&lt;li>降低修改程式碼產生的的錯誤&lt;/li>
&lt;li>確保程式碼品質&lt;/li>
&lt;/ol>
&lt;p>第一點非常實用，尤其在專案很忙的時候，同事間只有少許的時間可以幫忙看程式碼或討論，如果大家都有寫測試，在時間的壓力下，只要稍微看一下，CI/CD 驗證過無誤，大致上就可以上線了。第二點在於，團隊其他成員需要修改一個不確定的地方，商業邏輯修正可能會造成很大的錯誤，而測試在這時候就發揮效果。最後一點就是程式碼品質，不管是新功能，或者是 Bug，任何時間點都需要補上測試，就算 code coverage 已經很高了，但是只要有任何 bug 就要補測試，測試寫的越多，專案的品質相對會提高。在 Go 語言專案內該如何寫測試了，為什麼專案要導入 Go 語言的原因之一就是『寫測試太簡單』了，底下來介紹如何寫基本的測試。&lt;/p></description></item><item><title>Go 語言的 vendor 目錄</title><link>https://blog.wu-boy.com/2018/05/what-is-vendor-in-golang/</link><pubDate>Sat, 05 May 2018 07:25:02 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/05/what-is-vendor-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/40093179410/in/dateposted-public/" title="Go-Logo_Blue">&lt;img src="https://i1.wp.com/farm1.staticflickr.com/908/40093179410_53df4bb9e8_z.jpg?w=840&amp;#038;ssl=1" alt="Go-Logo_Blue" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很多朋友剛入門 &lt;a href="https://golang.org">Go 語言時&lt;/a>，第一個會遇到的問題是，該如何設定專案配置，讓專案可以正常執行，在個人電腦該如何開發多個專案，這邊就會遇到該如何設定 &lt;code>$GOPATH&lt;/code>，我在這邊跟大家講個觀念，開發環境只會有一個 &lt;code>$GOPATH&lt;/code>，不管團隊內有多少專案，都是存放在同一個 GOPATH，避免每次開專案都要重新設定 &lt;code>$GOPATH&lt;/code>，而專案內用到的相依性套件，請各自維護，透過&lt;a href="https://github.com/golang/go/wiki/PackageManagementTools">官方提供的 wiki&lt;/a>，請選一套覺得好用的來使用吧，沒有最好的工具，找一套適合團隊是最重要的。&lt;/p></description></item><item><title>Go 語言的 init 函式</title><link>https://blog.wu-boy.com/2018/04/init-func-in-golang/</link><pubDate>Thu, 19 Apr 2018 03:17:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/04/init-func-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/24407557644/in/dateposted-public/" title="Go-brown-side.sh">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1622/24407557644_36087ca6de.jpg?w=840&amp;#038;ssl=1" alt="Go-brown-side.sh" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇會帶大家認識 &lt;a href="https://golang.org">Go 語言&lt;/a>的 init 函式，在了解 init func 之前，大家應該都知道在同一個 Package 底下是不可以有重複的變數或者是函式名稱，但是唯獨 init() 可以在同一個 package 內宣告多次都沒問題。底下看&lt;a href="https://play.golang.org/p/AN-6MK4qVVL">例子&lt;/a>，可以發現的是不管宣告多少次，都會依序從最初宣告到最後宣告依序執行下來。&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-15">15&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-16">16&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-17">17&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;init 1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;init 2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Hello, playground&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>如何使用 Go 語言 Flag 套件 (影片教學)</title><link>https://blog.wu-boy.com/2018/04/how-to-use-golang-flag-package/</link><pubDate>Thu, 12 Apr 2018 03:17:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/04/how-to-use-golang-flag-package/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/24407557644/in/dateposted-public/" title="Go-brown-side.sh">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1622/24407557644_36087ca6de.jpg?w=840&amp;#038;ssl=1" alt="Go-brown-side.sh" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/02/write-command-line-in-golang/">用 Golang 寫 Command line 工具&lt;/a>』教學，作者我錄了一個教學影片，教大家如何使用 &lt;a href="https://golang.org">Go 語言&lt;/a>的 &lt;a href="https://golang.org/pkg/flag/">Flag&lt;/a> 套件，套件用法很簡單，相信看了底下的影片教學馬上就會了，但是在這邊強調，用 flag 的時機會是在寫 command line tool 給同事或者是自己用，如果是寫大型 Web Application，不推薦使用 flag，原因是 flag 不支援讀取系統環境變數，如果是 web 服務，想要動態改變 port 或者是 DB 連線資訊，就變得比較複雜，也無法搭配 &lt;a href="https://www.docker.com/">Docker&lt;/a> 使用，更不用說想結合 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a>。如果要寫大專案，請使用 &lt;a href="https://github.com/urfave/cli">urfave/cli&lt;/a> 或 &lt;a href="https://github.com/spf13/cobra">spf13/cobra&lt;/a>。&lt;/p></description></item><item><title>Go 語言基礎實戰教學影片上線了</title><link>https://blog.wu-boy.com/2018/03/golang-introduction-video/</link><pubDate>Thu, 29 Mar 2018 01:45:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/golang-introduction-video/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/39050902230/in/dateposted-public/" title="Screen Shot 2018-03-17 at 11.40.12 PM">&lt;img src="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-03-17 at 11.40.12 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>去年在台灣推廣 &lt;a href="https://drone.io/">Drone&lt;/a> 這套由 &lt;a href="https://golang.org">Go 語言&lt;/a>所撰寫的&lt;a href="https://github.com/drone/drone">開源專案&lt;/a>，身為維護者之一，也將 Drone 跟 &lt;a href="https://github.com/go-gitea/gitea">Gitea&lt;/a> 完成整合。如果對於從開發到部署整個流程，還不是很了解的朋友，我個人就是推薦使用 Drone，去年九月也推出 Drone 的教學影片系列:『&lt;a href="https://www.udemy.com/devops-oneday/?couponCode=DRONE-DEVOPS">一天學會自動化測試及部署&lt;/a>』，在公司使用 Drone 到現在，不曾看到服務中斷，啟動速度也是毫秒等級。為什麼會這麼穩定及快速呢？當然要歸功於 Go 語言。而這次我個人針對 Go 語言，錄製了一份基礎教學『&lt;a href="https://www.udemy.com/golang-fight/?couponCode=GOLANG-INTRO">GO 語言基礎實戰&lt;/a>』&lt;/p></description></item><item><title>Go 語言搭配 Docker Healthy Check 檢查</title><link>https://blog.wu-boy.com/2018/03/docker-healthcheck-in-golang/</link><pubDate>Mon, 19 Mar 2018 03:18:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/docker-healthcheck-in-golang/</guid><description>&lt;p>[&lt;img src="https://i2.wp.com/farm1.staticflickr.com/805/39050902230_b1d91bc120_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-03-17 at 11.40.12 PM" data-recalc-dims="1" />][1] 在 [Docker][2] 1.12 版本後，提供了 &lt;code>HEALTHCHECK&lt;/code> 指令，通過指定的一行命令來判斷容器內的服務是否正常運作。在此之前大部分都是透過判斷程式是否 Crash 來決定容器是否存活，但是這地方有點風險的是，假設服務並非 crash，而是沒辦法退出容器，造成無法接受新的請求，這就確保容器存活。現在呢我們可以透過在 &lt;code>Dockerfile&lt;/code> 內指定 &lt;code>HEALTHCHECK&lt;/code> 指令來確保服務是否正常。而用 [Go 語言][3]開發的 Web 服務該如何來實現呢？&lt;/p></description></item><item><title>用 Go 語言實現單一或多重 Queue 搭配 optimistic concurrency</title><link>https://blog.wu-boy.com/2018/03/simple-queue-with-optimistic-concurrency-in-go/</link><pubDate>Sat, 10 Mar 2018 08:26:38 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/simple-queue-with-optimistic-concurrency-in-go/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25850362427/in/dateposted-public/" title="Screen Shot 2018-03-10 at 3.22.59 PM">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4781/25850362427_fb8199a5ee_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-03-10 at 3.22.59 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇教學會著重在如何使用 Go 語言的 &lt;a href="https://gobyexample.com/goroutines">goroutine&lt;/a> 及 &lt;a href="https://gobyexample.com/channels">channel&lt;/a>。&lt;a href="https://www.mongodb.com/">MongoDB&lt;/a> 是一套具有高效能讀寫的 NoSQL 資料庫，但是不像傳統關連式資料庫，有非常好用的 Transaction 交易模式，而在 MongoDB 也可以透過 &lt;a href="https://docs.mongodb.com/manual/tutorial/perform-two-phase-commits/">Two Phase Commits&lt;/a> 來達成交易功能，大家可以先打開文件看看，非常冗長，工程師需要花很多時間閱讀文件並且實現出來。而在 &lt;a href="https://golang.org">Go 語言&lt;/a>內，我們可以在 Single Thread 內同一時間點讀寫存取同一筆資料庫來解決此問題。此篇作法只適合運作在單一 application，如果是執行多個 application 則需要透過其他方式來解決，像是 &lt;a href="https://en.wikipedia.org/wiki/Optimistic_concurrency_control">Optimistic concurrency control&lt;/a>。&lt;/p></description></item><item><title>將 Go Html Template 存入 String 變數</title><link>https://blog.wu-boy.com/2018/02/simply-output-go-html-template-execution-to-strings/</link><pubDate>Wed, 28 Feb 2018 01:12:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/02/simply-output-go-html-template-execution-to-strings/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在 &lt;a href="https://golang.org/">Go 語言&lt;/a>內通常都將 &lt;a href="https://golang.org/pkg/text/template/">Html Temaple&lt;/a> 寫入到 &lt;code>io.Writer interface&lt;/code> 像是 &lt;code>*http.ResponseWriter&lt;/code>，但是有些情境需要將 Template 寫入到 String 變數內，例如實作簡訊 Template，這時候需要將 Html Temaple 轉成 String。該如何實作，非常簡單，只需要在任意變數內實作 &lt;code>io.Writer interface&lt;/code> 即可，而 String 該如何轉換呢？可以使用 buffer&amp;rsquo;s pointer&lt;/p></description></item><item><title>在 AWS Lambda 上寫 Go 語言搭配 API Gateway</title><link>https://blog.wu-boy.com/2018/01/write-golang-in-aws-lambda/</link><pubDate>Wed, 24 Jan 2018 02:43:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/01/write-golang-in-aws-lambda/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/39154963694/in/dateposted-public/" title="Snip20180124_2">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4655/39154963694_d53bc2a73e_z.jpg?w=840&amp;#038;ssl=1" alt="Snip20180124_2" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這應該不是什麼新消息了，就是 &lt;a href="https://aws.amazon.com/lambda/">AWS Lambda&lt;/a> 正式&lt;a href="https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/">支援 Go 語言&lt;/a>，也就是可以將 &lt;a href="https://golang.org">Go 語言&lt;/a>編譯出來的二進制檔案直接放進去 Lambda Function 內，前面可以搭配 &lt;a href="https://aws.amazon.com/api-gateway/">API Gateway&lt;/a>，後面可以搭配 &lt;a href="https://aws.amazon.com/cloudwatch/">CloudWatch&lt;/a> 或 &lt;a href="https://aws.amazon.com/s3/">S3&lt;/a>，本文章會教大家如何將 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a> 打包編譯進 Lambda，官網其實也有提供 &lt;a href="https://github.com/aws/aws-lambda-go">Library 或範例&lt;/a>方便大家實作，大家可以參考看看。&lt;/p></description></item><item><title>用 Go 語言減少 node_modules 容量來加速部署</title><link>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</link><pubDate>Tue, 21 Nov 2017 02:40:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">減少 node_modules 大小來加速部署 Node.js 專案&lt;/a>』文章，透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令可以移除不必要的模組，剩下的模組佔據整個專案大部分容量，那該如何針對留下的模組來瘦身呢？這週看到 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 大神 &lt;a href="https://github.com/tj">TJ&lt;/a> 又發了一個 &lt;a href="https://golang.org">Go 語言&lt;/a>專案叫做 &lt;a href="https://github.com/tj/node-prune">node-prune&lt;/a>，此專案用來移除在 &lt;code>node_modules&lt;/code> 內不必要的檔案，那哪些才是不必要的檔案呢？&lt;/p></description></item><item><title>從 Nginx 換到 Caddy</title><link>https://blog.wu-boy.com/2017/11/migrate-nginx-to-caddy/</link><pubDate>Sat, 18 Nov 2017 04:23:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/migrate-nginx-to-caddy/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32758934825/in/dateposted-public/" title="The_Caddy_web_server_logo.svg">&lt;img src="https://i1.wp.com/farm1.staticflickr.com/528/32758934825_665c449ff3_z.jpg?w=840&amp;#038;ssl=1" alt="The_Caddy_web_server_logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>終於下定決心將 &lt;a href="https://nginx.org/en/">Nginx&lt;/a> 換到 &lt;a href="https://caddyserver.com/">Caddy&lt;/a> 這套用 &lt;a href="https://golang.org">Go&lt;/a> 語言所撰寫的開源套件，大家一定會有所疑問『為什麼要換掉 Nginx 而改用 Caddy』，原因其實很簡單，你現在看的 Blog 安裝在 &lt;a href="https://www.linode.com/">Linode&lt;/a> 機器上面，之前跑的是 Nginx 搭配 &lt;a href="https://letsencrypt.org/">letsencrypt&lt;/a>，但是必須要寫一個 Scripts 來自動更新 letsencrypt 憑證，這機制最後不太運作，加上這一年來，每三個月就會有人丟我說『你的 Blog 憑證過期了』，所以就在這時間點，花點時間把 Nginx 設定調整到 Caddy，轉換的時間不會花超過一小時喔。&lt;/p></description></item><item><title>Go 語言實現 gRPC Health 驗證</title><link>https://blog.wu-boy.com/2017/11/grpc-health-check-in-go/</link><pubDate>Tue, 14 Nov 2017 05:57:10 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/grpc-health-check-in-go/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/26629370309/in/dateposted-public/" title="grpc_square_reverse_4x">&lt;img src="https://i1.wp.com/farm5.staticflickr.com/4555/26629370309_b2fa3b59df_z.jpg?w=840&amp;#038;ssl=1" alt="grpc_square_reverse_4x" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本篇教大家如何每隔一段時間驗證 &lt;a href="https://grpc.io/">gRPC&lt;/a> 服務是否存活，如果想了解什麼是 gRPC 可以參考 這篇『&lt;a href="https://yami.io/grpc/">REST 的另一個選擇：gRPC&lt;/a>』，這邊就不多介紹 gRPC 了，未來將會是容器的時代， 那該如何檢查容器 Container 是否存活。如果是用 Kubernetes 呢？該如何來撰寫 gRPC 接口搭配 &lt;code>livenessProbe&lt;/code> 設定。底下是在 &lt;a href="https://docs.docker.com/engine/reference/builder/">Dockerfile&lt;/a> 內可以設定 &lt;code>HEALTHCHECK&lt;/code> 來 達到檢查容器是否存活。詳細說明可以參考此&lt;a href="https://docs.docker.com/engine/reference/builder/#healthcheck">連結&lt;/a>。&lt;/p></description></item><item><title>Gorush 輕量級手機訊息發送服務</title><link>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</link><pubDate>Wed, 01 Nov 2017 02:03:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/gorush-a-push-notification-server-written-in-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>今年第一次參加濁水溪以南最大研討會 &lt;a href="https://mopcon.org/2017/">Mopcon&lt;/a>，給了一場議程叫『&lt;a href="https://www.slideshare.net/appleboy/gorush-a-push-notification-server-written-in-go">用 Go 語言打造輕量級 Push Notification 服務&lt;/a>』，身為南部人一定要參加 Mopcon，剛好透過此議程順便發佈新版 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a>，其實今年投稿 Mopcon 最主要是回家鄉宣傳 &lt;a href="https://www.google.com">Google&lt;/a> 所推出的 &lt;a href="https://golang.org/">Go&lt;/a> 語言，藉由實際案例來跟大家分享如何入門 Go 語言，以及用 Go 語言最大好的好處有哪些。底下是此議程大綱:&lt;/p>
&lt;ul>
&lt;li>為什麼建立 &lt;a href="https://github.com/appleboy/gorush">Gorush&lt;/a> 專案&lt;/li>
&lt;li>如何用 Go 語言實作&lt;/li>
&lt;li>用 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 自動化測試及部署&lt;/li>
&lt;li>在 &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> 上跑 Gorush&lt;/li>
&lt;/ul></description></item><item><title>在 Go 語言使用 Viper 管理設定檔</title><link>https://blog.wu-boy.com/2017/10/go-configuration-with-viper/</link><pubDate>Mon, 23 Oct 2017 06:54:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/10/go-configuration-with-viper/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在每個語言內一定都會有管理設定檔的相關套件，像是在 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 的 &lt;a href="https://github.com/motdotla/dotenv">dotenv&lt;/a> 套件，而在 &lt;a href="https://golang.org">Go 語言&lt;/a>內呢？相信大家一定都會推 &lt;a href="https://gohugo.io/">Hugo&lt;/a> 作者寫的 &lt;a href="https://github.com/spf13/viper">Viper&lt;/a>，Viper 可以支援讀取 JSON, TOML, YAML, HCL 等格式的設定檔案，也可以讀取環境變數，另外也可以直接跟取遠端設定檔整合(像是 &lt;a href="https://github.com/coreos/etcd">etcd&lt;/a> 或 &lt;a href="https://www.consul.io">Consul&lt;/a>)，本篇會介紹如何使用 Viper。&lt;/p></description></item><item><title>部署 Go 語言 App 到 Now.sh</title><link>https://blog.wu-boy.com/2017/09/deploy-go-app-to-zeit-now/</link><pubDate>Fri, 15 Sep 2017 03:35:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/deploy-go-app-to-zeit-now/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>本篇要教大家如何部署 &lt;a href="https://golang.org">Go&lt;/a> 語言的 App 到 &lt;a href="https://zeit.co/now">now.sh&lt;/a> 服務。now 服務是讓開發者可以透過 JavaScript 或用 Docker 方式直接部署到 now 雲端機器，也就是 now 所提供的服務可以在自己電腦透過 &lt;code>package.json&lt;/code> 或 &lt;code>Dockerfile&lt;/code> 來部署 app。原先剛出來時候，只有支援 node.js 部署，後來才增加 Docker。透過 Docker 就可以來部署各種不同語言的專案。&lt;/p></description></item><item><title>為什麼我用 Drone 取代 Jenkins 及 GitLab CI</title><link>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</link><pubDate>Thu, 07 Sep 2017 02:58:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36906030282/in/dateposted-public/" title="Logo-DevOpsDays">&lt;img src="https://farm5.staticflickr.com/4382/36906030282_f489c96be3_z.jpg" alt="Logo-DevOpsDays">&lt;/a>&lt;/p>
&lt;p>終於有機會正式跟大家介紹為什麼我會捨棄 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 跟 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a>，取而代之的是用 &lt;a href="https://golang.org">Go&lt;/a> 語言寫的 &lt;a href="https://github.com/drone/drone">Drone&lt;/a>。今年很高興錄取台灣第一屆 &lt;a href="https://devopsdays.tw/">DevOps Day&lt;/a> 講師，在今年主題是『用 Drone 打造輕量級容器持續交付平台』，主要推廣這套 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 工具，會議內容圍繞在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a>, &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 跟 Drone 的比較。也提到為什麼我不用 Jenkins 及 GitLab CI 的幾個原因。底下整理議程大綱。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>為什麼選擇 Drone&lt;/li>
&lt;li>Drone 基礎簡介&lt;/li>
&lt;li>Drone 架構擴展&lt;/li>
&lt;li>Drone 安裝方式&lt;/li>
&lt;li>Drone 管理介面&lt;/li>
&lt;li>Drone 測試部署&lt;/li>
&lt;li>Drone 自訂套件&lt;/li>
&lt;/ul></description></item><item><title>用 upx 壓縮 Go 語言執行擋</title><link>https://blog.wu-boy.com/2017/09/downsize-go-binary-using-upx/</link><pubDate>Fri, 01 Sep 2017 01:37:27 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/downsize-go-binary-using-upx/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>剛開始學 &lt;a href="https://golang.org">Go&lt;/a> 語言的時候，跟學習其他語言一樣，寫了底下一個簡單的 Hello World 檔案&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-8">8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這是一個最簡單的程式碼，接著透過 &lt;code>go build&lt;/code> 的方式編譯出執行檔，這時候我們看看檔案大小:&lt;/p></description></item><item><title>用 Go 語言打造微服務架構</title><link>https://blog.wu-boy.com/2017/08/microservice-in-go/</link><pubDate>Fri, 11 Aug 2017 08:17:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/08/microservice-in-go/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://modernweb.tw/">ModernWeb&lt;/a> 講『用 Go 語言打造微服務架構』，蠻開心看到底下很多 &lt;a href="https://golang.org">Go&lt;/a> 開發者，希望未來能有更多公司導入 Go 語言，底下是會議大綱:&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>Microservices vs. Monolithic 差異&lt;/li>
&lt;li>微服務核心架構 (Go 工具專案)&lt;/li>
&lt;li>Go 語言核心高並發&lt;/li>
&lt;li>為什麼選用 Go 語言&lt;/li>
&lt;li>微服務代價跟準備&lt;/li>
&lt;/ul></description></item><item><title>2017 COSCUP 研討會: Gitea + Drone 介紹</title><link>https://blog.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</link><pubDate>Mon, 07 Aug 2017 06:23:26 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36020937670/in/dateposted-public/" title="gitea-lg">&lt;img src="https://farm5.staticflickr.com/4377/36020937670_fbcf1ee3d3_z.jpg" alt="gitea-lg">&lt;/a>&lt;/p>
&lt;p>今年很高興可以到 &lt;a href="http://coscup.org/2017">COSCUP&lt;/a> 分享『&lt;strong>Gitea + Drone 介紹&lt;/strong>』，我是在第二天的最後一場來做分享，最後還被大會進來趕人，講超過時間了。這次是我第一次到&lt;a href="http://www.coss.ntu.edu.tw/">台大社科院&lt;/a>，太陽真的好大，兩天下來流的汗水，大概已經是一年份的了。由於今年 COSCUP 不供應午餐，在第一天中午到科技站出口，左轉第一個店面就坐下來吃麵，店面不大，賣傳統小吃，我點了麻醬麵大碗 55 元，燙青菜 35 元，真的很大碗，不知道是不是因為在學校附近的關係，所以特別大碗，我心裡想說，這裡不是台北嗎？&lt;/p></description></item><item><title>Go 語言框架 Gin 終於發佈 v1.2 版本</title><link>https://blog.wu-boy.com/2017/07/go-framework-gin-release-v1-2/</link><pubDate>Thu, 06 Jul 2017 06:29:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/07/go-framework-gin-release-v1-2/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/35582011972/in/dateposted-public/" title="19807878_1634683919888714_743883353_o">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4094/35582011972_dd73f48a9f.jpg?w=840&amp;#038;ssl=1" alt="19807878_1634683919888714_743883353_o" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>上週跟 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a> 作者 &lt;a href="https://github.com/javierprovecho">@javierprovecho&lt;/a> 討論要發佈新版本，很快地經過一兩天，作者終於整理好 &lt;a href="https://github.com/gin-gonic/gin/releases/tag/v1.2">v1.2&lt;/a> 版本，除了釋出新版本外，也換了有顏色的 Logo，真心覺得很好看。大家來看看 v1.2 釋出哪些功能，或修正哪些問題。&lt;/p></description></item><item><title>台灣第一屆 Laravel 研討會</title><link>https://blog.wu-boy.com/2017/07/laravel-conf-in-taipei/</link><pubDate>Mon, 03 Jul 2017 01:43:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/07/laravel-conf-in-taipei/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/35625404626/in/dateposted-public/" title="laravelconftw_o">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4237/35625404626_71f7a8a492_z.jpg?w=840&amp;#038;ssl=1" alt="laravelconftw_o" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這次很高興擔任第一屆 &lt;a href="https://laravelconf.tw">Laravel 台灣研討會&lt;/a>講者，會議當天中午才到現場，我是兩點分享的議程，在整天聽下來及最後的案例討論，聽到最多的都是原本從 &lt;a href="https://codeigniter.org.tw/">CodeIgniter&lt;/a> 架構換到 &lt;a href="https://laravel.com/">Laravel&lt;/a> 上面，身為 CodeIgniter 的維護人員的我，聽到是蠻開心的，在 Laravel 還沒出來前，大家都是選用這輕量級的 CodeIgniter。&lt;/p></description></item><item><title>台灣第一屆 GoPher 大會</title><link>https://blog.wu-boy.com/2017/06/gopher-day-in-taipei/</link><pubDate>Fri, 30 Jun 2017 02:56:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/gopher-day-in-taipei/</guid><description>&lt;p>&lt;a href="https://i0.wp.com/farm5.staticflickr.com/4285/35453214392_b37fcef501_z.jpg?ssl=1">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4285/35453214392_b37fcef501_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興可以擔任第一屆 &lt;a href="http://gopher.ithome.com.tw/">GoPher Day&lt;/a> 大會講者，每次參加聚會都是跟一堆網友見面，人在新竹很難得大家見到面。很感謝 &lt;a href="http://www.ithome.com.tw/">iThome&lt;/a> 大力幫忙舉辦，才可以讓整天議程順利完成。底下分享『用 Go 語言實戰 Push Notification 服務』投影片。&lt;/p></description></item><item><title>Drone 自動觸發 GitLab CI 或 Jenkins 任務</title><link>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</link><pubDate>Wed, 28 Jun 2017 04:24:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套由 &lt;a href="https://golang.org/">Go 語言&lt;/a>所開發的開源碼專案，讓開發者可以使用 &lt;a href="http://docker.com/">Docker&lt;/a> Container 快速設定自動化測試及部署，上篇有提到『&lt;a href="https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/">Cronjob 搭配 Drone 服務&lt;/a>』，讓 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 用戶可以轉換 Cron Job 任務到 Drone 上面。本篇則是會介紹如何透過 Drone 去觸發 Jenkins 或 GitLab CI 上的工作，當然這是過渡時期，希望大家最後能將工作完整移轉到 Drone 上面，不要再依靠 Jenkins 或 GitLab CI 了。本篇會教大家用三種方式來觸發 GitLab CI 或 Jenkins 任務。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>使用 Drone CI/CD&lt;/li>
&lt;li>使用 Docker 指令&lt;/li>
&lt;li>使用 Command Line (命令列)&lt;/li>
&lt;/ul></description></item><item><title>Cronjob 搭配 Drone 服務</title><link>https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/</link><pubDate>Sun, 25 Jun 2017 05:32:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套基於 &lt;a href="https://www.docker.com/">Docker&lt;/a> Container 技術的 CI/CD 服務，它是用 &lt;a href="https://golang.org/">Go&lt;/a> 語言所開發，可以安裝在任何作業系統內，你可以把 Drone 當作是開源版的 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 服務。Drone 本身不支援排程任務，也就是說無法像 Jenkins CI 一樣可以設定每天幾點幾分執行單一 Job 任務。但是可以透過第三方工具像是 &lt;code>cron&lt;/code> 來整合 Drone API 達成自動排程的效果，底下來看看該如何實作。&lt;/p></description></item><item><title>Go 語言內 struct methods 該使用 pointer 或 value 傳值?</title><link>https://blog.wu-boy.com/2017/05/go-struct-method-pointer-or-value/</link><pubDate>Mon, 22 May 2017 02:39:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/05/go-struct-method-pointer-or-value/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>上週末在台北講『&lt;a href="http://learning.ithome.com.tw/course/JjojzNh9P1N9H">Go 語言基礎課程&lt;/a>』，其中一段介紹 Struct 的使用，發現有幾個學員對於在 Method 內要放 Pointer 或 Value 感到困惑，而我自己平時在寫 Go 語言也沒有注意到這點。好在強者學員 &lt;a href="https://www.facebook.com/YinChenLiao?fref=nf">Dboy Liao&lt;/a> 找到一篇說明:『&lt;a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">Don&amp;rsquo;t Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang&lt;/a>』，在 Go 語言如何區分 &lt;code>func (s *MyStruct)&lt;/code> 及 &lt;code>func (s MyStruct)&lt;/code>，底下我們先來看看簡單的 Struct 例子&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-10">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-11">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-12">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-13">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-14">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-15">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-15">15&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-16">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-16">16&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-17">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-17">17&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> &lt;span style="color:#cd5555">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Cart &lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name &lt;span style="color:#00688b;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Price &lt;span style="color:#00688b;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (c Cart) &lt;span style="color:#008b45">GetPrice&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#008b45">Println&lt;/span>(c.Price)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> &lt;span style="color:#008b45">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c := &amp;amp;Cart{&lt;span style="color:#cd5555">&amp;#34;bage&amp;#34;&lt;/span>, &lt;span style="color:#b452cd">100&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c.&lt;span style="color:#008b45">GetPrice&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>用 Docker Multi-Stage 編譯出 Go 語言最小 Image</title><link>https://blog.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</link><pubDate>Sat, 29 Apr 2017 13:23:55 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>之前應該沒寫過用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 結合 Go 語言編譯出最小 Image 的文章，剛好趁這機會來介紹。其實網路上可以直接找到文章，像是這篇『&lt;a href="https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/">Building Minimal Docker Containers for Go Applications&lt;/a>』，那本文來介紹 Docker 新功能 &lt;a href="https://github.com/moby/moby/pull/32063">multi-stage builds&lt;/a>，此功能只有在 &lt;a href="https://github.com/moby/moby/releases/tag/v17.05.0-ce-rc1">17.05.0-ce&lt;/a> 才支援，看起來是 2017/05/03 號會 release 出來。我們拿 Go 語言的 Hello World 來介紹 Single build 及 Multiple build。&lt;/p></description></item><item><title>用 Go 語言打造 DevOps Bot</title><link>https://blog.wu-boy.com/2017/04/devops-bot-in-golang/</link><pubDate>Sat, 29 Apr 2017 03:33:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/devops-bot-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34200999131/in/dateposted-public/" title="18190989_10210525473186864_1567687746_n">&lt;img src="https://i0.wp.com/c1.staticflickr.com/5/4173/34200999131_48c1b84dd2_z.jpg?w=840&amp;#038;ssl=1" alt="18190989_10210525473186864_1567687746_n" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在 4/27 參加 &lt;a href="http://www.ithome.com.tw/">iThome&lt;/a> 舉辦的第一屆 &lt;a href="http://chatbot.ithome.com.tw/">ChatBot Day&lt;/a>，我分享了如何用 &lt;a href="https://golang.org">Go 語言&lt;/a> 實作 DevOps Bot，可以透過 &lt;a href="https://developers.facebook.com/docs/messenger-platform">Facebook Messenger&lt;/a> 或 &lt;a href="https://developers.line.me/messaging-api/overview">Line Messenger API&lt;/a> 來主動通知開發者。此議程希望可以幫助想玩 Bot 但是又不知道如何入門的開發者。如果不懂程式語言，也可以直些下載 Binary 來玩玩看。&lt;/p></description></item><item><title>在 DigitalOcean 新竹社群簡介 Gitea 開源專案</title><link>https://blog.wu-boy.com/2017/04/introduction-to-gitea-in-digitalocean-hsinchu/</link><pubDate>Sun, 23 Apr 2017 13:34:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/introduction-to-gitea-in-digitalocean-hsinchu/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32012549582/in/dateposted-public/" title="gitea">&lt;img src="https://i2.wp.com/c1.staticflickr.com/1/306/32012549582_3de35c29c8_o.png?w=840&amp;#038;ssl=1" alt="gitea" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興受到 &lt;a href="https://www.facebook.com/DigitalOceanHsinchu/">DigitalOcean 新竹社群&lt;/a>邀請來介紹輕量級的 Git 服務: &lt;a href="https://gitea.io">Gitea&lt;/a>，在不久之前筆者已經寫過一篇 &lt;a href="https://blog.wu-boy.com/2017/01/new-git-code-hosting-option-gitea/">Gitea 介紹&lt;/a>，這次到&lt;a href="http://www.nctu.edu.tw/">交通大學&lt;/a>宣傳這套免費的開源專案，目的就是希望台灣有更多開發者或企業可以了解用 &lt;a href="https://golang.org/">Go 語言&lt;/a>也可以打造一套輕量級 Git 服務，並且導入台灣的新創團隊。這次分享是透過 &lt;a href="https://www.digitalocean.com/">DigitalOcean&lt;/a> 最小機器 (512MB 記憶體，每個月五美金) 來 Demo 如何在 Ubuntu 16.04 快速架設 Gitea 及使用 &lt;a href="https://caddyserver.com/">Caddy&lt;/a> 來自動申請 &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a> 憑證，最後搭配 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 串自動化部署及測試等&amp;hellip;。&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/33407490713/in/dateposted-public/" title="2017-04-23-18-18-45">&lt;img src="https://i1.wp.com/c1.staticflickr.com/3/2945/33407490713_d58acb6239_z.jpg?w=840&amp;#038;ssl=1" alt="2017-04-23-18-18-45" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>五大理由從 Python 轉到 Go 語言</title><link>https://blog.wu-boy.com/2017/04/5-reasons-why-we-switched-from-python-to-go/</link><pubDate>Sat, 08 Apr 2017 10:14:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/5-reasons-why-we-switched-from-python-to-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在網路上看到這篇『&lt;a href="https://medium.com/@tigranbs/5-reasons-why-we-switched-from-python-to-go-4414d5f42690">5 Reasons Why We switched from Python To Go&lt;/a>』，先發到自己 &lt;a href="https://www.facebook.com/appleboy46/posts/10155217598399250">Facebook 牆上&lt;/a>，引發討論，乾脆整理一篇 Blog 來寫自己的感想，底下五大理由讓該篇作者從 &lt;a href="https://www.python.org/">Python&lt;/a> 轉到 &lt;a href="https://golang.org">Go 語言&lt;/a>。我會針對前四點來寫心得&lt;/p>
&lt;ol>
&lt;li>編譯二進制檔案 (加速部署及跨平台)&lt;/li>
&lt;li>編譯自動檢查 Static 型態 (你不會把 string 欄位帶入 Integer)&lt;/li>
&lt;li>效能 (Go 並發跟 Python thread 比起來節省許多資源)&lt;/li>
&lt;li>不需要 web framework (Go 內建大多數 Library 像是 HTTP, JSON, HTML templating)&lt;/li>
&lt;li>好用的 IDE (內文提到 Webstorm, PHPStorm) 我推薦用 &lt;a href="https://code.visualstudio.com/">VSCode&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>除了第五點外，其他四點個人覺得都是工程師的痛點。&lt;/p></description></item><item><title>在 Go 語言用一行程式碼自動化安裝且更新 Let’s Encrypt 憑證</title><link>https://blog.wu-boy.com/2017/04/1-line-letsencrypt-https-servers-in-golang/</link><pubDate>Fri, 07 Apr 2017 03:23:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/1-line-letsencrypt-https-servers-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在去年寫了一篇『&lt;a href="https://blog.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/">申請 Let’s Encrypt 免費憑證讓網站支援 HTTP2&lt;/a>』教學，如果您是用 Nginx，就可以參考該篇教學讓您的伺服器支援 HTTPS，而 &lt;a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html">Google Security Blog&lt;/a> 也宣布在 56 版本以後將會提示 non-secure 網站，讓使用者可以選擇性瀏覽網站。&lt;a href="https://letsencrypt.org/">Let’s Encrypt&lt;/a> 官方也&lt;a href="https://letsencrypt.org/2017/01/06/le-2016-in-review.html">公布去年 2016 發了多少張憑證&lt;/a>，相當驚人，想必大家對 HTTPS 已經有相當程度的瞭解。底下這張圖說明 2016 年 Let’s Encrypt 發憑證總量的狀況&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/33499997070/in/dateposted-public/" title="Screen Shot 2017-04-07 at 9.52.40 AM">&lt;img src="https://i2.wp.com/c1.staticflickr.com/3/2820/33499997070_dfa4f1cf7c_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-04-07 at 9.52.40 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>此篇會介紹在 &lt;a href="https://golang.org">Go 語言&lt;/a>如何跟 Let’s Encrypt 串接，底下有兩種方式。&lt;/p></description></item><item><title>Debian/Ubuntu 的 update-rc.d 使用教學</title><link>https://blog.wu-boy.com/2017/04/update-rc-in-debian-or-ubuntu/</link><pubDate>Thu, 06 Apr 2017 08:34:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/update-rc-in-debian-or-ubuntu/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/33486150390/in/dateposted-public" title="Debian">&lt;img src="https://i2.wp.com/c1.staticflickr.com/3/2849/33486150390_198a19b880_n.jpg?w=840&amp;#038;ssl=1" alt="Debian" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://manpages.ubuntu.com/manpages/precise/man8/update-rc.d.8.html">update-rc.d&lt;/a> 是在 &lt;a href="https://www.debian.org/">Debian&lt;/a> 或 &lt;a href="https://www.ubuntu.com/">Ubuntu&lt;/a> 內用來管理 &lt;code>/etc/init.d&lt;/code> 目錄內的 scripts 工具。不管是 Nginx 或 Mysql 等相關服務，都可以在 &lt;code>/etc/init.d&lt;/code> 目錄內找到相對應的 script 檔案，隨便打開一個 script 檔案就可以看到標頭有固定的格式寫法:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-8">8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">### BEGIN INIT INFO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Provides: gorush&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Required-Start: $syslog $network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Required-Stop: $syslog $network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Default-Start: 2 3 4 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Default-Stop: 0 1 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Short-Description: starts the gorush web server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Description: starts gorush using start-stop-daemon&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">### END INIT INFO&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Go 語言官方推出的 dep 使用心得</title><link>https://blog.wu-boy.com/2017/03/golang-dependency-management-tool-dep/</link><pubDate>Fri, 31 Mar 2017 01:58:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/03/golang-dependency-management-tool-dep/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://golang.org/">Go&lt;/a> 語言團隊在去年開始開發 Dependency Management Tool 稱作 &lt;a href="https://github.com/golang/dep">dep&lt;/a>，並且預計明年 2018 推出 1.10 Go 版本時內建，詳細可以參考官方的 &lt;a href="https://github.com/golang/dep/wiki/Roadmap">roadmap&lt;/a>，強者我朋友寫了一篇&lt;a href="https://github.com/kevingo/dep-example">使用教學&lt;/a>，有興趣的朋友可以參考看看，但是本篇會講幾點我目前不打算用 dep 的原因。&lt;/p></description></item><item><title>Go 語言的錯誤訊息處理</title><link>https://blog.wu-boy.com/2017/03/error-handler-in-golang/</link><pubDate>Thu, 23 Mar 2017 07:25:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/03/error-handler-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>每個語言對於錯誤訊息的處理方式都不同，在學習每個語言時，都要先學會如何在程式內處理錯誤訊息 (Error Handler)，而在 &lt;a href="https://golang.org/">Go 語言&lt;/a>的錯誤處理是非常簡單，本篇會用簡單的範例教大家 Go 如何處理錯誤訊息。&lt;/p></description></item><item><title>用 Golang 寫 Command line 工具</title><link>https://blog.wu-boy.com/2017/02/write-command-line-in-golang/</link><pubDate>Thu, 16 Feb 2017 07:46:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/02/write-command-line-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>如果你要寫 Command line 工具，又想在各平台 (像是 MacOS, Windows 或 Linux) 上執行，這時候 &lt;a href="https://golang.org">Golang&lt;/a> 就是您最好的選擇。在 &lt;a href="https://www.reddit.com">Reddit&lt;/a> 讀到一篇 &lt;a href="https://www.reddit.com/r/golang/comments/5sdvoh/what_is_the_essential_difference_between/">Command line 工具比較介紹&lt;/a>，這篇最主要講到兩個 CLI 工具，一個是 &lt;a href="https://github.com/urfave/cli">urfave/cli&lt;/a>，另一個是 &lt;a href="https://github.com/spf13/cobra">spf13/cobra&lt;/a>，這兩個工具其實都非常好用，後者是&lt;a href="http://spf13.com/post/joining-go-team-at-google/">去年加入 Google Golang 團隊&lt;/a>的 &lt;a href="http://spf13.com/">spf13&lt;/a> 所開發，該作者加入 Google 後呢，非常的忙，但是強者他同事有幫忙繼續維護 cobra 專案，兩個 CLI 工具各自都有有大型專案使用 urfave/cli 有 &lt;a href="https://github.com/docker/libcompose">docker/libcompose&lt;/a>, &lt;a href="https://github.com/docker/machine">docker/machine&lt;/a>, &lt;a href="https://github.com/drone/drone">Drone&lt;/a>, &lt;a href="https://gitea.io/">Gitea&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a> 等，而後者 spf13/cobra 則有 &lt;a href="https://docker.com">docker&lt;/a>, &lt;a href="https://github.com/docker/distribution">docker/distribution&lt;/a>, &lt;a href="https://github.com/coreos/etcd">etcd&lt;/a> 等。本篇筆者會介紹 urfave/cli 該如何使用？&lt;/p></description></item><item><title>Caddy 搭配 Drone 伺服器設定</title><link>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</link><pubDate>Tue, 07 Feb 2017 06:46:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/32758934825/in/dateposted-public/" title="The_Caddy_web_server_logo.svg">&lt;img src="https://i0.wp.com/c1.staticflickr.com/1/528/32758934825_665c449ff3_z.jpg?resize=640%2C138&amp;#038;ssl=1" alt="The_Caddy_web_server_logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;h2 id="緣由">緣由&lt;/h2>
&lt;p>&lt;a href="https://caddyserver.com/">Caddy&lt;/a> 是一套 &lt;a href="https://zh.wikipedia.org/zh-tw/HTTP/2">HTTP/2&lt;/a> 伺服器，你可以想成跟 &lt;a href="https://nginx.org/">Nginx&lt;/a> 是同一種角色，但是 Caddy 有一點不一樣的地方就是自動支援 HTTPS 設定，也就是 Caddy 幫網站自動申請 &lt;a href="https://letsencrypt.org/">Letsencrypt&lt;/a> 憑證，開發者不需要擔心憑證會過期，Caddy 會定期幫忙更換。&lt;a href="https://www.docker.com/">Drone&lt;/a> 則是一套以 &lt;a href="https://www.docker.com/">Docker&lt;/a> 為基礎的 &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration&lt;/a> 平台。就在上個月 Caddy 發佈了 &lt;a href="https://github.com/mholt/caddy/releases/tag/v0.9.5">0.9.5&lt;/a> 版本，更新過後，發現 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 的 WebSocket 連線會斷線又連線，底下來看看 Caddy 更動了什麼造成 WebSocket 連線失效。&lt;/p></description></item><item><title>從商業利益看 Go 程式語言</title><link>https://blog.wu-boy.com/2017/01/business-benefits-of-go/</link><pubDate>Sat, 14 Jan 2017 12:59:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/01/business-benefits-of-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>從 2016 年開始寫 &lt;a href="https://golang.org/">Go&lt;/a> 程式語言，在這一年我向很多朋友介紹了 Go 語言，很多人就不經問到為什麼我這麼喜歡 Go 語言，在公司內同事或主管更會問，為什麼要從 Node.js 或其他語言轉換到 Go，Go 語言有什麼地方可以帶給公司更大的利益，否則為什麼要多花時間跟人力去嘗試 Go 語言。如果團隊要建置一個商業 Web 服務，那我覺得底下的優點，是讓您選擇 Go 語言的最主要原因。&lt;/p></description></item><item><title>開發者另類的自架 Git 服務選擇: Gitea</title><link>https://blog.wu-boy.com/2017/01/new-git-code-hosting-option-gitea/</link><pubDate>Sat, 07 Jan 2017 14:31:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/01/new-git-code-hosting-option-gitea/</guid><description>&lt;p>&lt;a href="https://i2.wp.com/c1.staticflickr.com/1/306/32012549582_3de35c29c8_o.png?ssl=1">&lt;img src="https://i2.wp.com/c1.staticflickr.com/1/306/32012549582_3de35c29c8_o.png?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>現在 Git 服務最有名的就是 &lt;a href="https://github.com/">Github&lt;/a>，如果是開放原始碼，我很推薦 Github。如果是想要放大量私有專案或企業內及個人使用，想必大家會推薦 &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>，在這裡就不多介紹 Gitlab 了，可以從 &lt;a href="https://www.google.com.tw/?gfe_rd=cr&amp;amp;ei=AO1wWPbPJMb48Aee1aqoBQ&amp;amp;gws_rd=ssl#q=gitlab&amp;amp;tbs=lr:lang_1zh-TW&amp;amp;lr=lang_zh-TW">Google 找到許多相關資料&lt;/a>，本篇會介紹另類的 Git 自架服務選擇 &lt;a href="http://gitea.io/">Gitea&lt;/a>，在介紹之前可以先參考我在 2014 年寫了一篇用 &lt;a href="https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/">Go 語言開發的 Git 服務叫做 Gogs&lt;/a>。&lt;/p></description></item><item><title>用 drone-line 架設 Line webhook 及發送訊息</title><link>https://blog.wu-boy.com/2016/12/send-line-message-using-drone-line/</link><pubDate>Sun, 18 Dec 2016 07:57:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/12/send-line-message-using-drone-line/</guid><description>&lt;p>&lt;a href="https://i2.wp.com/c5.staticflickr.com/1/318/31555289732_f79a194057_c.jpg?ssl=1">&lt;img src="https://i2.wp.com/c5.staticflickr.com/1/318/31555289732_f79a194057_c.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>之前寫了一篇教學『&lt;a href="https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/">用 Docker 發送 Line 訊息&lt;/a>』，但是前提是你要先學會 &lt;a href="https://www.docker.com/">Docker&lt;/a>，對於完全沒有 Docker 經驗的初學者來說，學習起來相當不容易，所以我將 drone-line 編譯出 Linux, Mac OS X 或 Windows 都可以執行的 Binary 檔案，方便初學者可以直接下載執行檔，在任何環境都可以運作，請直接參考 &lt;a href="https://github.com/appleboy/drone-line/releases/tag/v1.4.0">v1.4.0 Release&lt;/a> 頁面，如果還是想用 Docker 版本的，可以直接參考 &lt;a href="https://hub.docker.com">Docker Hub&lt;/a> 上的 &lt;a href="https://hub.docker.com/r/appleboy/drone-line/">drone-line repo&lt;/a>，底下會教大家如何執行 Line webhook service 及發送訊息，尚未申請 Line Developer 帳號，請直接參考&lt;a href="https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/">前一篇教學&lt;/a>&lt;/p></description></item><item><title>輕量級 Gofight 支援 Echo 框架測試</title><link>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</link><pubDate>Thu, 17 Nov 2016 15:19:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">Gofight&lt;/a> 是一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫的輕量級測試工具，專門測試 Golang Web Framework API，可以參考之前一篇教學: &lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">用 gofight 來測試 golang web API handler&lt;/a>，在 &lt;a href="https://echo.labstack.com/">Echo&lt;/a> 框架發布 &lt;a href="https://github.com/labstack/echo/releases/tag/v3.0.0">v3.0.0&lt;/a> 之前，Echo 不支援 golang 標準的 &lt;code>http.Request&lt;/code> 及 &lt;code>http.ResponseWriter&lt;/code>，反倒是支援 &lt;a href="https://github.com/valyala/fasthttp">fasthttp&lt;/a>，所以我發了 &lt;a href="https://github.com/labstack/echo/issues/439">Issue&lt;/a> 希望作者可以支援原生的 http 標準，最後沒有得到回應。就在前幾天 Echo 在 v3.0.0 版本把 &lt;code>fasthttp&lt;/code> 拿掉，這樣 Gofight 就可以移除特定函示，改用原生 http。&lt;/p></description></item><item><title>用 Docker 發送 Line 訊息</title><link>https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</link><pubDate>Tue, 15 Nov 2016 08:48:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年各家網路公司 (&lt;a href="https://www.facebook.com">Facebook&lt;/a>, &lt;a href="https://line.me/">Line&lt;/a> 和 &lt;a href="https://telegram.org/">Telegram&lt;/a>&amp;hellip;) 分別推出 Bot 服務，看起來 Bot 會是未來趨勢，對 Bot 不是很了解的話，可以參考 Eric ShangKuan 寫了一篇: &lt;a href="https://medium.com/@ericsk/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%B0%8D%E8%AB%87%E6%A9%9F%E5%99%A8%E4%BA%BA-bot-%E7%9A%84%E5%85%A9%E4%B8%89%E4%BA%8B-f28f1a0ce7c4#.uuo64bw2e">關於寫對談機器人 (bot) 的兩三事&lt;/a>。本篇會介紹如何透過 &lt;a href="https://www.docker.com/">Docker&lt;/a> 整合 &lt;a href="https://business.line.me/en/services/bot">Line Message API&lt;/a>，下面所有指令都會跟 Docker 有關，但是程式碼都是用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫，想說順便在台灣推廣 ^__^。就在今年四月 Line 推出第一版 SDK，但是到了九月，突然收到 Line 的通知，說舊版的不支援了，請大家換到&lt;a href="https://devdocs.line.me/en">新板 API&lt;/a>，最近更動到新版本時，踩到官網 UI 的雷就是原來 Line 有分 Developer 跟一般帳號，這兩種差別就是在於有無&lt;code>主動 Push Message&lt;/code> 功能，後來在 &lt;a href="https://github.com/line/line-bot-sdk-go">Line-Go-SDK&lt;/a> 發問才找到&lt;a href="https://github.com/line/line-bot-sdk-go/issues/32#issuecomment-260235045">解答&lt;/a>。底下會一步一步教大家如何透過 Docker 發送 Line 訊息。&lt;/p></description></item><item><title>Drone CI Server 搭配 Atlassian Bitbucket Server (前身 Stash)</title><link>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</link><pubDate>Tue, 13 Sep 2016 03:25:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29645454615/in/dateposted-public/" title="Screen Shot 2016-09-13 at 10.36.58 AM">&lt;img src="https://i2.wp.com/c8.staticflickr.com/9/8044/29645454615_79d329eacb_z.jpg?resize=640%2C361&amp;#038;ssl=1" alt="Screen Shot 2016-09-13 at 10.36.58 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>目前團隊是使用 &lt;a href="https://www.atlassian.com/software/bitbucket/server">Atlassian Bitbucket&lt;/a> 搭配 &lt;a href="https://www.atlassian.com/software/bamboo">Bamboo&lt;/a>，雖然 Bamboo 搭配自家的 Bitbucket (前身是 Stash Server) 整合得相當不錯，但是個人覺得設定上蠻複雜的，所以才想測試看看其他家 CI Service 對團隊學習及設定上更容易。最近找到一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 寫的 CI Server 就是 &lt;a href="https://drone.io/">Drone&lt;/a>，Drone &lt;a href="http://readme.drone.io/">線上文件&lt;/a>提供了 &lt;a href="https://github.com/">Github&lt;/a>, &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a>, Bitbucket (Stash) 等整合。在整合 Drone 搭配 Bitbucket 時，文件寫得不是很清楚，尤其是在 Bitbucket 建立 Application Link 遇到許多問題，官方文件也沒寫得很清楚，故寫此篇記錄如何將 Drone 服務整合 Bitbucket 伺服器。&lt;/p></description></item><item><title>2016 COSCUP 用 Golang 寫 Microservices</title><link>https://blog.wu-boy.com/2016/08/build-microservices-in-golang/</link><pubDate>Sun, 21 Aug 2016 10:18:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/08/build-microservices-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://coscup.org">COSCUP&lt;/a> 投稿『&lt;a href="http://coscup.org/2016/schedules.html#H07">用 Golang 寫 Microservice&lt;/a>』，這場議程最主要是介紹 &lt;a href="https://golang.org/">Golang&lt;/a> 入門篇，以及用了哪些 Golang Library 在 &lt;a href="https://en.wikipedia.org/wiki/Microservices">Microservices&lt;/a> 上，目的希望能多推廣 Golang 語言在 Server 開發上，將來能更多公司導入使用。底下是今年的簡報及大綱:&lt;/p></description></item><item><title>在 Jenkins 跑 Golang 測試</title><link>https://blog.wu-boy.com/2016/08/golang-tesing-on-jenkins/</link><pubDate>Tue, 02 Aug 2016 03:24:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/08/golang-tesing-on-jenkins/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>本篇會紀錄如何在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 測試 &lt;a href="https://golang.org/">Golang&lt;/a> 專案，直接拿 &lt;a href="https://github.com/appleboy/go-hello">go-hello&lt;/a> 當作本篇範例。&lt;/p></description></item><item><title>新的 code coverage 線上服務 codecov.io</title><link>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</link><pubDate>Sat, 16 Jul 2016 07:50:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/28259851031/in/dateposted-public/" title="Screen Shot 2016-07-16 at 3.04.50 PM">&lt;img src="https://i1.wp.com/c8.staticflickr.com/9/8684/28259851031_de845f4e56_z.jpg?resize=640%2C355&amp;#038;ssl=1" alt="Screen Shot 2016-07-16 at 3.04.50 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>代碼覆蓋率 (code coverage) 是開發流程蠻重要的一環，用來評估專案內測試的覆蓋率，也代表了自己寫的程式，至少要測試過一次。在 &lt;a href="https://github.com">Github&lt;/a> 上面最常用的一套就是 &lt;a href="https://coveralls.io/">Coveralls&lt;/a> 相信大家對於此服務並不陌生，一個好的 Open Source 專案一定會在 Readme 上附上 Coveralls badge，證明自己寫的專案都有經過測試，請安心使用。在導入 Coveralls 服務到專案內時，安裝步驟有點小複雜，雖然不難，但是還是需要安裝一些 Tool 才能完成，底下用 &lt;a href="https://golang.org/">Golang&lt;/a> 為例。&lt;/p></description></item><item><title>ScaleDrone Websocket 平台從 Node.js 轉換到 Golang</title><link>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</link><pubDate>Sun, 22 May 2016 07:51:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>又看到一間網路平台公司從 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 跳到 &lt;a href="https://golang.org/">Golang&lt;/a> 了。&lt;a href="http://www.scaledrone.com">ScaleDrone&lt;/a> 是一間提供了 &lt;a href="https://en.wikipedia.org/wiki/WebSocket">websocket&lt;/a> 服務的公司，讓 web 可以透過 ScaleDrone 即時將訊息傳播到各種瀏覽器，但是今天看到 ScaleDrone 即將把後端平台使用的語言從 &lt;a href="http://blog.scaledrone.com/posts/nodejs-to-go">Node.js 轉換到 Golang&lt;/a>，為什麼要轉語言呢，官方提到大量的 Websocket 連線，讓伺服器記憶體快吃不消了，然而 ScaleDrone 用 Go 語言來實際測試，發現記憶體不但沒有增加，反而還降低了 response 及 connections 時間。底下是針對 Node.js vs Go 語言轉換比較。&lt;/p></description></item><item><title>在 Github 專案內搜尋 Golang 函式，Golang 開發者必裝 Chrome Extension</title><link>https://blog.wu-boy.com/2016/05/sourcegraph-chrome-extension-for-github/</link><pubDate>Sun, 08 May 2016 13:20:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/sourcegraph-chrome-extension-for-github/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在 IDE 編輯器我們可以用內建的 go to definition 直接跳到該函式，但是身為工程師，每天接觸最多的就是觀看 &lt;a href="https://github.com">Github&lt;/a> 程式碼，有沒有什麼方式可以透過 Web 介面直接搜尋專案內 &lt;a href="https://golang.org/">Golang&lt;/a> 所有函式，讓 Golang 開發者快速跳到該函式，這時就要來安裝 &lt;a href="https://sourcegraph.com/blog/announcing-the-sourcegraph-chrome-extension-for/">Sourcegraph Chrome extension for GitHub&lt;/a> 啦。&lt;/p></description></item><item><title>Golang 套件管理工具 Glide</title><link>https://blog.wu-boy.com/2016/05/package-management-for-golang-glide/</link><pubDate>Thu, 05 May 2016 01:00:15 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/package-management-for-golang-glide/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>套件版本管理已經是各大語言不可或缺的工具，像是 &lt;a href="%C2%A0https://nodejs.org/en/">Node.js&lt;/a> 有 &lt;a href="https://www.npmjs.com/">npm&lt;/a>，&lt;a href="https://php.net">PHP&lt;/a> 有 &lt;a href="https://getcomposer.org/">Composer&lt;/a>，&lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 有 &lt;a href="https://rvm.io/">RVM&lt;/a> 等&amp;hellip;，都已經發展很成熟了，但是在 &lt;a href="https://golang.org/">Golang&lt;/a> 語言呢，在 Go 1.5 以後的版本，可以透過 &lt;code>GO15VENDOREXPERIMENT&lt;/code> 或 &lt;a href="https://glide.sh/">Glide&lt;/a> 來管理套件版本，在 Go 官方網站也有整理一份 &lt;a href="https://github.com/golang/go/wiki/PackageManagementTools">Wiki&lt;/a>，開發者可以選一套適合自己的來使用，而今天要介紹這套 &lt;a href="https://github.com/Masterminds/glide">Glide&lt;/a>，在開始之前，大家先來了解 Go 提出的 &lt;code>vendor experiment&lt;/code>。&lt;/p></description></item><item><title>在 linkit smart 7688 寫 golang</title><link>https://blog.wu-boy.com/2016/04/write-golang-in-linkit-smart-7688/</link><pubDate>Sun, 24 Apr 2016 17:06:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/write-golang-in-linkit-smart-7688/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/26010372204/in/dateposted-public/" title="7688_7688duo">&lt;img src="https://i0.wp.com/farm2.staticflickr.com/1545/26010372204_a1dcf1e0fc_z.jpg?resize=640%2C391&amp;#038;ssl=1" alt="7688_7688duo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興 &lt;a href="http://www.mediatek.com/zh-TW/">Mediatek&lt;/a> 在去年推出 &lt;a href="https://labs.mediatek.com/site/global/developer_tools/mediatek_linkit_smart_7688/whatis_7688/index.gsp">linkit smart 7688&lt;/a> 開發版，你可以把 7688 想成是一台迷你型 Router，如果不來拿開發，也可以當家用 Router 也是不錯的。7688 讓開發者可以在上面寫 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a>, Python 及 Native C，光是聽到 Node.js 就很興奮，用 JavaScript 控制硬體。但是本篇要介紹如何在 7688 執行 &lt;a href="https://golang.org/">Golang&lt;/a> 程式，其實不難，只要把 &lt;a href="https://openwrt.org/">OpenWrt&lt;/a> 支援 &lt;a href="https://golang.org/doc/install/gccgo">gccgo&lt;/a> 及 &lt;a href="https://github.com/golang/gofrontend/tree/master/libgo">libgo&lt;/a> 即可。&lt;strong>底下步驟同步於我的 &lt;a href="https://github.com/appleboy/linkit-smart-7688-golang">Github Repo&lt;/a>&lt;/strong>&lt;/p></description></item><item><title>用 gofight 來測試 golang web API handler</title><link>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</link><pubDate>Wed, 06 Apr 2016 07:18:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>身為一位後端工程師，如果專案初期階段不導入測試，等到專案越來越大時，您就會發現，解了一個 bug，又產生好多個額外 bug，讓產品一直處於不穩定狀態。後端最主要提供前端或手機端 RESTFul API，所以今天來介紹一套 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 工具，用來測試 &lt;a href="https://golang.org/">Golang&lt;/a> 的 http &lt;a href="https://golang.org/pkg/net/http/#Handler">handler&lt;/a>，讓開發者可以送 Form, JSON, Raw 資料，後端處理後，可以拿到 response 資料，透過 &lt;a href="https://github.com/stretchr/testify">Testify&lt;/a> 來測試資料是否符合需求。&lt;/p>
&lt;p>目前大部份的 Golang Web Framework 都可以透過 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 來測試，除非作者有把 &lt;code>ServeHTTP&lt;/code> 改成自己定義 Response，不然基本上都是可以支援的，我自己測試了 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a>, &lt;a href="https://github.com/gorilla/mux">Mux&lt;/a>, &lt;a href="https://github.com/julienschmidt/httprouter">HttpRouter&lt;/a> 都是可以使用的，底下來看看 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 該如何使用。&lt;/p></description></item><item><title>Golang 發佈 1.6 正式 Release</title><link>https://blog.wu-boy.com/2016/02/golang-1-6-release/</link><pubDate>Thu, 18 Feb 2016 02:12:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/golang-1-6-release/</guid><description>今天 golang 正式發佈 1.6 版本，趕快到官方網站下載使用，如果你是用 gvm，直接下 gvm install go1.6 即可。golang wiki 提供了很多 Package Management Tools，可以隨意選一套來使用。底下整理幾點 1.6 的改變：
重大改變 正式支援 HTTP/2 協定，跑 https 會預設啟動 HTTP/2 Go 1.5 介紹了實驗性質的 vendor，在 1.6 還是會支援 GO15VENDOREXPERIMENT 變數，但是預設值為 1，在 1.7 會正式將此變數拿掉 預設用 cgo 來編譯分享 golang 指標與 C 之間溝通 支援 Linux on 64-bit MIPS 和 Android on 32-bit x86 架構 在 FreeBSD 上面預設使用 clang 而不是 gcc 效能議題 官方說無從比較，有些程式碼可能在 1.6 比較快，也有可能在 1.5 會比較快，但是在 garbage collector 上面 1.6 會比 1.</description></item><item><title>在 MAC OS 快速又簡單安裝 Docker 環境 – dlite</title><link>https://blog.wu-boy.com/2016/02/the-simplest-way-to-use-docker-on-os-x-dlite/</link><pubDate>Mon, 15 Feb 2016 08:40:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/the-simplest-way-to-use-docker-on-os-x-dlite/</guid><description>在 Mac OS X 底下安裝 Docker 服務不難，只需要到 Docker Mac 教學網站下載 Docker Toolbox，就可以使用 docker-machine, docker, docker-compose 等指令操作 Docker 服務。本篇提供另外一種工具，讓 Mac 開發者可以快速使用 Docker 服務，就是這套用 Go 語言寫的 dlite 工具。
安裝方式 dlite 提供三種方式安裝
直接下載執行檔案 (推薦) (下載連結) 直接透過 brew 指令安裝: brew install dlite 開發者模式: git clone 專案，然後下 make dlite 產生執行檔案 請大家直接使用第一種方式安裝即可。
使用方式 安裝 dlite 需要使用到磁碟空間及記憶體，你可以動態指定 memory 使用量，或者是磁碟空間，詳細指令可以透過 dlite install -h 觀看
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ sudo dlite install -h Usage: dlite [OPTIONS] install [install-OPTIONS] creates an empty disk image, downloads the os, saves configuration and creates a launchd agent Help Options: -h, --help Show this help message [install command options] -c, --cpus= number of CPUs to allocate (default: 1) -d, --disk= size of disk in GiB to create (default: 20) -m, --memory= amount of memory in GiB to allocate (default: 2) -s, --ssh-key= path to public ssh key (default: $HOME/.</description></item><item><title>TJ 的新作品 frontend boilerplate 前端工具整合</title><link>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</link><pubDate>Thu, 31 Dec 2015 01:26:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</guid><description>今天突然看到 TJ 開了一個新 Repo 是 frontend boilerplate 嚇到我了，自從 TJ 去年發表要轉向 Go 之後，就把他自己很多的 Node.js Project 轉給其他人維護，也漸漸沒在 Github 上面活動，但是今天又看到她整理了一份 frontend boilerplate，內容含了現代流行的前端開發工具，大家可以參考看看，是個不錯的 Template:
Webpack React Redux Babel Autoprefixer PostCSS CSS modules Rucksack Hot reloading Redux router Redux effects TodoMVC example 期待 TJ 能有其他新作品啊。</description></item><item><title>用 Go 語言寫的 Github Git 服務</title><link>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</link><pubDate>Mon, 07 Apr 2014 07:22:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</guid><description>&lt;img src="https://i1.wp.com/farm4.staticflickr.com/3762/13686798143_dd15f54076_o.png?w=840&amp;#038;ssl=1" alt="null" data-recalc-dims="1" />
&lt;p>最近看到大陸那邊用 &lt;a href="http://golang.org/">Go&lt;/a> 語言寫了一套類似 &lt;a href="https://github.com/">Github&lt;/a> 服務叫做 &lt;a href="https://github.com/gogits/gogs">Gogs&lt;/a>(Go Git Service)，目前個人裝起來速度方面相當快，跟 &lt;a href="http://gitlab.org">GitLab&lt;/a> 用 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 寫的 Git Service 速度有差，以功能完整性來說，GitLab 還是大勝 Gogs，安裝方式則是 Gogs 勝於 GitLab，如果最後要推薦用 Gogs 還是 GitLab，我個人還是會選 GitLab 因為畢竟還是要搭配 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a> 等 CI 服務才能發揮作用，這次來筆記如何在 Ubuntu 上安裝 Gogs。&lt;/p></description></item></channel></rss>