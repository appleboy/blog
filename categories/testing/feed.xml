<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/categories/testing/</link><description>Recent content in Testing on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 25 Sep 2018 01:20:29 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/categories/testing/feed.xml" rel="self" type="application/rss+xml"/><item><title>gofight 支援多個檔案上傳測試</title><link>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</link><pubDate>Tue, 25 Sep 2018 01:20:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 HTTP API 測試套件，之前已經寫過&lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">一篇介紹用法&lt;/a>，當時候尚未支援檔案上傳測試，也就是假設寫了一個&lt;a href="https://github.com/gin-gonic/gin/#upload-files">檔案上傳的 http handler&lt;/a> 在專案內如何寫測試，底下來看看該如何使用。&lt;/p></description></item><item><title>輕量級 Gofight 支援 Echo 框架測試</title><link>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</link><pubDate>Thu, 17 Nov 2016 15:19:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">Gofight&lt;/a> 是一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫的輕量級測試工具，專門測試 Golang Web Framework API，可以參考之前一篇教學: &lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">用 gofight 來測試 golang web API handler&lt;/a>，在 &lt;a href="https://echo.labstack.com/">Echo&lt;/a> 框架發布 &lt;a href="https://github.com/labstack/echo/releases/tag/v3.0.0">v3.0.0&lt;/a> 之前，Echo 不支援 golang 標準的 &lt;code>http.Request&lt;/code> 及 &lt;code>http.ResponseWriter&lt;/code>，反倒是支援 &lt;a href="https://github.com/valyala/fasthttp">fasthttp&lt;/a>，所以我發了 &lt;a href="https://github.com/labstack/echo/issues/439">Issue&lt;/a> 希望作者可以支援原生的 http 標準，最後沒有得到回應。就在前幾天 Echo 在 v3.0.0 版本把 &lt;code>fasthttp&lt;/code> 拿掉，這樣 Gofight 就可以移除特定函示，改用原生 http。&lt;/p></description></item><item><title>Drone CI Server 搭配 Atlassian Bitbucket Server (前身 Stash)</title><link>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</link><pubDate>Tue, 13 Sep 2016 03:25:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29645454615/in/dateposted-public/" title="Screen Shot 2016-09-13 at 10.36.58 AM">&lt;img src="https://i2.wp.com/c8.staticflickr.com/9/8044/29645454615_79d329eacb_z.jpg?resize=640%2C361&amp;#038;ssl=1" alt="Screen Shot 2016-09-13 at 10.36.58 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>目前團隊是使用 &lt;a href="https://www.atlassian.com/software/bitbucket/server">Atlassian Bitbucket&lt;/a> 搭配 &lt;a href="https://www.atlassian.com/software/bamboo">Bamboo&lt;/a>，雖然 Bamboo 搭配自家的 Bitbucket (前身是 Stash Server) 整合得相當不錯，但是個人覺得設定上蠻複雜的，所以才想測試看看其他家 CI Service 對團隊學習及設定上更容易。最近找到一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 寫的 CI Server 就是 &lt;a href="https://drone.io/">Drone&lt;/a>，Drone &lt;a href="http://readme.drone.io/">線上文件&lt;/a>提供了 &lt;a href="https://github.com/">Github&lt;/a>, &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a>, Bitbucket (Stash) 等整合。在整合 Drone 搭配 Bitbucket 時，文件寫得不是很清楚，尤其是在 Bitbucket 建立 Application Link 遇到許多問題，官方文件也沒寫得很清楚，故寫此篇記錄如何將 Drone 服務整合 Bitbucket 伺服器。&lt;/p></description></item><item><title>在 Jenkins 跑 Golang 測試</title><link>https://blog.wu-boy.com/2016/08/golang-tesing-on-jenkins/</link><pubDate>Tue, 02 Aug 2016 03:24:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/08/golang-tesing-on-jenkins/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>本篇會紀錄如何在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 測試 &lt;a href="https://golang.org/">Golang&lt;/a> 專案，直接拿 &lt;a href="https://github.com/appleboy/go-hello">go-hello&lt;/a> 當作本篇範例。&lt;/p></description></item><item><title>在 Travis 升級 Docker 和 docker-compose 版本</title><link>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</link><pubDate>Mon, 25 Jul 2016 13:10:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://travis-ci.org/">Travis&lt;/a> 是在 &lt;a href="https://github.com/">Github&lt;/a> 上常用的整合測試服務，支援了各種程式語言 &lt;a href="https://golang.org/">Golang&lt;/a>, PHP, Node.js ..等測試及部署，也同時支援了一些常用 Service，像是 &lt;a href="https://www.docker.com/">Docker&lt;/a>, Redis 或 Database。這次來聊聊&lt;a href="https://docs.travis-ci.com/user/docker/">在 Travis 如何使用 Docker&lt;/a>，在 Travis 內建的 Docker 跟 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 版本都是非常舊，所以使用預設的 docker-compose 指令常常會出現 (詳細 build log 可以參考&lt;a href="https://travis-ci.org/appleboy/golang-testing/jobs/147125401">這裡&lt;/a>)&lt;/p></description></item><item><title>用 gofight 來測試 golang web API handler</title><link>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</link><pubDate>Wed, 06 Apr 2016 07:18:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>身為一位後端工程師，如果專案初期階段不導入測試，等到專案越來越大時，您就會發現，解了一個 bug，又產生好多個額外 bug，讓產品一直處於不穩定狀態。後端最主要提供前端或手機端 RESTFul API，所以今天來介紹一套 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 工具，用來測試 &lt;a href="https://golang.org/">Golang&lt;/a> 的 http &lt;a href="https://golang.org/pkg/net/http/#Handler">handler&lt;/a>，讓開發者可以送 Form, JSON, Raw 資料，後端處理後，可以拿到 response 資料，透過 &lt;a href="https://github.com/stretchr/testify">Testify&lt;/a> 來測試資料是否符合需求。&lt;/p>
&lt;p>目前大部份的 Golang Web Framework 都可以透過 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 來測試，除非作者有把 &lt;code>ServeHTTP&lt;/code> 改成自己定義 Response，不然基本上都是可以支援的，我自己測試了 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a>, &lt;a href="https://github.com/gorilla/mux">Mux&lt;/a>, &lt;a href="https://github.com/julienschmidt/httprouter">HttpRouter&lt;/a> 都是可以使用的，底下來看看 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 該如何使用。&lt;/p></description></item><item><title>Ruby Compass and Sass Auto Testing Environment</title><link>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</link><pubDate>Tue, 11 Mar 2014 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6213260474/" title="Compass Home Compass Documentation by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm7.static.flickr.com/6217/6213260474_e0e51eeefe_o.png?resize=486%2C110&amp;#038;ssl=1" alt="Compass Home Compass Documentation" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://compass-style.org/">Compass&lt;/a> 是一套 CSS Authoring Framework，也是基於 &lt;a href="http://sass-lang.com/">Sass&lt;/a> 語法的一套 Framework，先前寫了 &lt;a href="http://gulpjs.com/">Gulp&lt;/a> 的 &lt;a href="https://github.com/appleboy/gulp-compass">Compass Plugin&lt;/a>，在針對自動化測試時候出現版本相依性不同，造成無法自動測試成功。自動化測試目前跟 &lt;a href="http://github.com">Github&lt;/a> 最常搭配的就是 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 或者是 &lt;a href="https://www.codeship.io/">Codeship&lt;/a>，當然如果非 Open source 專案可能就要自己架設 &lt;a href="http://en.wikipedia.org/wiki/Continuous_integration">CI&lt;/a> 伺服器，個人推薦就是 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a>。這次遇到的問題其實跟 Ruby Gem 版本相依性有關，由於要測試 Compass 所有 Command 語法，所以使用了 &lt;a href="http://susy.oddbird.net/">Susy&lt;/a> + sass + compass，如果在 &lt;code>.travis.yml&lt;/code> 內直接寫&lt;/p></description></item></channel></rss>