<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>https://demo.gh.wu-boy.com/tags/devops/</link><description>Recent content in devops on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 16 Feb 2021 03:46:33 +0000</lastBuildDate><atom:link href="https://demo.gh.wu-boy.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>兩台電腦透過 croc 工具來傳送檔案 (簡單, 加密, 快速)</title><link>https://demo.gh.wu-boy.com/2021/02/share-files-between-two-computer-using-croc-tool/</link><pubDate>Tue, 16 Feb 2021 03:46:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2021/02/share-files-between-two-computer-using-croc-tool/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/VHlioiLpLfqBnh5PnGjYhU6l7dZ2V3PURxz5RfulFL74xYYr4kL5EgkOa-OfLQyIALLgmRIcKlLHnbIENFe0cyv82XQW5ia0HgeNwm4u2ijNsjSQQjkrY4JJjloB_pHTOT-EtxzxOlw=w1920-h1080" alt="croc">&lt;/p>
&lt;p>兩台電腦之間該如何傳送檔案，其實方法有超多種的，像是 FTP 或透過 SSH 方式來傳送檔案，但是這些方法步驟都有點複雜，FTP 需要架設 FTP 服務，SSH 要學習 SCP 指令，那有沒有更好的方式從單一電腦點對點傳送檔案到另一台呢？傳送過程需要快速又要安全，本篇介紹一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>寫的工具叫 &lt;a href="https://github.com/schollz/croc">croc&lt;/a>，詳細的介紹可以參考看看&lt;a href="https://schollz.com/blog/croc6/">作者的 Blog 介紹&lt;/a>，此工具有底下功能及優勢。&lt;/p></description></item><item><title>搶救 Terraform State 檔案</title><link>https://demo.gh.wu-boy.com/2021/02/recovering-terraform-state/</link><pubDate>Sun, 14 Feb 2021 13:59:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2021/02/recovering-terraform-state/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/3ZDBZ2vZbRS1NTRzSg1ftpwIhEltm9iPe4-DFNE4y6yuLxbsvxGd6UQfLwcSvHb-AhGBcmtK36NiWBT1BeUzE8ra713qNV-cFnDk2pSVP_mqpz_MG5bpNg0Yx8jZc2-wlkOTb-xk1FE=w1920-h1080" alt="recovery the terraform state file">&lt;/p>
&lt;p>近期其中一個專案使用 Terraform 來管理 AWS 雲平台，初期預計只有我一個人在使用 Terraform，所以就沒有將 &lt;a href="https://www.terraform.io/docs/language/settings/backends/index.html">Backend State&lt;/a> 放在 AWS S3 進行備份管理，這個粗心大意讓我花了大半時間來搶救 State (.tfstate) 檔案，而搶救過程也是蠻順利的，只是需要花時間用 &lt;strong>&lt;a href="https://www.terraform.io/docs/cli/import/index.html">terraform import&lt;/a>&lt;/strong> 指令將所有的 State 狀態全部轉回來一次，當然不是每個 Resource 都可以正常運作，還是需要搭配一些修正才能全部轉換。&lt;/p>
&lt;p>結論: 請使用 &lt;code>terraform import&lt;/code> 指令，這是最終解法。&lt;/p></description></item><item><title>Drone 支援單機版安裝 (內附影片)</title><link>https://demo.gh.wu-boy.com/2018/11/install-drone-in-single-machine/</link><pubDate>Mon, 26 Nov 2018 03:43:35 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/11/install-drone-in-single-machine/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32181752988/in/dateposted-public/" title="Screen Shot 2018-11-26 at 11.40.28 AM">&lt;img src="https://i0.wp.com/farm5.staticflickr.com/4820/32181752988_0112dca2a5_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-11-26 at 11.40.28 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在上週寫了『&lt;a href="https://blog.wu-boy.com/2018/11/drone-release-1-0-0-rc1/">Drone 推出 1.0.0 RC1 版本&lt;/a>』介紹，裡面提到一個很重要的改變，就是 Drone 現在支援『單機版』安裝了，你會問什麼是單機版安裝？以前不就是可以支援在單台機器把 Drone 給架設起來，那在 1.0.0 RC1 版本指的是什麼意思？在之前的版本，要完整的安裝完成 Drone，需要架設 drone server 及 drone agent，但是在 1.0 版本之後，只需要一個 drone 服務，裡面就內建了 server 及 agent，這很適合用在團隊非常小的狀況底下來快速安裝 drone，假設團隊專案很多，或者是成長很快，建議還是將 server 及 agent 分開架設，未來只需要擴充 agent 即可，底下來看看該如何架設單機版 drone。&lt;/p></description></item><item><title>[影片教學] 使用 Filter 將專案跑在特定 Drone Agent 服務</title><link>https://demo.gh.wu-boy.com/2018/04/how-to-use-filter-in-drone/</link><pubDate>Sun, 15 Apr 2018 15:26:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/04/how-to-use-filter-in-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://drone.io">Drone&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 CI/CD &lt;a href="https://github.com/drone/drone">開源專案&lt;/a>，是由一個 Server 跟多個 Agent 所組成，Agent 上面必須安裝好 &lt;a href="https://www.docker.com">Dokcer&lt;/a> 才可以順利測試及部署，但是團隊內會出現一個狀況，每個專案的測試及部署方式不同，有的測試需要 Agent 很多 CPU 或記憶體資源，有的小專案則不需要那麼多，但是當大專案把 agent 系統資源吃光，其他專案都跑不動了，這邊的解決方式就是再建立一台新的 Agent 服務，將需要大量資源的專案跑在該台新的 Agent，Drone 這邊有支援 &lt;code>filter&lt;/code> 功能，讓開發者可以指定專案要跑在哪一台 Agent 上。底下來教大家如何設定 drone filter。&lt;/p></description></item><item><title>Drone CI/CD 系統簡介</title><link>https://demo.gh.wu-boy.com/2018/01/introduction-to-drone-cicd/</link><pubDate>Thu, 18 Jan 2018 02:27:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/01/introduction-to-drone-cicd/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/38854798135/in/dateposted-public/" title="Screen Shot 2018-01-18 at 10.21.43 AM">&lt;img src="https://i1.wp.com/farm5.staticflickr.com/4660/38854798135_a4ed025e7f_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-01-18 at 10.21.43 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>很高興到 &lt;a href="https://www.facebook.com/groups/GCPUG.TW/">GCPUG.TW&lt;/a> 分享『Drone CI/CD 系統簡介』，會議介紹了 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 系統架構，這套是由 &lt;a href="https://golang.org">Go 語言&lt;/a>所開發，前兩年我參加了 Drone 開源專案的開發，也貢獻了數個 &lt;a href="http://plugins.drone.io/">Drone Plugin&lt;/a>，去年我正式開始宣傳 Drone 的好處及優勢，以及為什麼要從 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://jenkins.io/">GitLab CI&lt;/a> 轉換到 Drone，會議大綱如下，很感謝 &lt;a href="https://www.qnap.com/zh-tw/">QNAP&lt;/a> 提供現場直播及錄影。&lt;/p></description></item><item><title>用 Go 語言減少 node_modules 容量來加速部署</title><link>https://demo.gh.wu-boy.com/2017/11/downsize-node-modules-with-golang/</link><pubDate>Tue, 21 Nov 2017 02:40:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/11/downsize-node-modules-with-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">減少 node_modules 大小來加速部署 Node.js 專案&lt;/a>』文章，透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令可以移除不必要的模組，剩下的模組佔據整個專案大部分容量，那該如何針對留下的模組來瘦身呢？這週看到 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 大神 &lt;a href="https://github.com/tj">TJ&lt;/a> 又發了一個 &lt;a href="https://golang.org">Go 語言&lt;/a>專案叫做 &lt;a href="https://github.com/tj/node-prune">node-prune&lt;/a>，此專案用來移除在 &lt;code>node_modules&lt;/code> 內不必要的檔案，那哪些才是不必要的檔案呢？&lt;/p></description></item><item><title>為什麼我用 Drone 取代 Jenkins 及 GitLab CI</title><link>https://demo.gh.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</link><pubDate>Thu, 07 Sep 2017 02:58:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36906030282/in/dateposted-public/" title="Logo-DevOpsDays">&lt;img src="https://farm5.staticflickr.com/4382/36906030282_f489c96be3_z.jpg" alt="Logo-DevOpsDays">&lt;/a>&lt;/p>
&lt;p>終於有機會正式跟大家介紹為什麼我會捨棄 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 跟 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a>，取而代之的是用 &lt;a href="https://golang.org">Go&lt;/a> 語言寫的 &lt;a href="https://github.com/drone/drone">Drone&lt;/a>。今年很高興錄取台灣第一屆 &lt;a href="https://devopsdays.tw/">DevOps Day&lt;/a> 講師，在今年主題是『用 Drone 打造輕量級容器持續交付平台』，主要推廣這套 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 工具，會議內容圍繞在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a>, &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 跟 Drone 的比較。也提到為什麼我不用 Jenkins 及 GitLab CI 的幾個原因。底下整理議程大綱。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>為什麼選擇 Drone&lt;/li>
&lt;li>Drone 基礎簡介&lt;/li>
&lt;li>Drone 架構擴展&lt;/li>
&lt;li>Drone 安裝方式&lt;/li>
&lt;li>Drone 管理介面&lt;/li>
&lt;li>Drone 測試部署&lt;/li>
&lt;li>Drone 自訂套件&lt;/li>
&lt;/ul></description></item><item><title>用 Go 語言打造微服務架構</title><link>https://demo.gh.wu-boy.com/2017/08/microservice-in-go/</link><pubDate>Fri, 11 Aug 2017 08:17:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/08/microservice-in-go/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://modernweb.tw/">ModernWeb&lt;/a> 講『用 Go 語言打造微服務架構』，蠻開心看到底下很多 &lt;a href="https://golang.org">Go&lt;/a> 開發者，希望未來能有更多公司導入 Go 語言，底下是會議大綱:&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>Microservices vs. Monolithic 差異&lt;/li>
&lt;li>微服務核心架構 (Go 工具專案)&lt;/li>
&lt;li>Go 語言核心高並發&lt;/li>
&lt;li>為什麼選用 Go 語言&lt;/li>
&lt;li>微服務代價跟準備&lt;/li>
&lt;/ul></description></item><item><title>2017 COSCUP 研討會: Gitea + Drone 介紹</title><link>https://demo.gh.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</link><pubDate>Mon, 07 Aug 2017 06:23:26 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/08/2017-coscup-introduction-to-gitea-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36020937670/in/dateposted-public/" title="gitea-lg">&lt;img src="https://farm5.staticflickr.com/4377/36020937670_fbcf1ee3d3_z.jpg" alt="gitea-lg">&lt;/a>&lt;/p>
&lt;p>今年很高興可以到 &lt;a href="http://coscup.org/2017">COSCUP&lt;/a> 分享『&lt;strong>Gitea + Drone 介紹&lt;/strong>』，我是在第二天的最後一場來做分享，最後還被大會進來趕人，講超過時間了。這次是我第一次到&lt;a href="http://www.coss.ntu.edu.tw/">台大社科院&lt;/a>，太陽真的好大，兩天下來流的汗水，大概已經是一年份的了。由於今年 COSCUP 不供應午餐，在第一天中午到科技站出口，左轉第一個店面就坐下來吃麵，店面不大，賣傳統小吃，我點了麻醬麵大碗 55 元，燙青菜 35 元，真的很大碗，不知道是不是因為在學校附近的關係，所以特別大碗，我心裡想說，這裡不是台北嗎？&lt;/p></description></item><item><title>減少 node_modules 大小來加速部署 Node.js 專案</title><link>https://demo.gh.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</link><pubDate>Tue, 06 Jun 2017 06:36:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?w=840&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 開發者現在大部分都在使用 &lt;a href="https://yarnpkg.com">Yarn&lt;/a> 了吧？如果還不知道或無法體會 Yarn 帶來的好處可以參考之前寫的一篇『&lt;a href="https://yarnpkg.com">用 Yarn 取代 Npm 管理 JavaScript 套件版本&lt;/a>』，帶你體會 &lt;code>yarn install&lt;/code> vs &lt;code>npm install&lt;/code> 的速度差異。本篇最主要會介紹在部署 Node.js 專案都需要把 node_modules 壓縮一起丟到遠端伺服器 (假設你不是用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 部署)，這時候來聊聊怎麼減少 &lt;code>node_modules&lt;/code> 大小。&lt;/p></description></item><item><title>用 Docker Multi-Stage 編譯出 Go 語言最小 Image</title><link>https://demo.gh.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</link><pubDate>Sat, 29 Apr 2017 13:23:55 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>之前應該沒寫過用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 結合 Go 語言編譯出最小 Image 的文章，剛好趁這機會來介紹。其實網路上可以直接找到文章，像是這篇『&lt;a href="https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/">Building Minimal Docker Containers for Go Applications&lt;/a>』，那本文來介紹 Docker 新功能 &lt;a href="https://github.com/moby/moby/pull/32063">multi-stage builds&lt;/a>，此功能只有在 &lt;a href="https://github.com/moby/moby/releases/tag/v17.05.0-ce-rc1">17.05.0-ce&lt;/a> 才支援，看起來是 2017/05/03 號會 release 出來。我們拿 Go 語言的 Hello World 來介紹 Single build 及 Multiple build。&lt;/p></description></item><item><title>用 Docker 發送 Line 訊息</title><link>https://demo.gh.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</link><pubDate>Tue, 15 Nov 2016 08:48:18 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/11/send-line-notification-using-docker-written-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?w=840&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年各家網路公司 (&lt;a href="https://www.facebook.com">Facebook&lt;/a>, &lt;a href="https://line.me/">Line&lt;/a> 和 &lt;a href="https://telegram.org/">Telegram&lt;/a>&amp;hellip;) 分別推出 Bot 服務，看起來 Bot 會是未來趨勢，對 Bot 不是很了解的話，可以參考 Eric ShangKuan 寫了一篇: &lt;a href="https://medium.com/@ericsk/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%B0%8D%E8%AB%87%E6%A9%9F%E5%99%A8%E4%BA%BA-bot-%E7%9A%84%E5%85%A9%E4%B8%89%E4%BA%8B-f28f1a0ce7c4#.uuo64bw2e">關於寫對談機器人 (bot) 的兩三事&lt;/a>。本篇會介紹如何透過 &lt;a href="https://www.docker.com/">Docker&lt;/a> 整合 &lt;a href="https://business.line.me/en/services/bot">Line Message API&lt;/a>，下面所有指令都會跟 Docker 有關，但是程式碼都是用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫，想說順便在台灣推廣 ^__^。就在今年四月 Line 推出第一版 SDK，但是到了九月，突然收到 Line 的通知，說舊版的不支援了，請大家換到&lt;a href="https://devdocs.line.me/en">新板 API&lt;/a>，最近更動到新版本時，踩到官網 UI 的雷就是原來 Line 有分 Developer 跟一般帳號，這兩種差別就是在於有無&lt;code>主動 Push Message&lt;/code> 功能，後來在 &lt;a href="https://github.com/line/line-bot-sdk-go">Line-Go-SDK&lt;/a> 發問才找到&lt;a href="https://github.com/line/line-bot-sdk-go/issues/32#issuecomment-260235045">解答&lt;/a>。底下會一步一步教大家如何透過 Docker 發送 Line 訊息。&lt;/p></description></item><item><title>用 Yarn 取代 Npm 管理 JavaScript 套件版本</title><link>https://demo.gh.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/</link><pubDate>Thu, 13 Oct 2016 07:19:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/10/replcae-npm-with-yarn-package-management/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?resize=640%2C287&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>新一代戰神 &lt;a href="https://yarnpkg.com/">Yarn&lt;/a> 終於在昨天出爐了，Yarn 跟 &lt;a href="https://www.npmjs.com/">Npm&lt;/a> 一樣都是 JavaScript 套件版本管理工具，但是 Npm 令人詬病的是安裝都是非常的慢，快取機制用起來效果也不是很好，所以 Yarn 的出現解決了這些問題，透過 Yarn 安裝過的套件都會在家目錄產生 Cache (目錄在 &lt;code>~/.yarn-cache/&lt;/code>)，也就是只要安裝過一次，下次砍掉 &lt;code>node_modules&lt;/code> 目錄重新安裝都會從 Cache 讀取。Yarn 詳細的功能架構可以參考 Facebook 發表的 &lt;a href="https://code.facebook.com/posts/1840075619545360">Yarn: A new package manager for JavaScript&lt;/a>，本篇不會教大家怎麼使用 Yarn，因為指令實在是太容易了，可以參考官方提供的&lt;a href="https://yarnpkg.com/en/docs/migrating-from-npm">如何從 npm 轉換到 yarn&lt;/a>，底下則是來測試比較兩者安裝套件的速度。&lt;/p></description></item><item><title>申請 Let’s Encrypt 免費憑證讓網站支援 HTTP2</title><link>https://demo.gh.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/</link><pubDate>Sun, 09 Oct 2016 08:23:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23840721545/in/dateposted-public/" title="Letsencrypt">&lt;img src="https://i1.wp.com/farm6.staticflickr.com/5803/23840721545_e0350b687f.jpg?w=300&amp;#038;ssl=1" alt="Letsencrypt" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>寫這篇最主要推廣讓網站都支援 &lt;a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS 加密連線&lt;/a>及 &lt;a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP2 協定&lt;/a>，對於網站為什麼要支援 HTTP2，可以直接參考 ihower 寫的&lt;a href="https://ihower.tw/blog/archives/8489">說明文章&lt;/a>，最近在玩 Facebook, Line, Telegram Bot 時，填寫 Webhook URL，都強制要填寫 https:// 開頭，所以更不能忽略 HTTPS 了。，去年底寫了一篇 &lt;a href="https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/">Let&amp;rsquo;s Encrypt 開放申請免費 SSL 憑證&lt;/a> 推廣 Let&amp;rsquo;s Encrypt 的貢獻，讓買不起憑證，又想玩看看 HTTP2 的開發者可以用很簡單的方式來安裝及自動更新憑證，而 &lt;a href="https://blog.gslin.org/">gslin&lt;/a> 大為了推廣 HTTPS 也做了一個&lt;a href="https://letsencrypt.tw/">網站教學&lt;/a>，文章寫得相當清楚，支援 &lt;a href="https://httpd.apache.org/">Apache&lt;/a> 及 &lt;a href="https://nginx.org/">Nginx&lt;/a> 設定。&lt;/p></description></item><item><title>SSH agent forwarding 教學</title><link>https://demo.gh.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/</link><pubDate>Wed, 05 Oct 2016 02:09:41 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/</guid><description>&lt;p>&lt;strong>2016.11.13 Update: SSH Agent Forwarding 有安全性問題，請用 &lt;code>ProxyCommand&lt;/code> 取代，請參考 &lt;a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/">SSH Agent Forwarding considered harmful&lt;/a>&lt;/strong> &lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/30008040142/in/dateposted-public/" title="Screen Shot 2016-10-05 at 9.26.13 AM">&lt;img src="https://i0.wp.com/c7.staticflickr.com/6/5219/30008040142_9d50881bba_z.jpg?resize=640%2C371&amp;#038;ssl=1" alt="Screen Shot 2016-10-05 at 9.26.13 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">SSH agent forwarding&lt;/a> 可以讓開發者將 Local 端的 SSH Key Pair 帶到另外一台機器進行傳送，也就是說你不用將 SSH Key 複製到遠端 Server 再進行跳板動作，原本在 AWS 維護多台 EC2 主機，都會固定有一台跳板機，大家都把自己需要登入遠端機器的 SSH Key 複製到跳板機，這做法其實沒有很安全，又需要多下一個指令進行跳板。&lt;/p>
&lt;blockquote>
&lt;p>個人電腦 -&amp;mdash;&amp;gt; EC2 跳板機 -&amp;mdash;&amp;gt; EC2 Server&lt;/p>
&lt;/blockquote>
&lt;p>大家都會把 Key Pair 存放到跳板機，安全性堪憂，只要這台主機被 Hack，或者是內部員工登入，拿別人的 Key Pair 登入其它主機，不就可以搞破壞？所以此篇教學主要教大家如何設定 SSH agent forwarding，讓憑證只存放在自己電腦，而不需上傳到 &lt;code>EC2 跳板機&lt;/code>。這樣跳板機就真的只是跳板機，不需要存放任何憑證資料，每小時設定清空 Ubuntu User 家目錄，避免內部員工放個人資料或憑證，提升主機安全性。&lt;/p></description></item><item><title>Drone CI Server 搭配 Atlassian Bitbucket Server (前身 Stash)</title><link>https://demo.gh.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</link><pubDate>Tue, 13 Sep 2016 03:25:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/09/drone-ci-server-integrate-atlassian-bitbucket-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/29645454615/in/dateposted-public/" title="Screen Shot 2016-09-13 at 10.36.58 AM">&lt;img src="https://i2.wp.com/c8.staticflickr.com/9/8044/29645454615_79d329eacb_z.jpg?resize=640%2C361&amp;#038;ssl=1" alt="Screen Shot 2016-09-13 at 10.36.58 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>目前團隊是使用 &lt;a href="https://www.atlassian.com/software/bitbucket/server">Atlassian Bitbucket&lt;/a> 搭配 &lt;a href="https://www.atlassian.com/software/bamboo">Bamboo&lt;/a>，雖然 Bamboo 搭配自家的 Bitbucket (前身是 Stash Server) 整合得相當不錯，但是個人覺得設定上蠻複雜的，所以才想測試看看其他家 CI Service 對團隊學習及設定上更容易。最近找到一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 寫的 CI Server 就是 &lt;a href="https://drone.io/">Drone&lt;/a>，Drone &lt;a href="http://readme.drone.io/">線上文件&lt;/a>提供了 &lt;a href="https://github.com/">Github&lt;/a>, &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>, &lt;a href="https://gogs.io/">Gogs&lt;/a>, Bitbucket (Stash) 等整合。在整合 Drone 搭配 Bitbucket 時，文件寫得不是很清楚，尤其是在 Bitbucket 建立 Application Link 遇到許多問題，官方文件也沒寫得很清楚，故寫此篇記錄如何將 Drone 服務整合 Bitbucket 伺服器。&lt;/p></description></item><item><title>2016 COSCUP 用 Golang 寫 Microservices</title><link>https://demo.gh.wu-boy.com/2016/08/build-microservices-in-golang/</link><pubDate>Sun, 21 Aug 2016 10:18:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/08/build-microservices-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/p>
&lt;p>今年在 &lt;a href="http://coscup.org">COSCUP&lt;/a> 投稿『&lt;a href="http://coscup.org/2016/schedules.html#H07">用 Golang 寫 Microservice&lt;/a>』，這場議程最主要是介紹 &lt;a href="https://golang.org/">Golang&lt;/a> 入門篇，以及用了哪些 Golang Library 在 &lt;a href="https://en.wikipedia.org/wiki/Microservices">Microservices&lt;/a> 上，目的希望能多推廣 Golang 語言在 Server 開發上，將來能更多公司導入使用。底下是今年的簡報及大綱:&lt;/p></description></item><item><title>在 Jenkins 跑 Golang 測試</title><link>https://demo.gh.wu-boy.com/2016/08/golang-tesing-on-jenkins/</link><pubDate>Tue, 02 Aug 2016 03:24:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/08/golang-tesing-on-jenkins/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>本篇會紀錄如何在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 測試 &lt;a href="https://golang.org/">Golang&lt;/a> 專案，直接拿 &lt;a href="https://github.com/appleboy/go-hello">go-hello&lt;/a> 當作本篇範例。&lt;/p></description></item><item><title>新的 code coverage 線上服務 codecov.io</title><link>https://demo.gh.wu-boy.com/2016/07/new-coverage-service-codecov-io/</link><pubDate>Sat, 16 Jul 2016 07:50:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/07/new-coverage-service-codecov-io/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/28259851031/in/dateposted-public/" title="Screen Shot 2016-07-16 at 3.04.50 PM">&lt;img src="https://i1.wp.com/c8.staticflickr.com/9/8684/28259851031_de845f4e56_z.jpg?resize=640%2C355&amp;#038;ssl=1" alt="Screen Shot 2016-07-16 at 3.04.50 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>代碼覆蓋率 (code coverage) 是開發流程蠻重要的一環，用來評估專案內測試的覆蓋率，也代表了自己寫的程式，至少要測試過一次。在 &lt;a href="https://github.com">Github&lt;/a> 上面最常用的一套就是 &lt;a href="https://coveralls.io/">Coveralls&lt;/a> 相信大家對於此服務並不陌生，一個好的 Open Source 專案一定會在 Readme 上附上 Coveralls badge，證明自己寫的專案都有經過測試，請安心使用。在導入 Coveralls 服務到專案內時，安裝步驟有點小複雜，雖然不難，但是還是需要安裝一些 Tool 才能完成，底下用 &lt;a href="https://golang.org/">Golang&lt;/a> 為例。&lt;/p></description></item><item><title>用一行指令加速 npm install</title><link>https://demo.gh.wu-boy.com/2016/07/speed-up-npm-install-command/</link><pubDate>Sun, 10 Jul 2016 15:44:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/07/speed-up-npm-install-command/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/24588632402/in/dateposted-public/" title="Npm-logo.svg">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1564/24588632402_35c2cab0b6_z.jpg?resize=640%2C249&amp;#038;ssl=1" alt="Npm-logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>不久之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2016/01/speed-up-npm-install/">提升 npm install 安裝速度&lt;/a>，但是發現速度還是沒有變快，在 DevOps 的流程花在 &lt;code>npm install&lt;/code> 的時間非常冗長，造成每次測試或 Deploy 都要花大量時間等待，且吃掉很多機器的資源，本篇要提供一個小技巧改善 npm install 安裝時間，其實簡單來說就是 cache 第一次安裝好的 &lt;code>node_modules&lt;/code> 目錄，之後每次安裝就拿 cache 目錄來新增或減少 packages 即可。&lt;/p></description></item><item><title>在 Docker 偵測 MySQL 或 Postgres 是否啟動</title><link>https://demo.gh.wu-boy.com/2016/06/server-monitoring-mysql-postgres-daemon-in-docker/</link><pubDate>Sat, 11 Jun 2016 08:42:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/06/server-monitoring-mysql-postgres-daemon-in-docker/</guid><description>&lt;p>&lt;a title="Screen Shot 2016-06-11 at 6.58.22 PM" href="https://www.flickr.com/photos/appleboy/27525281071/in/dateposted-public/" data-flickr-embed="true">&lt;img src="https://i2.wp.com/c2.staticflickr.com/8/7626/27525281071_50bc0dec77_o.png?resize=591%2C580&amp;#038;ssl=1" alt="Screen Shot 2016-06-11 at 6.58.22 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>監控 Service 是否存活也是 &lt;a href="http://www.ithome.com.tw/news/96861">DevOps&lt;/a> 重要的一環，此篇來紀錄在 &lt;a href="https://www.docker.com/">Docker&lt;/a> 內偵測 &lt;a href="https://www.mysql.com/">MySQL&lt;/a> 或 &lt;a href="https://www.postgresql.org/">Postgres&lt;/a> 是否已經啟動。在 Docker 自動測試內，其中一步就是建立 Database 環境，底下為測試步驟:&lt;/p></description></item></channel></rss>