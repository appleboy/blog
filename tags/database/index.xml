<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>https://demo.gh.wu-boy.com/tags/database/</link><description>Recent content in database on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 16 May 2021 00:57:45 +0000</lastBuildDate><atom:link href="https://demo.gh.wu-boy.com/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB 效能調校紀錄</title><link>https://demo.gh.wu-boy.com/2021/05/mongodb-performance-tunning/</link><pubDate>Sun, 16 May 2021 00:57:45 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2021/05/mongodb-performance-tunning/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/DZKO3gMs5RhQ0-uGU2Y-uaTsb7HKCJU3lH91uggni5HA-fpDMqgvKPwHRwuo-jlCbAJZYyY9TKKovtCDT7OFgiclb2VYz58HwmDeHUX6FjlwfnuTkaTZxYudTIiuJ6yWsuNu2vs1vTQ=w1920-h1080" title="mongodb">&lt;img src="https://lh3.googleusercontent.com/DZKO3gMs5RhQ0-uGU2Y-uaTsb7HKCJU3lH91uggni5HA-fpDMqgvKPwHRwuo-jlCbAJZYyY9TKKovtCDT7OFgiclb2VYz58HwmDeHUX6FjlwfnuTkaTZxYudTIiuJ6yWsuNu2vs1vTQ=w1920-h1080" alt="mongodb" title="mongodb">&lt;/a>&lt;/p>
&lt;p>最近剛好在實作 &lt;a href="https://prometheus.io/">Prometheus&lt;/a> + &lt;a href="https://grafana.com/">Grafana&lt;/a> 的時候，對 MongoDB 做了容器 CPU 使用率 (&lt;code>container_cpu_usage_seconds_total&lt;/code>) 的監控，Metrics 寫法如下:&lt;/p>
&lt;pre>&lt;code class="language-bash">sum(
rate(container_cpu_usage_seconds_total{name!~"(^$|^0_.*)"}[1m]))
by (name)&lt;/code>&lt;/pre>
&lt;p>從上面的 Metrics 可以拉長時間來看，會發現專案的 MongoDB 非常不穩定，起起伏伏，這時候就需要來看看資料庫到底哪邊慢，以及看看哪個語法造成 CPU 飆高？&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/FbcbJ75SVSEmNb94X6z9JsjkhKmuzjEGUesnTVxwcP2SGYWJpblQaD5ks02brR9kP9HYqP7KpbQAaoa7RUuBWi8EnXdN2eTCzekyGVmKAY4ltnmEnNrWerAzZkHIp9gGKieO71WUhJk=w1920-h1080" alt="">&lt;/p>
&lt;p>接著為了看 MongoDB 的 Log 紀錄，把 Grafana 推出的 &lt;a href="https://grafana.com/oss/loki/">Loki&lt;/a>，也導入專案系統，將容器所有的 Log 都導向 Loki，底下可以看看 docker-compose 將 Log 輸出到 loki&lt;/p>
&lt;pre>&lt;code class="language-yaml="> logging:
driver: loki
options:
loki-url: "http://xxxxxxx/loki/api/v1/push"
loki-retries: "5"
loki-batch-size: "400"
loki-external-labels: "environment=production,project=mongo"&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/TooE3Q49jzI_FpbjXm4b3A_9aho8J4Qws64XmhVzDVbe6NPMCmgYmuw5bMRwnMgmk_lXxNHDU1n6RXwFGvoZvPxLuM6clRJ_ZGRC9S47rvFbm3k9v6v8qaHhC6vqsFkXENQYlRAqKn0=w1920-h1080" alt="">&lt;/p>
&lt;p>先看看結論，做法其實很簡單，找出相對應 Slow Query，把相關的欄位加上 Index，就可以解決了&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/WgyOX8OOff6KGKlOvSvoNxzDsPGyiXBwPa_PX3O7L9AYSBfQ9VoNAP5s_HkbmMa7rokTnF--ZLnJ4p6oLqoTCV2Gyq7B696SEbTIrGIi1kDVtijVpZlYTklq3qbLFtpKGAQHeXxHE-Q=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/nzKkL7J5x_LmoqTFYav5kKA8Jkp4E4s8OCOekd-fz2HAeU2ySC3DopumqMIevqelMN_bvw7Ug7BB2f6ZJeubCQzz4w1Uby709NqsqTEkQcJK7IwVkcHt_ZkArRjSlKfZvyWBE6ZBLnY=w1920-h1080" alt="">&lt;/p></description></item><item><title>用 Docker 每天自動化備份 MySQL, Postgres 或 MongoDB 並上傳到 AWS S3</title><link>https://demo.gh.wu-boy.com/2020/12/docker-image-to-periodically-backup-your-database-mysql-postgres-or-mongodb-to-s3/</link><pubDate>Sat, 12 Dec 2020 12:07:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2020/12/docker-image-to-periodically-backup-your-database-mysql-postgres-or-mongodb-to-s3/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/2SGJ7LZpgVIVuKfhXSgm8fP90GLk7r1jgc4Sm-vAptUx43d28wjbv3r7x6U5BfDmJmfDfTlkhABWU9q20UA5Neg5-CITdqbN-djIeftrhdy2SZde-J2iHQTVdDNh9Ah7MEAzYiYyjDE=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/2SGJ7LZpgVIVuKfhXSgm8fP90GLk7r1jgc4Sm-vAptUx43d28wjbv3r7x6U5BfDmJmfDfTlkhABWU9q20UA5Neg5-CITdqbN-djIeftrhdy2SZde-J2iHQTVdDNh9Ah7MEAzYiYyjDE=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>由於備份 &lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> 的指令 &lt;a href="https://docs.postgresql.tw/reference/client-applications/pg_dump">pg_dump&lt;/a> 需要限定特定版本才可以備份，故自己製作用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 容器方式來備份，此工具支援 &lt;a href="https://www.mysql.com/">MySQL&lt;/a>, PostgreSQL 跟 &lt;a href="https://www.mongodb.com/">MongoDB&lt;/a>，只要一個 docker-compose yaml 檔案就可以進行線上的備份，並且上傳到 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a>，另外也可以設定每天晚上固定時間點進行時間備份，也就是平常所設定的 cron job。沒使用 &lt;a href="https://aws.amazon.com/tw/rds/">AWS RDS&lt;/a>，或自行管理機房的朋友們，就可以透過這小工具，進行每天半夜線上備份，避免資料被誤砍。底下教學程式碼都可以&lt;a href="https://github.com/appleboy/docker-backup-database">在這邊找到&lt;/a>。&lt;/p></description></item><item><title>將 Postgres 資料轉換到 CSV 格式</title><link>https://demo.gh.wu-boy.com/2020/06/convert-postgres-data-to-csv-file/</link><pubDate>Mon, 29 Jun 2020 04:12:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2020/06/convert-postgres-data-to-csv-file/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/vbqq3rLa3xH1e2c1snKm4u0hhkm4mYaT7IRpVBQC22AYa_9xbzuCois2EXQT7-RvZNofhz2TJpz0-Wlfrs870jAn3fyfove-6uF_I8cSe89jI-zmq8BQ2XQS1_hRZJN5587iNVG6pvY=w1920-h1080" title="postgres">&lt;img src="https://lh3.googleusercontent.com/vbqq3rLa3xH1e2c1snKm4u0hhkm4mYaT7IRpVBQC22AYa_9xbzuCois2EXQT7-RvZNofhz2TJpz0-Wlfrs870jAn3fyfove-6uF_I8cSe89jI-zmq8BQ2XQS1_hRZJN5587iNVG6pvY=w400" alt="postgres" title="postgres">&lt;/a>&lt;/p>
&lt;p>時常用到 &lt;a href="https://www.postgresql.org/" title="Postgres">Postgres&lt;/a> 轉換資料的功能，來即時協助 PM 了解目前使用者實際狀況，底下紀錄常用的指令。首先安裝 Postgres 環境，這邊其實就是用 Docker 方式來啟動一個全新的 Postgres DB。&lt;/p>
&lt;pre>&lt;code class="language-yaml"> db:
image: postgres:12
restart: always
volumes:
- pg-data:/var/lib/postgresql/data
logging:
options:
max-size: "100k"
max-file: "3"
environment:
POSTGRES_USER: db
POSTGRES_DB: db
POSTGRES_PASSWORD: db&lt;/code>&lt;/pre>
&lt;p>上面的 &lt;code>environment&lt;/code> 參數可以自由調整，接著透過 &lt;code>docker-compose up -d&lt;/code> 來啟動資料庫進行 App 串接。&lt;/p></description></item><item><title>在 PostgreSQL 時區轉換及計算時間</title><link>https://demo.gh.wu-boy.com/2018/09/converting-timestamp-to-timestamp-in-a-specific-time-zone-in-postgres/</link><pubDate>Sun, 02 Sep 2018 07:51:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/09/converting-timestamp-to-timestamp-in-a-specific-time-zone-in-postgres/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/vbqq3rLa3xH1e2c1snKm4u0hhkm4mYaT7IRpVBQC22AYa_9xbzuCois2EXQT7-RvZNofhz2TJpz0-Wlfrs870jAn3fyfove-6uF_I8cSe89jI-zmq8BQ2XQS1_hRZJN5587iNVG6pvY=w1920-h1080" title="postgres">&lt;img src="https://lh3.googleusercontent.com/vbqq3rLa3xH1e2c1snKm4u0hhkm4mYaT7IRpVBQC22AYa_9xbzuCois2EXQT7-RvZNofhz2TJpz0-Wlfrs870jAn3fyfove-6uF_I8cSe89jI-zmq8BQ2XQS1_hRZJN5587iNVG6pvY=w400" alt="postgres" title="postgres">&lt;/a>&lt;/p>
&lt;p>通常在使用資料表時，都會在每一筆紀錄上面寫入當下時間，而這個時間會根據目前系統所在的時區而有所不同，當然我們都會使用 &lt;code>UTC+0&lt;/code> 作為標準時區，而欄位我們則會是使用 timestamp 或者是 unix time 格式，兩者最大的差異就是在前者 (timestamp) 會根據目前系統的時區來記錄，而後者 (unix time) 則是紀錄秒數差異 (Jan 01 1970) 而不會隨著系統時區改變而變化。如果是發展開源專案，則會使用後者居多，這樣不會因為使用者時區變化，而產生不同的差異，在 &lt;a href="https://gitea.io">Gitea 開源專案&lt;/a>保留了兩者，但是只要計算時間則是用 (unix time) 作轉換。&lt;/p></description></item></channel></rss>