<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSRF on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/csrf/</link><description>Recent content in CSRF on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Thu, 15 Aug 2013 03:43:44 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/csrf/feed.xml" rel="self" type="application/rss+xml"/><item><title>Cross Site Request Forgery in JS Web Apps and CodeIgniter PHP Framework</title><link>https://blog.wu-boy.com/2013/08/cross-site-request-in-js-web-apps-and-codeigniter-php-framework/</link><pubDate>Thu, 15 Aug 2013 03:43:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/08/cross-site-request-in-js-web-apps-and-codeigniter-php-framework/</guid><description>&lt;p>Cross Site Request Forgery 簡稱 &lt;a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank">CSRF&lt;/a> 是網路上最常見的攻擊方式，由於前端的盛行，現在開發網站偏向前後端拆開，前端使用大量的 Javascript 及 CSS3 效果，後端則是使用 PHP, Ruby, Python… 等，前端如何拿到資料庫資料呢，必需透 過 AJAX 方式來存取，常見的後端 API 會設計成 &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">RESTful&lt;/a> (GET/PUT/POST/DELETE)，後端為了擋住 CSRF 攻擊，所以限定了特殊 Content-Type Header，前端需要帶 application/json 給後端才可以拿到資料，這只能透過 Ajax requests 才可以做到。&lt;/p></description></item></channel></rss>