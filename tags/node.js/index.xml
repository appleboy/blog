<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/node.js/</link><description>Recent content in Node.js on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 21 Nov 2017 02:40:50 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>用 Go 語言減少 node_modules 容量來加速部署</title><link>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</link><pubDate>Tue, 21 Nov 2017 02:40:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/downsize-node-modules-with-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">減少 node_modules 大小來加速部署 Node.js 專案&lt;/a>』文章，透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令可以移除不必要的模組，剩下的模組佔據整個專案大部分容量，那該如何針對留下的模組來瘦身呢？這週看到 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 大神 &lt;a href="https://github.com/tj">TJ&lt;/a> 又發了一個 &lt;a href="https://golang.org">Go 語言&lt;/a>專案叫做 &lt;a href="https://github.com/tj/node-prune">node-prune&lt;/a>，此專案用來移除在 &lt;code>node_modules&lt;/code> 內不必要的檔案，那哪些才是不必要的檔案呢？&lt;/p></description></item><item><title>Node.js 8 搭配 npm 5 速度</title><link>https://blog.wu-boy.com/2017/06/node-js-8-npm-5-install-speed/</link><pubDate>Sun, 11 Jun 2017 05:02:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/node-js-8-npm-5-install-speed/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?w=840&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這個月 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 釋出 8.0 版本，搭配的就是 npm &lt;a href="https://github.com/npm/npm/releases/tag/v5.0.0">v5.0.0&lt;/a> 版本，&lt;a href="https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/">上一篇&lt;/a>寫到如何透過 &lt;a href="https://yarnpkg.com/en/">Yarn&lt;/a> 指令移除 devDependencies 內的 Package 套件，減少 node_modules 大小，有網友提到那 npm 5 的速度為何？其實筆者已經好久沒有用 npm 了，但是有人提問，我就立馬來測試看看 npm vs yarn 的速度，詳細數據可以參考此&lt;a href="https://github.com/appleboy/npm-vs-yarn">專案說明&lt;/a>。測試方法如下&lt;/p></description></item><item><title>減少 node_modules 大小來加速部署 Node.js 專案</title><link>https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</link><pubDate>Tue, 06 Jun 2017 06:36:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/downsize-node_modules-to-improve-deploy-speed/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/29998255630/in/dateposted-public/" title="yarn-kitten-full">&lt;img src="https://i1.wp.com/c7.staticflickr.com/6/5712/29998255630_b40ff9df74_z.jpg?w=840&amp;#038;ssl=1" alt="yarn-kitten-full" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 開發者現在大部分都在使用 &lt;a href="https://yarnpkg.com">Yarn&lt;/a> 了吧？如果還不知道或無法體會 Yarn 帶來的好處可以參考之前寫的一篇『&lt;a href="https://yarnpkg.com">用 Yarn 取代 Npm 管理 JavaScript 套件版本&lt;/a>』，帶你體會 &lt;code>yarn install&lt;/code> vs &lt;code>npm install&lt;/code> 的速度差異。本篇最主要會介紹在部署 Node.js 專案都需要把 node_modules 壓縮一起丟到遠端伺服器 (假設你不是用 &lt;a href="https://www.docker.com/">Docker&lt;/a> 部署)，這時候來聊聊怎麼減少 &lt;code>node_modules&lt;/code> 大小。&lt;/p></description></item><item><title>用一行指令加速 npm install</title><link>https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/</link><pubDate>Sun, 10 Jul 2016 15:44:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/24588632402/in/dateposted-public/" title="Npm-logo.svg">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1564/24588632402_35c2cab0b6_z.jpg?resize=640%2C249&amp;#038;ssl=1" alt="Npm-logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>不久之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2016/01/speed-up-npm-install/">提升 npm install 安裝速度&lt;/a>，但是發現速度還是沒有變快，在 DevOps 的流程花在 &lt;code>npm install&lt;/code> 的時間非常冗長，造成每次測試或 Deploy 都要花大量時間等待，且吃掉很多機器的資源，本篇要提供一個小技巧改善 npm install 安裝時間，其實簡單來說就是 cache 第一次安裝好的 &lt;code>node_modules&lt;/code> 目錄，之後每次安裝就拿 cache 目錄來新增或減少 packages 即可。&lt;/p></description></item><item><title>ScaleDrone Websocket 平台從 Node.js 轉換到 Golang</title><link>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</link><pubDate>Sun, 22 May 2016 07:51:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/scaledrone-websocket-from-nodejs-to-go/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>又看到一間網路平台公司從 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 跳到 &lt;a href="https://golang.org/">Golang&lt;/a> 了。&lt;a href="http://www.scaledrone.com">ScaleDrone&lt;/a> 是一間提供了 &lt;a href="https://en.wikipedia.org/wiki/WebSocket">websocket&lt;/a> 服務的公司，讓 web 可以透過 ScaleDrone 即時將訊息傳播到各種瀏覽器，但是今天看到 ScaleDrone 即將把後端平台使用的語言從 &lt;a href="http://blog.scaledrone.com/posts/nodejs-to-go">Node.js 轉換到 Golang&lt;/a>，為什麼要轉語言呢，官方提到大量的 Websocket 連線，讓伺服器記憶體快吃不消了，然而 ScaleDrone 用 Go 語言來實際測試，發現記憶體不但沒有增加，反而還降低了 response 及 connections 時間。底下是針對 Node.js vs Go 語言轉換比較。&lt;/p></description></item><item><title>提升 npm install 安裝速度</title><link>https://blog.wu-boy.com/2016/01/speed-up-npm-install/</link><pubDate>Sun, 31 Jan 2016 03:36:24 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/01/speed-up-npm-install/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/24588632402/in/dateposted-public/" title="Npm-logo.svg">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1564/24588632402_35c2cab0b6_z.jpg?resize=640%2C249&amp;#038;ssl=1" alt="Npm-logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.npmjs.com/">npm&lt;/a> 是 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> 套件管理模組，相信大家對 npm 不會很陌生，如果對於 npm 不了解的，可以參考&lt;a href="http://www.ruanyifeng.com/">阮一峰&lt;/a>寫的&lt;a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html">這篇文章&lt;/a>，今天要來探討的是如何提升 &lt;code>npm install&lt;/code> 的安裝速度，如果你正在嘗試 npm@3 版本，我建議可以先換到 npm@2 的版本會比較快（為什麼呢？底下有數據會說話）。&lt;a href="https://github.com/npm/npm/issues/9632">Github issue&lt;/a> 上也蠻多速度上的討論，然而前幾天有網友&lt;a href="https://github.com/npm/npm/issues/11283">發表一篇&lt;/a>關掉 &lt;code>progress&lt;/code> 提升不少速度，實際上我們可以拿專案來測試 npm@2 及 npm@3 的速度看看。&lt;/p></description></item><item><title>TJ 的新作品 frontend boilerplate 前端工具整合</title><link>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</link><pubDate>Thu, 31 Dec 2015 01:26:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</guid><description>今天突然看到 TJ 開了一個新 Repo 是 frontend boilerplate 嚇到我了，自從 TJ 去年發表要轉向 Go 之後，就把他自己很多的 Node.js Project 轉給其他人維護，也漸漸沒在 Github 上面活動，但是今天又看到她整理了一份 frontend boilerplate，內容含了現代流行的前端開發工具，大家可以參考看看，是個不錯的 Template:
Webpack React Redux Babel Autoprefixer PostCSS CSS modules Rucksack Hot reloading Redux router Redux effects TodoMVC example 期待 TJ 能有其他新作品啊。</description></item><item><title>Node.js Mocha 延遲測試</title><link>https://blog.wu-boy.com/2015/05/node-js-mocha-delay-testing/</link><pubDate>Fri, 08 May 2015 01:24:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/05/node-js-mocha-delay-testing/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png">&lt;img src="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67-300x134.png?resize=300%2C134" alt="687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67" class="aligncenter size-medium wp-image-5729" srcset="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?w=500&amp;ssl=1 500w" sizes="(max-width: 300px) 85vw, 300px" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>如果大家有在寫 &lt;a href="http://expressjs.com/">Node.js Express Framework&lt;/a>，一定對 &lt;a href="http://mochajs.org/">Mocha&lt;/a> Unit Testing 不陌生，&lt;code>各位工程師不要太相信自己寫的程式碼&lt;/code>，產品上線前，務必要把 Unit Test 寫完整，如果是要 Code Refactor，那測試的重要性更是大。網站架構越來越大，功能越來越多，每寫一個新功能，都會產生 side effect，造成其他程式或邏輯出錯，這時候就需要 Unit Test 來驗證邏輯的正確性。使用 Express 寫 API 我個人會建議使用 &lt;a href="https://github.com/visionmedia/supertest">Supertest&lt;/a> + &lt;a href="https://github.com/tj/should.js/">Should.js&lt;/a> 來驗證後端程式碼即可，這幾套框架都是由 &lt;a href="https://github.com/tj">TJ Holowaychuk&lt;/a> 完成。使用 supertest 也可以讓 express 不用 listen port 就可以測試。&lt;/p></description></item><item><title>您不可不知的 io.js</title><link>https://blog.wu-boy.com/2015/02/getting-to-know-io-js/</link><pubDate>Wed, 11 Feb 2015 06:05:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/02/getting-to-know-io-js/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/15859123853" title="9950313 by Bo-Yi Wu, on Flickr">&lt;img src="https://i2.wp.com/farm8.staticflickr.com/7401/15859123853_d945160802_o.png?resize=200%2C200&amp;#038;ssl=1" alt="9950313" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://iojs.org/">io.js&lt;/a> 至今已經成立了快三個月，目前也快速推出到 1.2.0 版本了，相信很多人都不太知道為什麼會多一個 io.js 組織，這組織是 fork 自 &lt;a href="https://github.com/joyent/node">Joyent&amp;rsquo;s Node.js&lt;/a> 相容於 &lt;a href="https://www.npmjs.com/">npm&lt;/a> 原始平台。&lt;/p></description></item><item><title>成立 iojs 台灣群組</title><link>https://blog.wu-boy.com/2015/02/iojs-tw-organization/</link><pubDate>Mon, 09 Feb 2015 03:55:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/02/iojs-tw-organization/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/15859123853" title="9950313 by Bo-Yi Wu, on Flickr">&lt;img src="https://i2.wp.com/farm8.staticflickr.com/7401/15859123853_d945160802_o.png?resize=200%2C200&amp;#038;ssl=1" alt="9950313" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>昨天在 &lt;a href="https://www.facebook.com/groups/node.js.tw/">node.js 台灣群組&lt;/a>討論&lt;a href="https://www.facebook.com/gniyop/posts/446564002165486">對岸已經成立 iojs-cn&lt;/a>，不多說我們也請官方幫忙成立了 &lt;a href="https://github.com/iojs/iojs-tw">iojs-tw&lt;/a>，目前的工作只有兩項，就是負責將[ iojs 官網]翻譯成中文，這部份 &lt;a href="https://github.com/cfsghost">@cfsghost&lt;/a> 已經&lt;a href="https://github.com/iojs/website/pull/135">送 PR 給官方了&lt;/a>，另外就是翻譯官方的 &lt;a href="https://medium.com/@iojs">Weekly Notes&lt;/a>，iojs 每週五都會發布一篇 iojs 的最新動態，我們就是負責將其中文化，上週五已經翻譯好了請參考如下:&lt;/p></description></item><item><title>Automating your workflow with Gulp.js</title><link>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</link><pubDate>Sun, 20 Jul 2014 02:11:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</guid><description>&lt;div style="margin:0 auto; text-align:center;">
&lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?w=840&amp;#038;ssl=1" style="max-height: 250px" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>今年 2014 &lt;a href="http://coscup.org/">COSCUP&lt;/a> 在 7/19,20 中研院舉辦，由於 &lt;a href="http://jsdc.tw/">JSDC&lt;/a> 今年比往年還要晚半年舉辦，所以本來想投在 JSDC 的議程，就先拿到投到 COSCUP 議程。去年 JSDC 講了 &lt;a href="http://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/">Javascript command line tool GruntJS 介紹&lt;/a>，講完經過半年，&lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 就出來了，我馬上跳過去嘗試，用過之後，就像變了心的女朋友，回不來了，底下是 Gulp.js Slides。&lt;/p></description></item><item><title>在 Chrome 瀏覽器使用 Terminal 終端機</title><link>https://blog.wu-boy.com/2014/01/terminal-in-chrome-devtools/</link><pubDate>Sun, 05 Jan 2014 13:43:46 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/01/terminal-in-chrome-devtools/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;img src="https://i2.wp.com/farm8.staticflickr.com/7350/9333443162_20e7e5d5f2_m.jpg?w=840&amp;#038;ssl=1" alt="Google Chrome" data-recalc-dims="1" />
&lt;/div>
&lt;h2 id="簡介">簡介&lt;/h2>
&lt;p>不知道大家有無在瀏覽器內直接連上 Terminal 終端機，今天來介紹 &lt;a href="https://github.com/petethepig/devtools-terminal">DevTools Terminal&lt;/a>，這是一套 &lt;a href="https://chrome.google.com/webstore/category/extensions">Chrome extension&lt;/a>，它可以讓您在 &lt;a href="http://www.google.com/intl/zh-TW/chrome/">Chrome 瀏覽器&lt;/a>直接使用 Terminal，平常開發程式，一定會常常切換瀏覽器及 Terminal 軟體，現在開發者可以直接在瀏覽器連上 Terminal，並且開始使用 &lt;a href="http://git-scm.com/">Git&lt;/a>, &lt;a href="http://gruntjs.com/">Grunt&lt;/a>, wget 甚至 &lt;a href="http://www.vim.org/">Vim&lt;/a> 等指令。&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/11773943433/" title="Screenshot from 2014-01-05 20:36:26 by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2837/11773943433_e0f20349fb.jpg?resize=500%2C282&amp;#038;ssl=1" alt="Screenshot from 2014-01-05 20:36:26" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item></channel></rss>