<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terraform on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/terraform/</link><description>Recent content in terraform on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 04 Sep 2021 12:43:19 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/terraform/feed.xml" rel="self" type="application/rss+xml"/><item><title>用 AWS EFS 或 FSx Lustre 加速 Sagemaker AI 模型訓練</title><link>https://blog.wu-boy.com/2021/09/speed-up-amazon-sagemaker-training-using-efs-or-fsx-lustre/</link><pubDate>Sat, 04 Sep 2021 12:43:19 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/09/speed-up-amazon-sagemaker-training-using-efs-or-fsx-lustre/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/X4wpl6d.png" alt="cover">&lt;/p>
&lt;p>前不久寫過一篇『&lt;a href="https://blog.wu-boy.com/2021/06/integratate-sagemaker-workflow-using-golang-api/">AI 團隊整合導入 AWS SageMaker 流程&lt;/a>』介紹如何用 &lt;a href="https://golang.org">Go 語言&lt;/a>整合 &lt;a href="https://aws.amazon.com/tw/pm/sagemaker/">SageMaker API&lt;/a>。本篇會介紹在訓練 AI 模型前，如何將 Dataset 準備好並整合 SageMaker，過程中遇到什麼問題跟挑戰。團隊提供一個平台，讓使用者可以上傳自家的 Dataset 搭配團隊內部預設的 Dataset 進行 AI 模型的訓練，最後將模型提供給使用者下載使用，簡單來說，使用者只需要提供 Dataset 並把 AI 訓練參數設定完畢，就可以拿到最後的模型進行後續的整合開發。底下我們探討使用者上傳 Dataset 的流程。&lt;/p></description></item><item><title>搶救 Terraform State 檔案</title><link>https://blog.wu-boy.com/2021/02/recovering-terraform-state/</link><pubDate>Sun, 14 Feb 2021 13:59:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/recovering-terraform-state/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/3ZDBZ2vZbRS1NTRzSg1ftpwIhEltm9iPe4-DFNE4y6yuLxbsvxGd6UQfLwcSvHb-AhGBcmtK36NiWBT1BeUzE8ra713qNV-cFnDk2pSVP_mqpz_MG5bpNg0Yx8jZc2-wlkOTb-xk1FE=w1920-h1080" alt="recovery the terraform state file">&lt;/p>
&lt;p>近期其中一個專案使用 Terraform 來管理 AWS 雲平台，初期預計只有我一個人在使用 Terraform，所以就沒有將 &lt;a href="https://www.terraform.io/docs/language/settings/backends/index.html">Backend State&lt;/a> 放在 AWS S3 進行備份管理，這個粗心大意讓我花了大半時間來搶救 State (.tfstate) 檔案，而搶救過程也是蠻順利的，只是需要花時間用 &lt;strong>&lt;a href="https://www.terraform.io/docs/cli/import/index.html">terraform import&lt;/a>&lt;/strong> 指令將所有的 State 狀態全部轉回來一次，當然不是每個 Resource 都可以正常運作，還是需要搭配一些修正才能全部轉換。&lt;/p>
&lt;p>結論: 請使用 &lt;code>terraform import&lt;/code> 指令，這是最終解法。&lt;/p></description></item><item><title>初探 Infrastructure as Code 工具 Terraform vs Pulumi</title><link>https://blog.wu-boy.com/2021/02/introduction-to-infrastructure-as-code-terraform-vs-pulumi/</link><pubDate>Mon, 08 Feb 2021 03:41:15 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/02/introduction-to-infrastructure-as-code-terraform-vs-pulumi/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/4DRj7S_2u3Tw8P-_p0FOQ_RH25eDbx_Edasx9h52-1ouo-GGL31CuiLa2EcbPyu8uEkf5GTw45_4bfzO3IFCfDwBZol7D69mX1KP3EHAOFoNT1nKyUpdpmSUyTC8Y49ej02OEteWWLU=w1920-h1080" title="cover pulumi and terraform">&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3fJUweEGX-VoiJgesBpEaNM-N0ozaNkTrcCvzRxPCL22RzhuZNaA1fXVi0Gy_aNIAhP0mHlUHzV89DV9cr4Lwcmd6JTZ5ISTTzOvzyuLSOxraPtYK3lMDpcR1bKXv1dwLw5oApcmFwKhijmRi12fAiNkQ=w1228-h741-no?authuser=0" alt="cover pulumi and terraform" title="cover pulumi and terraform">&lt;/a>&lt;/p>
&lt;p>想必大家對於 &lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code&lt;/a> 簡稱 (IaC) 並不陌生，而這個名詞在很早以前就很火熱，本篇最主要介紹為什麼我們要導入 IaC，以及該選擇哪些工具來管理雲平台 (AWS, GCP, Azure 等&amp;hellip;)。觀看現在很火紅的 &lt;a href="https://www.terraform.io/">Terraform&lt;/a> 及後起之秀 &lt;a href="https://www.pulumi.com/">Pulumi&lt;/a> 是大家可以作為選擇的參考，而底下會來歸納優缺點及技術比較，以及為什麼我最後會選擇 Pulumi。這兩套都是由 &lt;a href="https://golang.org/">Go 語言&lt;/a>所開發，現在選擇工具前，都要先考慮看看什麼語言寫的，以及整合進團隊自動化部署流程難易度。&lt;/p></description></item></channel></rss>