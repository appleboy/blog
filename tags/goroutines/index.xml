<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Goroutines on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>https://demo.gh.wu-boy.com/tags/goroutines/</link><description>Recent content in Goroutines on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Mon, 13 May 2019 02:37:51 +0000</lastBuildDate><atom:link href="https://demo.gh.wu-boy.com/tags/goroutines/index.xml" rel="self" type="application/rss+xml"/><item><title>15 分鐘學習 Go 語言如何處理多個 Channel 通道</title><link>https://demo.gh.wu-boy.com/2019/05/handle-multiple-channel-in-15-minutes/</link><pubDate>Mon, 13 May 2019 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2019/05/handle-multiple-channel-in-15-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" title="golang logo">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="golang logo" title="golang logo">&lt;/a>&lt;/p>
&lt;p>大家在初學 &lt;a href="https://golang.org">Go 語言&lt;/a>時，肯定很少用到 Go Channel，也不太確定使用的時機點，其實在官方 Blog 有提供一篇不錯的文章『&lt;a href="https://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation&lt;/a>』，相信大家剛跨入學習新語言時，不會馬上看 Go Channel，底下我來用一個簡單的例子來說明如何使用 Go Channel，使用情境非常簡單，就是假設今天要同時處理 20 個背景工作，一定想到要使用 &lt;a href="https://tour.golang.org/concurrency/1">Goroutines&lt;/a>，但是又想要收到這 20 個 JOB 處理的結果，並顯示在畫面上，如果其中一個 Job 失敗，就跳出 main 函式，當然又會希望這 20 個 JOB 預期在一分鐘內執行結束，如果超過一分鐘，也是一樣跳出 main 函式。針對這個問題，我們可以整理需要三個 Channel + 一個 Timeout 機制。&lt;/p>
&lt;ul>
&lt;li>使用 outChan 顯示各個 JOB 完成狀況&lt;/li>
&lt;li>使用 errChan 顯示 JOB 發生錯誤並且跳出 main 主程式&lt;/li>
&lt;li>使用 finishChan 通知全部 JOB 已經完成&lt;/li>
&lt;li>設定 Timeout 機制 (1 秒之內要完成所有 job)&lt;/li>
&lt;/ul>
&lt;p>在看此文章之前，也許可以先理解什麼是『&lt;a href="https://blog.wu-boy.com/2019/04/understand-unbuffered-vs-buffered-channel-in-five-minutes/">buffer vs unbuffer channel&lt;/a>』。&lt;/p></description></item></channel></rss>