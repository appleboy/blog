<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gulp on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/gulp/</link><description>Recent content in gulp on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 02 Nov 2014 02:32:24 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/gulp/feed.xml" rel="self" type="application/rss+xml"/><item><title>自動修復 JavaScript Linting-errors 好工具 Fixmyjs</title><link>https://blog.wu-boy.com/2014/11/fix-javascript-linting-errors-tool-fixmyjs/</link><pubDate>Sun, 02 Nov 2014 02:32:24 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/11/fix-javascript-linting-errors-tool-fixmyjs/</guid><description>&lt;p>前端工程師撰寫 &lt;a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript&lt;/a> 程式碼後一定會透過 &lt;a href="http://www.jshint.com/">JSHint&lt;/a> 驗證程式碼品質，但是 JSHint 只會提醒各位開發者哪些代碼需要修正，工程師還是需要手動去修復這些錯誤，這有點麻煩，所以今天來介紹一套自動修正 JSHint 錯誤的好工具 &lt;a href="https://github.com/jshint/fixmyjs/">Fixmyjs&lt;/a>，如果大家有寫過 PHP，一定有聽過 &lt;a href="http://www.php-fig.org/">PHP-FIG&lt;/a> 制定了 &lt;a href="http://www.php-fig.org/psr/psr-0/">PSR-0&lt;/a>, &lt;a href="http://www.php-fig.org/psr/psr-1/">PSR-1&lt;/a>, &lt;a href="http://www.php-fig.org/psr/psr-2/">PSR-2&lt;/a> 等標準，希望 PHP 工程師可以遵守這些規則，而 &lt;a href="https://github.com/fabpot/PHP-CS-Fixer">PHP-CS-Fixer&lt;/a> 就是根據 PHP-FIG 來自動修復 PHP 程式碼，讓程式碼可以遵守這些共同制定的標準。&lt;/p></description></item><item><title>Automating your workflow with Gulp.js</title><link>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</link><pubDate>Sun, 20 Jul 2014 02:11:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/07/automating-your-workflow-with-gulp-js/</guid><description>&lt;div style="margin:0 auto; text-align:center;">
&lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?w=840&amp;#038;ssl=1" style="max-height: 250px" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>今年 2014 &lt;a href="http://coscup.org/">COSCUP&lt;/a> 在 7/19,20 中研院舉辦，由於 &lt;a href="http://jsdc.tw/">JSDC&lt;/a> 今年比往年還要晚半年舉辦，所以本來想投在 JSDC 的議程，就先拿到投到 COSCUP 議程。去年 JSDC 講了 &lt;a href="http://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/">Javascript command line tool GruntJS 介紹&lt;/a>，講完經過半年，&lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 就出來了，我馬上跳過去嘗試，用過之後，就像變了心的女朋友，回不來了，底下是 Gulp.js Slides。&lt;/p></description></item><item><title>用 Google PageSpeed Insights 計算 Desktop 或 Mobile 網站分數</title><link>https://blog.wu-boy.com/2014/06/pagespeed-insights-with-reporting/</link><pubDate>Thu, 12 Jun 2014 02:33:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/06/pagespeed-insights-with-reporting/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/14077059487" title="new-google-logo-knockoff by Bo-Yi Wu, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2930/14077059487_58046d689e_n.jpg?resize=320%2C124&amp;#038;ssl=1" alt="new-google-logo-knockoff" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>相信工程師在調整網站效能一定會使用 &lt;a href="https://developers.google.com/speed/docs/insights/v1/getting_started">Google PageSpeed Insights&lt;/a> 來得到測試效能數據報表，但是這僅限於使用 Chrome 或 Firefox 瀏覽器。每次跑 PageSpeed 時候，Chrome 就會出現哀號，並且吃下許多記憶體。有沒有 command line 可以直接用 Google PageSpeed Insights 測試 Desktop 或 Mobile 的分數。Google 工程師 &lt;a href="https://github.com/addyosmani">@addyosmani&lt;/a> 寫了一套 &lt;a href="https://github.com/addyosmani/psi">PageSpeed Insights for Node - with reporting&lt;/a> 稱作 &lt;a href="https://github.com/addyosmani/psi">PSI&lt;/a>，可以直接透過 Node 來產生基本 report，這 report 真的算很基本，跟 Chrome 的 extension 跑起來的 report 是不一樣的。這工具可以用來紀錄每次 deploy 網站時的一些數據變化。底下附上 Google 網站報告&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/14401120872" title="google_psi_report by Bo-Yi Wu, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3857/14401120872_38d23bc763_z.jpg?resize=640%2C586&amp;#038;ssl=1" alt="google_psi_report" data-recalc-dims="1" />&lt;/a>&lt;/p></description></item><item><title>Gulp.js 工具包</title><link>https://blog.wu-boy.com/2014/05/gui-tool-for-gulp/</link><pubDate>Fri, 23 May 2014 03:23:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/05/gui-tool-for-gulp/</guid><description>&lt;div style="margin:0 auto; text-align:center;">
&lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?w=840&amp;#038;ssl=1" style="max-height: 250px" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>本篇來整理關於 &lt;a href="http://gulpjs.com/">Gulp.js&lt;/a> 的一些 GUI 工具，對於不瞭解 Gulp.js 可以參考之前我寫的 &lt;a href="http://blog.wu-boy.com/2013/12/streaming-build-system-gulp/">The streaming build system Gulp&lt;/a>，會紀錄這篇最主要是看到有人在 Github 發了這篇 &lt;a href="https://github.com/gulpjs/gulp/issues/468">Is there any GUI tool for Gulp?&lt;/a> 而 Gulp.js 底層作者 &lt;a href="https://github.com/robrich">@robrich&lt;/a> 跳出來列出了很多工具，整理如下&lt;/p></description></item><item><title>gulp-imagemin 在 Ubuntu 出現錯誤</title><link>https://blog.wu-boy.com/2014/04/gulp-imagemin-lossy-operations-are-not-currently-supported/</link><pubDate>Tue, 29 Apr 2014 06:55:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/04/gulp-imagemin-lossy-operations-are-not-currently-supported/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?resize=197%2C388&amp;#038;ssl=1" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>在 deploy 程式碼到 production server 前，透過 &lt;a href="https://www.npmjs.org/package/gulp-imagemin">gulp-imagemin&lt;/a> 工具將全部圖片優化，上傳到 &lt;a href="http://aws.amazon.com/s3/">Amazon S3&lt;/a>，Windows 底下正常運作，到了 Ubuntu 環境之下噴出底下錯誤訊息&lt;/p>
&lt;blockquote>
&lt;p>Error: Lossy operations are not currently supported
後來在 &lt;a href="https://github.com/gruntjs/grunt-contrib-imagemin/issues/180">grunt-contrib-imagemin@issues/180&lt;/a> 有提人出此問題，解決方案就是升級 &lt;a href="http://optipng.sourceforge.net/">OptiPNG&lt;/a>，因為 Ubuntu 的 apt 套件只有支援到 0.6.4 版本，請到 OptiPNG 官網下載最新 tar 檔，編譯重新安裝&lt;/p>
&lt;/blockquote></description></item><item><title>Ruby Compass and Sass Auto Testing Environment</title><link>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</link><pubDate>Tue, 11 Mar 2014 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6213260474/" title="Compass Home Compass Documentation by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm7.static.flickr.com/6217/6213260474_e0e51eeefe_o.png?resize=486%2C110&amp;#038;ssl=1" alt="Compass Home Compass Documentation" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://compass-style.org/">Compass&lt;/a> 是一套 CSS Authoring Framework，也是基於 &lt;a href="http://sass-lang.com/">Sass&lt;/a> 語法的一套 Framework，先前寫了 &lt;a href="http://gulpjs.com/">Gulp&lt;/a> 的 &lt;a href="https://github.com/appleboy/gulp-compass">Compass Plugin&lt;/a>，在針對自動化測試時候出現版本相依性不同，造成無法自動測試成功。自動化測試目前跟 &lt;a href="http://github.com">Github&lt;/a> 最常搭配的就是 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 或者是 &lt;a href="https://www.codeship.io/">Codeship&lt;/a>，當然如果非 Open source 專案可能就要自己架設 &lt;a href="http://en.wikipedia.org/wiki/Continuous_integration">CI&lt;/a> 伺服器，個人推薦就是 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a>。這次遇到的問題其實跟 Ruby Gem 版本相依性有關，由於要測試 Compass 所有 Command 語法，所以使用了 &lt;a href="http://susy.oddbird.net/">Susy&lt;/a> + sass + compass，如果在 &lt;code>.travis.yml&lt;/code> 內直接寫&lt;/p></description></item><item><title>The streaming build system Gulp</title><link>https://blog.wu-boy.com/2013/12/streaming-build-system-gulp/</link><pubDate>Sun, 29 Dec 2013 08:25:22 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/12/streaming-build-system-gulp/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/11616755494/" title="gulp by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7354/11616755494_06ef5c0fa5.jpg?resize=197%2C388&amp;#038;ssl=1" alt="gulp" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>看到 &lt;a href="https://github.com/yeoman" target="_blank">Yeoman&lt;/a> 作者之一 &lt;a href="https://github.com/addyosmani" target="_blank">Addy Osmani&lt;/a> 開始 &lt;a href="https://github.com/yeoman/yeoman/issues/1232" target="_blank">review Gulp build system&lt;/a>，由於 Yeoman framework 跟 &lt;a href="http://gruntjs.com/" target="_blank">GruntJS&lt;/a> 是很緊密結合的，但是 GruntJS 套件愈來愈多，漸漸的執行 GruntJS 後，開始吃了系統 CPU 及記憶體，這對於開發環境而言，會是一大負擔阿，大家不知道有無發現，跑 &lt;a href="http://nodejs.org/">Nodejs&lt;/a> GruntJS 時，每當存檔的時候，CPU 就開始哀嚎了，我自己是有這方面的體會，加上團隊內並不是每位同仁的電腦都是很 powerful，原本是好意讓團隊開發更遵守 coding style 及統一開發環境，但是 Grunt 的肥大，讓整個 Client 環境 Loading 飆高。所以 Yeoman 看到了 &lt;a href="https://github.com/gulpjs/gulp" target="_blank">Gulp&lt;/a>。也有考慮如何將 Gulp 整合到 Yeoman 專案。&lt;/p></description></item></channel></rss>