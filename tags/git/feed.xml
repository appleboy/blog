<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/git/</link><description>Recent content in git on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 01 Aug 2021 09:57:19 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/git/feed.xml" rel="self" type="application/rss+xml"/><item><title>開源專案 Drone CI/CD 平台真的免費嗎？</title><link>https://blog.wu-boy.com/2021/08/drone-license/</link><pubDate>Sun, 01 Aug 2021 09:57:19 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/08/drone-license/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/2P2MVNK.png" alt="cover">&lt;/p>
&lt;p>自己推行 &lt;a href="https://www.drone.io/">Drone&lt;/a> CI/CD 開源平台已經多年，很多人都會問我說，Drone 真的可以免費使用嗎？用在開源上面，或者是導入進公司內部團隊，這費用該怎麼計算呢？好的，本篇就帶大家了解 Drone 用在開源上或是公司內部團隊上需要注意的地方，官方其實有寫了一整頁 &lt;a href="https://docs.drone.io/enterprise/">FAQ 非常詳細&lt;/a>，底下是我整理幾點給大家知道。&lt;/p></description></item><item><title>GitHub Flow 及 Git Flow 流程使用時機</title><link>https://blog.wu-boy.com/2017/12/github-flow-vs-git-flow/</link><pubDate>Tue, 19 Dec 2017 03:48:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/12/github-flow-vs-git-flow/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/39143290882/in/dateposted-public/" title="Screen Shot 2017-12-20 at 11.45.04 AM">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4726/39143290882_877ebfcf8e_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-12-20 at 11.45.04 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在 Facebook 上面看到這篇『&lt;a href="http://blog.hellojcc.tw/2017/12/14/the-flaw-of-git-flow/">git flow 實戰經驗談&lt;/a>』，想說來寫一下對於團隊內該導入 &lt;a href="https://guides.github.com/introduction/flow/">GitHub Flow&lt;/a> 還是 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git Flow&lt;/a>，寫下自己的想法給大家參考看看。當你加入團隊，第一件事情就是嘗試了解目前團隊是走哪一種 Git 流程，但是在團隊內可能使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a>或者是傳統 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git 流程&lt;/a>，在開始進入開發流程時，請務必先了解團隊整個 Release 流程。後者流程在筆者幾年前有發表一篇『&lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">branch model 分支模組基本介紹&lt;/a>』，如果大家有興趣可以先看看，而我自己在團隊內使用這兩種流程，嘗試過幾個團隊，得到底下結論:&lt;/p>
&lt;ul>
&lt;li>公司內部請使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a>&lt;/li>
&lt;li>開源專案請使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a> + &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git 流程&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>底下來探討為什麼我會有這些想法。首先先來看看公司團隊內部如果是走 Git 流程會有哪些缺陷。&lt;/p></description></item><item><title>用 Docker 改善團隊合作模式</title><link>https://blog.wu-boy.com/2016/07/docker-team-work/</link><pubDate>Fri, 15 Jul 2016 07:11:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/docker-team-work/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>今年第一次參加 &lt;a href="http://www.ithome.com.tw/">iThome&lt;/a> 舉辦的 &lt;a href="http://devopssummit.ithome.com.tw/">DevOps Summit&lt;/a> 研討會，這次舉辦在台北文創大樓，就是在大巨蛋隔壁，很高興今年第一次投稿就錄取，題目是『&lt;strong>用 Dokcer 改善團隊合作模式&lt;/strong>』，主題偏向如何用 Docker 改善個人或團隊的開發狀況，尤其是在 IC 或系統廠如何導入 Docker。研討會上沒有提到很深入的 Docker 應用，在投影片內強調的是，如何將 &lt;a href="https://git-scm.com/">Git&lt;/a> 及 &lt;a href="https://www.docker.com/">Docker&lt;/a> 帶入團隊內不同角色，包含 QA 及 PM，讓大家在團隊合作上能夠各自獨立，不會互相影響。底下就是我今年的投影片:&lt;/p></description></item><item><title>Git Flow 與團隊合作</title><link>https://blog.wu-boy.com/2016/04/git-flow-tips/</link><pubDate>Thu, 28 Apr 2016 02:30:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/git-flow-tips/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/26620468361/in/dateposted-public/" title="branching-illustration@2x">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1584/26620468361_7fe972425a_z.jpg?resize=640%2C413&amp;#038;ssl=1" alt="branching-illustration@2x" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本月最後一篇投影片來介紹 &lt;a href="https://git-scm.com/">Git&lt;/a> Flow 流程該如何導入團隊，之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">Git branch model&lt;/a> 文章，裡面提到該如何正確使用 branch，但是現在回想起來要導入團隊內真的是有點麻煩，也遇到蠻多問題的，後來最後只採用 &lt;a href="https://guides.github.com/introduction/flow/">Github Flow&lt;/a>，簡單又容易理解，如果開發者很常在 &lt;a href="https://github.com">Github&lt;/a> 活動，相信對於此方法並不會很陌生。&lt;/p></description></item><item><title>Git tips: 更改 commit log 作者</title><link>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</link><pubDate>Thu, 11 Feb 2016 16:11:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</guid><description>在 Github 上面看到這 git-blame-someone-else 專案，用來隨時修改 commit log 作者，也就是可以任意改 commit id 內的 `Author` 欄位資訊，作者也相當幽默，直接拿此 commit id 改成 Linux 作者 Linus Torvalds。
使用時機 大家會問到什麼時候才會用到需要修改 commit 作者，以我自己的狀況為例，在團隊內開發新功能會直接開新的 Branch 來開發，完成後會進行 code review，此時原開發者目前正在忙其他專案，其他團隊成員就必須幫忙修改原先 commit 內容，通常我是直接建議透過 `git reset &amp;ndash;soft HEAD^` 來更動原本 commit，而不是產生新的 commit，修改後作者就會變成自己，此時後這功能就派上用場了。
安裝方式 根據源專案是透過 root 權限，將執行檔丟到 `/usr/loca/bin` 目錄底下，但是我個人不建議用這方式，因為還需要 root 權限，要打密碼有點麻煩，我建議透過在家目錄建立 `bin` 目錄，並將此目錄加到 `$PATH` 變數內即可。
1 2 3 $ mkdir ~/bin $ wget https://raw.githubusercontent.com/jayphelps/git-blame-someone-else/master/git-blame-someone-else -O ~/bin/git-blame-someone-else $ chmod 755 ~/bin/git-blame-someone-else 修改 .bashrc，加入底下程式碼</description></item><item><title>在 Debian 7.8 安裝 Gitlab 筆記</title><link>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</link><pubDate>Sat, 12 Dec 2015 09:22:02 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</guid><description>&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?w=840&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />
&lt;p>之前寫過一篇 &lt;a href="http://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/">GitLab 快速安裝筆記&lt;/a>，但是這次在 Debian 7.8 上安裝起來遇到蠻多問題，故寫此篇來記錄安裝遇到的問題，也會寫到如何搭配 Nginx 設定。GitLab 分兩種版本，一種是 Community Edition packages 另一種是 Enterprise Edition packages，本篇是記錄 Community 版本安裝步驟，可以到&lt;a href="https://about.gitlab.com/downloads/">下載頁面&lt;/a>選擇您的作業系統，就可以看到安裝方式&lt;/p></description></item><item><title>Git tips 請不要 commit 已經註解的程式碼</title><link>https://blog.wu-boy.com/2015/11/git-tips-don-t-commit-commented-out-code/</link><pubDate>Thu, 05 Nov 2015 06:52:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/11/git-tips-don-t-commit-commented-out-code/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>上週看到一篇國外作者寫的 &lt;a href="https://medium.com/@kentcdodds/please-don-t-commit-commented-out-code-53d0b5b26d5f">Please, don’t commit commented out code&lt;/a>，裡面內文真的不得不按讚啊，對於每天都要 review code 的開發者來說，最不喜歡看到的就是類似下面的程式碼&lt;/p>
&lt;div>
&lt;pre class="brush: jscript; title: ; notranslate" title="">this.test = function(req, res, next) {
&lt;p>// if (foo) {
// return &amp;lsquo;1&amp;rsquo;;
// } else if (bar) {
// return &amp;lsquo;2&amp;rsquo;;
// }&lt;/p>
&lt;p>return 3;
};
&lt;/pre>&lt;/p>
&lt;/div></description></item><item><title>該如何寫好 git commit message</title><link>https://blog.wu-boy.com/2015/09/how-to-write-git-commit-message/</link><pubDate>Fri, 18 Sep 2015 07:09:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/09/how-to-write-git-commit-message/</guid><description>Git 已經是每天必用的工具，也是團隊間互相合作的重要角色。要寫好 Git commit message，讓團隊成員可以知道每一個 Commit 代表什麼意思，這是非常重要的。網路上看到一篇教您如何寫好 Git commit message，好的 Commit Log 可以讓其他同事快速知道這個 Pull Request 包含了哪些異動，該作者寫了七點，分別如下
將標題與內容中間多一行空白 標題限制 50 字元 標題第一個字必須為大寫 標題最後不要帶上句號 標題內容可以使用強烈的語氣 內容請用 72 字元來斷行 內容可以解釋 what and why vs. how 要強制大家有共通的 commit format 其實很難，所以團隊內會使用 issue track 系統，大家把 issue 或 feature 都開好，在標題列裡面就要強制將 issue number 寫入，然後在 issue 那邊把內容及作法詳細寫清楚，方便追蹤，這樣也是可以的。
PS. 該是強迫自己把 commit log 寫好會比較好，通常在追問題，也時候也會發現自己寫的 Log 不是很清楚。</description></item><item><title>git tips 找尋遺失的 commit 紀錄</title><link>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</link><pubDate>Sat, 04 Jul 2015 11:58:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</guid><description>個人每天常用的常用的三大 Git 指令分別是 git reset, git pull, git rebase，但是呢有時候手殘，常常把 git reset --soft 打成 git reset --hard 造成不可預期的錯誤，朋友圈內也有人常常問我該如何救不見的 commit，其實很容易，git 對於每隔操作後產生的 commit 都會存放在 Local 端，所以基本上不用擔心 commit 記錄會不見，有一種狀況會永遠消失，那就是假設尚未 commit 目前修正過的檔案，然後下 git reset --hard HEAD，這樣的話我想誰都無法幫忙把已修正過的檔案找回來了，原因是連 git 都不知道你改了什麼啊。所以為了避免這情況方生，個人建議開發者，只要開發到一定的階段，務必要下一個 commit 當作記錄，但是你會說，這樣功能開發完後，就會有很多個 commit 非常不好看，這時候可以嘗試 git rebase 將整個功能合併成一個 commit，這樣其他開發者 review 時就會非常清楚。
現在的問題是如果開發者不小心下了 git reset --hard HEAD^，上一個 commit 就會消失了，這時候該如何救回來呢？答案可以使用 git reflog 指令然觀看開發者全部 git 的操作記錄，裡面詳細記載你曾經下過的 git 指令
1 2 3 4 5 6 7 8 $ git reflog 794be8b HEAD@{0}: reset: moving to HEAD^ 5e2be6f HEAD@{1}: commit (amend): update bfa593c HEAD@{2}: cherry-pick: update 794be8b HEAD@{3}: reset: moving to 649c658 794be8b HEAD@{4}: reset: moving to HEAD^ 649c658 HEAD@{5}: commit: update 794be8b HEAD@{6}: commit (initial): addd 上面可以看到之前 commit 的記錄，接著可以透過 git reset --hard xxxxx，或者是用 git cherry-pick xxxxx 將上一個 commit ID 記錄抓回來即可。</description></item><item><title>Git Flow and JavaScript Coding Style</title><link>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</link><pubDate>Sat, 11 Apr 2015 15:05:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 已經是每日必備使用的指令，在平常工作上常常使用到 &lt;a href="http://git-scm.com/docs/git-rebase">git rebase&lt;/a> 或 &lt;a href="http://git-scm.com/docs/git-merge">git merge&lt;/a>，發現很多工程師不知道什麼時候該用 rebase 什麼時候該用 merge，所以做了底下投影片來清楚描述 git rebase 及 merge 的優缺點及使用時機。&lt;/p></description></item><item><title>透過 https 下載套件，取代 git protocol</title><link>https://blog.wu-boy.com/2015/03/replace-git-with-https-protocol-for-bower/</link><pubDate>Sat, 14 Mar 2015 08:39:04 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/03/replace-git-with-https-protocol-for-bower/</guid><description>現在前端套件幾乎都會透過 Bower 來下載，而 Bower 預設使用 git protocol 來下載原始檔案，如果遇到 timeout 逾時，也就是無法透過 git:// 方式，就必須要切換成 https:// 下載，蠻多人遇到此問題，網路上找到這篇 bower install - github.com connection timed out 解答。在 Console 視窗噴出底下錯誤訊息，就請改用 https 方式。
Additional error details: fatal: unable to connect to github.com: github.com[0: 192.30.252.130]: errno=Connection timed out 切換方式很容易，請在 Console 鍵入底下指令
1 $ git config --global url.&amp;#34;https://&amp;#34;.insteadOf git:// 遇到 bower install 卡卡的也可以用這招 ＸＤ</description></item><item><title>GitLab 快速安裝</title><link>https://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/</link><pubDate>Wed, 24 Dec 2014 08:12:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/10605193576/" title="gitlab_logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?resize=320%2C206&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>最近想安裝新版的 &lt;a href="https://about.gitlab.com/">GitLab&lt;/a>，竟然發現 GitLab 推出&lt;a href="https://about.gitlab.com/downloads/">快速懶人包&lt;/a>，終於可以不用打很多指令來安裝了，大幅降低了安裝困難度，目前支援 &lt;a href="http://nginx.org/">CentOS&lt;/a>, &lt;a href="http://www.ubuntu.com/">Ubutnu&lt;/a>, &lt;a href="https://www.debian.org/">Debian&lt;/a> 等安裝包，GitLab 各版本也可以從&lt;a href="https://about.gitlab.com/downloads/archives/">這邊列表&lt;/a>找到，另外安裝前請確保你的硬體環境是符合 &lt;a href="http://doc.gitlab.com/ce/install/requirements.html">GitLab 所要求&lt;/a>，來看看有沒有這麼簡單安裝。&lt;/p></description></item><item><title>用 Go 語言寫的 Github Git 服務</title><link>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</link><pubDate>Mon, 07 Apr 2014 07:22:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</guid><description>&lt;img src="https://i1.wp.com/farm4.staticflickr.com/3762/13686798143_dd15f54076_o.png?w=840&amp;#038;ssl=1" alt="null" data-recalc-dims="1" />
&lt;p>最近看到大陸那邊用 &lt;a href="http://golang.org/">Go&lt;/a> 語言寫了一套類似 &lt;a href="https://github.com/">Github&lt;/a> 服務叫做 &lt;a href="https://github.com/gogits/gogs">Gogs&lt;/a>(Go Git Service)，目前個人裝起來速度方面相當快，跟 &lt;a href="http://gitlab.org">GitLab&lt;/a> 用 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 寫的 Git Service 速度有差，以功能完整性來說，GitLab 還是大勝 Gogs，安裝方式則是 Gogs 勝於 GitLab，如果最後要推薦用 Gogs 還是 GitLab，我個人還是會選 GitLab 因為畢竟還是要搭配 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a> 等 CI 服務才能發揮作用，這次來筆記如何在 Ubuntu 上安裝 Gogs。&lt;/p></description></item><item><title>在 Local 端處理 Github 專案 Pull Request</title><link>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</link><pubDate>Sat, 15 Mar 2014 03:00:27 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95.jpg?resize=500%2C198&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這篇會筆記如何將 &lt;a href="https://github.com/">Github&lt;/a> 上專案內的 &lt;a href="https://help.github.com/articles/using-pull-requests">Pull Request&lt;/a> 拉到 Local 端電腦，雖然現在大部分的 Open Source 都會寫 Unit Test 並且搭配免費的 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 自動化測試，但是有時候也是需要把別人的 Pull Request 拉下來測試後再進行 Merge，而 Github 官方有提供一篇說明文件 &lt;a href="https://help.github.com/articles/checking-out-pull-requests-locally">Checking out pull requests locally&lt;/a>，底下紀錄操作步驟。&lt;/p></description></item><item><title>Git Server 噴 git upload-pack: git-pack-objects died with error</title><link>https://blog.wu-boy.com/2014/02/git-server-git-pack-objects-died-with-error/</link><pubDate>Fri, 07 Feb 2014 10:32:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/02/git-server-git-pack-objects-died-with-error/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/8455538800/" title="Git-Logo-2Color by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm9.staticflickr.com/8523/8455538800_30f65954f8.jpg?w=840&amp;#038;ssl=1" style="max-width: 250px;" alt="Git-Logo-2Color" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>透過 &lt;a href="http://gitlab.org/">Gitlab&lt;/a> 架設 &lt;a href="http://git-scm.com/">Git&lt;/a> Server 來放一些 Document 資料，由於個人 Document 都是 pdf 檔案，所以整個 Git Repository 就非常肥大，今天在 Clone 下來的時候，不僅是主機 CPU 飆高，然後記憶體被吃到快沒了，最後還噴出底下錯誤訊息&lt;/p>
&lt;div>
&lt;pre class="brush: bash; title: ; notranslate" title="">remote: Counting objects: 4912, done.
remote: fatal: Out of memory, malloc failed
error: git upload-pack: git-pack-objects died with error.
fatal: git upload-pack: aborting due to possible repository corruption on the remote side.
remote: aborting due to possible repository corruption on the remote side.
fatal: early EOF
fatal: index-pack failed&lt;/pre>
&lt;/div></description></item><item><title>Drone.io 搭配 Ruby 環境測試</title><link>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</link><pubDate>Thu, 17 Oct 2013 02:54:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</guid><description>&lt;p>相信現在 &lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 已經是大家共通的版本控制工具，每當專案有新的 commit，我們可以透過 &lt;a href="https://travis-ci.org/" target="_blank">Travis&lt;/a> 來幫忙做測試，但是 Travis 真的只有支援測試而已，如果測試成功想要進一步 Deploy 到任何機器或者是繼續做任何動作，這些都不支援的，那國外有些 Service 可以整合 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 或 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a> Project 幫忙做到自動測試及 Deploy，比較常見的就是 &lt;a href="https://www.codeship.io" target="_blank">Codeship&lt;/a>，這服務非常強大，整合了 &lt;a href="https://www.heroku.com/" target="_blank">Heroku&lt;/a>，&lt;a href="https://appengine.google.com/" target="_blank">App Engine&lt;/a>，&lt;a href="https://www.nodejitsu.com/" target="_blank">Nodejitsu&lt;/a> .. 等服務，Deploy 也支援 &lt;a href="https://github.com/fabric/fabric" target="_blank">Fabric&lt;/a>, &lt;a href="http://puppetlabs.com/" target="_blank">Puppet&lt;/a>, Shell script 等等，這家的收費是看每個月做了多少次編譯測試動作，最便宜的方案每個月 $9 美金，只能編譯 50 次。&lt;/p></description></item><item><title>Git rebase + stash 小技巧</title><link>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</link><pubDate>Sun, 18 Aug 2013 03:37:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</guid><description>&lt;p>每天打開電腦，第一件事情就是將專案程式碼更新的最新，以便整合同事新開發的功能，免的跟自己寫的功能衝突，所以最常用用的就是 &lt;code>git pull --rebase origin master&lt;/code>，此命令使用 &lt;code>rebase&lt;/code> 來取代 &lt;code>merge&lt;/code> 程式碼，也可以避免在 log 清單內出現 &lt;code>merge branch master into master&lt;/code> 等字樣，但是如果在開發一半進度時，想同時將同事的程式碼先 merge 進來，會發現無法 merge，git 會請你先將 local 修改過的檔案 commit，才可以讓您更新，所以這時候我們可以用 git stash 方式來解決&lt;/p>
&lt;p>如果你在 master 分支上，並且想 pull 最新的 commit，可以透過底下指令步驟&lt;/p>
&lt;div>
&lt;pre class="brush: bash; title: ; notranslate" title="">$ git stash --include-untracked
$ git pull --rebase origin master
$ git stash pop
# fix conflict (merge)&lt;/pre>
&lt;/div></description></item><item><title>Git denying non-fast forward 問題</title><link>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</link><pubDate>Thu, 14 Mar 2013 08:21:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</guid><description>最近幫別公司處理 denying non-fast forward 的 git server 問題，沒事就別動檔案權限，不管是不是修改內容，只要用 chmod 指令，Git 還是會判別檔案變動。處理 git push 直接給我噴
$ git push --force origin master
Total 0 (delta 0), reused 0 (delta 0) error: denying non-fast forward refs/heads/master (you should pull first) To git@git.example.com:myrepo.git ! [remote rejected] master - master (non-fast forward) error: failed to push some refs to 'git@git.example.com:myrepo.git' 會遇到這問題的原因是使用者將不該 commit 的程式碼都 push 到伺服器上面，例如資料庫帳號密碼，個人帳蜜等等，這真的是不應該，解決方式也沒有很難，只要用 git reset --hard 到您需要的 commit hash 值，並且 git push --force 方式蓋掉 Server 上面的程式碼，但是如果遇到 git push &amp;ndash;force origin 或 git push &amp;ndash;force origin master 都無作用，那就請加上底下設定</description></item><item><title>在 git Commit 之前檢查 PHP 是否有錯誤</title><link>https://blog.wu-boy.com/2013/02/git-hooks-parse-php-error-before-commit/</link><pubDate>Fri, 08 Feb 2013 07:12:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/02/git-hooks-parse-php-error-before-commit/</guid><description> 在 commit code 之前，程式設計師必須確保程式碼的正確性，包含不要放入 debug message 到 git server，寫了一個簡單的 pre-commit 程式，來確保 PHP 是否有 Parse error，或者是在寫 CoffeeScript 及 JavaScript 時，常常會用到 console.* 來當作中斷點或者是顯示變數資料，這也是需要盡量避免 commit 到伺服器，你可不想要長官 review 的時候看到這麼多 debug 訊息吧。這時候就是需要 git-hooks 的 pre-commit 幫忙檢查這些 Syntax 語法，可以直接參考我的 git-hooks 專案。安裝方式很簡單:
$ git clone https://github.com/appleboy/git-hooks.git
$ chmod +x bin/hooks.sh pre-commit
$ ./bin/hooks.sh your_project_path 如果使用 git commit 之前，就會檢查 .js、.coffee、.php 等副檔名。</description></item><item><title>PHP 免費雲端主機 PHPFog vs Pagoda vs AppFog</title><link>https://blog.wu-boy.com/2012/10/php-cloud-hosting-phpfog-pagoda-appfog/</link><pubDate>Sat, 20 Oct 2012 02:35:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/10/php-cloud-hosting-phpfog-pagoda-appfog/</guid><description>&lt;div style="margin: 0 auto;text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6034284842/" title="php-logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm7.static.flickr.com/6186/6034284842_351ff33711_m.jpg?resize=240%2C127&amp;#038;ssl=1" alt="php-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div> 今天筆者來介紹幾套目前免費的雲端虛擬主機服務，自從
&lt;p>&lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 版本控制的出現後，大家可以發現，以往免費的虛擬主機搭配後台 Panel，這種模式已經不再看到，取代而之的就是用 Git 來管理程式碼，而不是用 FTP 上下傳方式了。筆者認為學會 Git，是一件非常重要的事情，這樣可以嘗試不同雲端服務，，像是 &lt;a href="https://phpfog.com/" target="_blank">PHPFog&lt;/a>，&lt;a href="https://pagodabox.com/" target="_blank">Pagoda Box&lt;/a>，&lt;a href="http://www.appfog.com/" target="_blank">AppFog&lt;/a> &amp;hellip;等。這次介紹的雲端主機服務不同於 &lt;a href="http://www.linode.com/" target="_blank">Linode VPS&lt;/a>，Linode 是可以拿到完整的虛擬主機權限，可以進行主機的效能優化，以及安裝合適的套件。&lt;/p></description></item><item><title>新人 Git 版本控制教學</title><link>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</link><pubDate>Mon, 06 Feb 2012 03:34:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</guid><description>昨日去台北簡報如何快速學習 git，投影片主要是給新手 git 基礎介紹，如何使用 branch model，git submodule 及 tag。內容不會很難，適合之前就玩過任何一套 version control 的使用者來閱讀，如果有 svn 基礎，學習會比較輕鬆。簡報搭配 github 內容來教學。
投影片內容參考 Git Pro book 這網站教學，大家可以直接看原文說明，會更清楚 Git 使用。</description></item><item><title>Github 支援 SVN Client</title><link>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</link><pubDate>Sun, 23 Oct 2011 05:43:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</guid><description>Github 一年前宣佈開始支援 SVN Client，不過這是必須透過 https://svn.github.com 才可以取得資料，跟一般 git 的網址不一樣，然而就在最近宣佈了同步支援 svn 也可以存取 https://github.com/，並且過不久的將來會移除 https://svn.github.com/ 網域。
URL 處理 git 方式: $ git clone https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan git-ds
Cloning into git-ds...
remote: Counting objects: 4177, done.
remote: Compressing objects: 100% (665/665), done.
remote: Total 4177 (delta 3544), reused 4140 (delta 3509)
Receiving objects: 100% (4177/4177), 2.65 MiB | 239 KiB/s, done.
Resolving deltas: 100% (3544/3544), done. svn 方式: $ svn checkout https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan svn-ds
A svn-ds/branches
A svn-ds/branches/develop
A svn-ds/branches/develop/README
A svn-ds/branches/develop/changelog.</description></item><item><title>轉移 Github 上的 Private Repository 到 BitBucket …</title><link>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</link><pubDate>Mon, 17 Oct 2011 06:45:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</guid><description>&lt;div style="margin:auto 0; text-align: center;">
&lt;a href="https://www.flickr.com/photos/appleboy/6209323485/" title="Bitbucket by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6161/6209323485_9ffbcb2911_o.png?resize=256%2C256&amp;#038;ssl=1" alt="Bitbucket" data-recalc-dims="1" />&lt;/a>
&lt;/div> 看到
&lt;p>&lt;a href="http://blog.gslin.org/" target="_blank">gslin 大神&lt;/a>寫了一篇 &lt;a href="http://blog.gslin.org/archives/2011/10/10/2750/%e6%8a%8a-github-%e4%b8%8a%e7%9a%84-private-repository-%e6%90%ac%e5%88%b0-bitbucket-%e4%b8%8a/" target="_blank">把 GitHub 上的 private repository 搬到 BitBucket 上…&lt;/a>，最近自己也把一些不能公開的專案轉到 &lt;a href="https://bitbucket.org/" target="_blank">BitBucket&lt;/a> 上面，由於在 BitBucket 上面可以無限開 private repository，所以我想也沒有必要付費給 &lt;a href="https://github.com/" target="_blank">Github&lt;/a>，雖然論 Web 功能上而言，Github 還是略勝一籌，個人還是比較習慣 github 有 Network 的圖形可以看，不過平常還是都是在打指令，所以也沒差了，在 push 速度上面，感覺 BitBucket 也沒有輸 github 許多，所以決定就轉過去了，人總是為了錢所考量，當然 BitBucket 還是有些缺點的，可以參考之前寫的 &lt;a href="http://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/" target="_blank">Bitbucket 開始支援 Git Repository&lt;/a>&lt;/p></description></item><item><title>在 CentOS 上面安裝 Ruby 環境</title><link>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</link><pubDate>Thu, 13 Oct 2011 08:20:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6239698353/" title="centos by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm7.static.flickr.com/6176/6239698353_3e6c99f692_o.png?resize=293%2C79&amp;#038;ssl=1" alt="centos" data-recalc-dims="1" />&lt;/a>
&lt;/div> 目前開發網站都傾向於用
&lt;p>&lt;a href="http://compass-style.org" target="_blank">Compass&lt;/a> 這套 CSS Framework 來 develop，開發之前必須把環境先弄好，就是要有 &lt;a href="http://www.ruby-lang.org/" target="_blank">Ruby&lt;/a> 套件才可以安裝 Compass，網路上的教學幾乎都在是 Ubuntu 底下用 apt-get 方式來安裝，其實相當方便，但是 &lt;a href="http://fedoraproject.org/" target="_blank">Fedora&lt;/a> 或 &lt;a href="http://www.centos.org/" target="_blank">CentOS&lt;/a> 就是要用 yum 方式來安裝，這次碰到 CentOS 竟然 yum search git 出來的結果是空的，所以決定全部都透過 tar 的方式來安裝全部套件了。由於 Fedora 幾乎都可以找到套件，但是碰到 &lt;a href="http://rubygems.org/" target="_blank">rubygems&lt;/a> 需要用到 ruby 1.8.7 以上版本，所以還是乖乖的用 tar 方式吧。 大家可以試試看透過底下 yum 方式安裝:&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">yum install -y ruby ruby-devel rubygems&lt;/pre> 雖然 Fedora 透過上面可以安裝成功，可是 ruby 跟 rubygems 的版本根本是...太舊了吧 ...</description></item><item><title>Bitbucket 開始支援 Git Repository</title><link>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</link><pubDate>Tue, 04 Oct 2011 02:30:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</guid><description>很高興剛剛收到 Bitbucket 寄來一封會員信，標題非常吸引大家的注意，那就是 Bitbucket now rocks Git.，是的，你沒看錯，Bitbucket 現在開始支援 Git repository，不再只有 Mercurial 可以使用，這還不算什麼，Bitbucket 更是推出**無限制免費 private repos for free **，這樣的推出，不知道會有多少 Github 用戶轉移到 Bitbucket 上面，還有另一項主因就是 Unlimited disk space 無限制硬碟容量，不過也許不用高興的太早，Bitbucket 在使用者人數上面有些限制，可以參考 Plans &amp;amp; Pricing，免費方案每個 Repository 只能有5個 User，反觀 Github 並沒有這限制，不過我想這也不是問題，大家可以 Fork 到自己的專案，在 Pull Request 即可。 補充官方網站提供了轉換各大 Source Hosting 工具，目前支援 Github、SourceForge、Google Code、Subversion、Mercurial…等。</description></item><item><title>版本控制 svn move 移動或更名</title><link>https://blog.wu-boy.com/2011/09/svn-mv-vs-git-mv/</link><pubDate>Tue, 27 Sep 2011 06:06:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/09/svn-mv-vs-git-mv/</guid><description>公司採用 svn 當作版本控制，而我最近在整理 svn 上面全部的 source code。基本上我都會將 git 跟 svn 也一起搭配著用，因為個人比較熟悉 git 的操作方式，然而跟同事討論了專案目錄的架構，進而要把一些目錄轉換大小寫，本來的 App 就改成 app，這個在 git 底下(OS: Linux)操作非常容易，直接 git mv App app，之後看 git status 可以發現底下輸出：
# On branch develop
# Changes to be committed:
# (use "git reset HEAD ..." to unstage)
#
# renamed: nav/hacks.txt - Nav/hacks.txt
# renamed: nav/moo.fx.js - Nav/moo.fx.js
# renamed: nav/moo.fx.pack.js - Nav/moo.fx.pack.js
# renamed: nav/nav.js - Nav/nav.js
# renamed: nav/prototype.lite.js - Nav/prototype.lite.js
# renamed: nav/user_guide_menu.</description></item><item><title>Git Submodule 介紹與使用</title><link>https://blog.wu-boy.com/2011/09/introduction-to-git-submodule/</link><pubDate>Thu, 22 Sep 2011 12:30:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/09/introduction-to-git-submodule/</guid><description>&lt;p>自己用 &lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 已經很長一段時間了，沒用過 git submodule 的話真的是對不起自己，今天來筆記 &lt;a href="http://book.git-scm.com/5_submodules.html" target="_blank">Git Submodule&lt;/a> 一些操作步驟及說明。&lt;/p>
&lt;h2 id="git-submodule-使用時機">git Submodule 使用時機&lt;/h2>
&lt;p>大家在開發新專案的時候，不知道有沒有用到其他專案的程式碼，像是 Web 專案，也許會用到 &lt;a href="http://www.blueprintcss.org/" target="_blank">Blueprintcss CSS Framwork&lt;/a> 或者是 &lt;a href="http://sass-lang.com/" target="_blank">Sass&lt;/a>，這些專案目前都放在 &lt;a href="http://github.com" target="_blank">Github&lt;/a> 上面進行維護，以前的作法就是先 git clone 下來，把要的檔案分別複製到自己專案，可是問題來了，如果官方更新了程式碼，那自己的專案如何更新呢？難道是重複步驟把檔案複製到原來地方嗎？這樣會不會太麻煩，這時候就是需要 &lt;span style="color:green">&lt;strong>git submodule&lt;/strong>&lt;/span> 來幫助大家進行程式碼的更新，這樣隨時隨地都可以取得最新的程式碼。補充說明一點，git 目前無法針對單一專案底下的單一檔案或目錄進行 clone，而必須 clone 整個目錄，這點跟 &lt;a href="http://subversion.tigris.org/" target="_blank">svn&lt;/a> 有很大的不同，所以 git 可以建立各個不同的 submodule 來整合成一個大型 Project。換句話說就是: 在您的專案底下，&lt;strong>&lt;span style="color:red">你可以任意將其他人的專案掛載在自己任何目錄底下&lt;/span>&lt;/strong>。&lt;/p></description></item><item><title>git cherry-pick 處理專案 pull request</title><link>https://blog.wu-boy.com/2011/08/git-cherry-pick-%E8%99%95%E7%90%86%E5%B0%88%E6%A1%88-pull-request/</link><pubDate>Sat, 27 Aug 2011 04:11:09 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/08/git-cherry-pick-%E8%99%95%E7%90%86%E5%B0%88%E6%A1%88-pull-request/</guid><description>很高興最近有些網路上朋友想要加入翻譯 CodeIgniter 的計畫，本人在 2009 年開啟這計畫時，就打算用當時蠻熱門的 git 來控管翻譯的進度，然而也選用了 github 來當作 Web 平台，可是大家對於入門 git 有很大的挫折，其實學習 git 沒有想像中這麼難，想要貢獻自己的程式碼都可以在 github 找到教學步驟，2009 年那時候 github 文件還尚未像現在這麼完整，入門之前可以先閱讀 git help 教學，貢獻程式碼之前可以先 Fork 專案，接著進行 Pull request，這些都是透過 Web 介面就可以做到了，但是大家在 pull request 之前記得先將專案程式碼更新，以及 pull request 時選取需要的 commit 阿，先看一個範例，有朋友發了一個 XML-RPC Class 翻譯的 Chinese Pull request 來，但是大家有沒有看到內容，裡面還包含了先前 Html Table 翻譯，所以這時候我就必須用 git cherry-pick 來挑選需要的 commit。
git cherry-pick 使用方法 我們如何 Merge 別人的 pull request，首先新增 remote add branch:
# gname 可以自己自訂 git remote add gname https://github.</description></item><item><title>CodeIgniter 轉移版本控制到 Github 順便 Release 2.0.3</title><link>https://blog.wu-boy.com/2011/08/codeigniter-%E8%BD%89%E7%A7%BB%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%B0-github-%E9%A0%86%E4%BE%BF-release-2-0-3/</link><pubDate>Mon, 22 Aug 2011 07:33:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/08/codeigniter-%E8%BD%89%E7%A7%BB%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%B0-github-%E9%A0%86%E4%BE%BF-release-2-0-3/</guid><description>在我上禮拜 8/20,8/21 參加 COSCUP 2011 會議的時候，CodeIgniter 偷偷 Release 了 2.0.3 版本，也不算偷偷 Release，因為剛好8月20,21號也是 CICON 2011 會議，CodeIgniter 想給來聽演講的學員們一個驚喜吧，也因為這個 CodeIgniter Con 2011 會議，官方也宣佈將轉換版本控制，原本放在 bitbucket 的程式碼也都轉換到 Github 上面了，另外順便把 CodeIgniter Reactor 取消後面 Reactor 字串，改成 CodeIgniter 了，那 Reactor 呢，就變成 Develop 分支，這個消息真的是太棒了，轉換到大家所熟悉的 Git 版本控制，有些常常在貢獻程式碼的開發者，都是在使用 Github。不管是不是 CodeIgniter，其他許多 opensource 包含 jQuery, phpBB…等都是在使用 github。 [
直接下載 2.0.3 玩看看吧]1 參考: 繁體中文 CodeIgniter 官方公告</description></item><item><title>用 git 指令產生 Change log 格式</title><link>https://blog.wu-boy.com/2011/06/%E7%94%A8-git-%E6%8C%87%E4%BB%A4%E7%94%A2%E7%94%9F-change-log-%E6%A0%BC%E5%BC%8F/</link><pubDate>Mon, 27 Jun 2011 16:04:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/06/%E7%94%A8-git-%E6%8C%87%E4%BB%A4%E7%94%A2%E7%94%9F-change-log-%E6%A0%BC%E5%BC%8F/</guid><description>Git 真的是一套非常好用的版本控制工具，在網路上看到一篇 Making a Changelog from Git commit messages 裡面提到一篇新手必看的 git branch model，剛好這篇我也寫了中文解說的部份『Git 版本控制 branch model 分支模組基本介紹』，回歸正題，此篇是介紹如何用 git 指令產生 Change log 檔案，平常 Change log 都會寫成類似底下的 format:
- Add Chinese Traditional language file
- Changed to use count_all_results.
- Added permissions checking to activation in example controller. - Fixed an example in the userguide
- changed phrases to more typical ones 在 git log 裡面寫了很多 commit message 該如何 format 成上面的格式呢，其實很簡單，只要打入下面指令 #
#--no-merges: 不要秀出 merge message
#--pretty=format:' - %s' : 關鍵 format
git log --no-merges --pretty=format:' - %s'
另外我們還可以透過 --graph 顯示圖形式的 log 顯示，指令如下: git log --graph --pretty=format:'%s - %Cred%h%Creset %Cgreen(%cr)%Creset %an' --abbrev-commit --date=relative
顯示結果如下 * Add Chinese Traditional language file - 1767c60 (4 months ago) Bo-Yi Wu
* Changed to use count_all_results.</description></item><item><title>版本控制 version control git clean 使用時機</title><link>https://blog.wu-boy.com/2011/05/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-version-control-git-clean-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F/</link><pubDate>Fri, 20 May 2011 04:55:17 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/05/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-version-control-git-clean-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F/</guid><description>在做公司的每一個案子，我都會使用 git 來做版本控制，雖然公司只有用 svn 控管，但是只要網路掛掉，就不能做任何事情了，更不用說 svn Server 掛點，因為 git 開 branch 免錢，因此每當我拿到新案子就按照 Git 版本控制 branch model 分支模組基本介紹 開了固定幾個 branch，由於剛開始 git init 沒有把 .gitignore 寫好，所以 commit 了一堆 *.o 或者是 *.ko 類似的檔案，我用了 git rm &amp;ndash;cached 方式砍了，結果在切換 branch 的時候出現底下錯誤訊息:
error: Untracked working tree file &amp;lsquo;XXXXXXXX&amp;rsquo; would be overwritten by merge. 這是因為當你 git rm &amp;ndash;cached 檔案之後，切換 branch 時候會遇到衝突，本來的 master 分支還是存在這些檔案阿，因此這時候就要靠 git clean 來清掉移除檔案，可以利用 git help clean 來查看使用手冊。 Ref: Force git to overwrite local files on pull.</description></item><item><title>在 Ubuntu 安裝或升級 Git 版本控制的3種方法</title><link>https://blog.wu-boy.com/2011/04/%E5%9C%A8-ubuntu-%E5%AE%89%E8%A3%9D%E6%88%96%E5%8D%87%E7%B4%9A-git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%843%E7%A8%AE%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 27 Apr 2011 11:41:38 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/04/%E5%9C%A8-ubuntu-%E5%AE%89%E8%A3%9D%E6%88%96%E5%8D%87%E7%B4%9A-git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%843%E7%A8%AE%E6%96%B9%E6%B3%95/</guid><description>Git 是目前還蠻 popular 的一套版本控制軟體，很多公司及大小型專案都用 g是it 來控管流程，或者是搭配 redmine 專案管理，然而 git 大家都會想到 github 這個儲存空間，免費註冊就有 300MB 的空間讓大家使用，如果對於 git 的使用方式，我推薦一個非常好的網站，就 git wiki，這網站不只是教你 git 指令應用，還收集了很多不錯的網站，底下介紹三種 git 的安裝方式：
1. Ubuntu 底下就用 apt-get 指令 # git core
apt-get -y install git-core git-doc git-gui gitk 如果你有用 Ubuntu 介面，就可以安裝 git-gui 跟 gitk 還不錯 2. 下載 Git Source 打包檔，並且編譯 apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
wget http://kernel.org/pub/software/scm/git/git-1.7.5.tar.gz
tar -zxvf git-1.7.5.tar.gz
cd git-1.7.5
make prefix=/usr/local all
sudo make prefix=/usr/local install 3.</description></item><item><title>解決在 Ubuntu Terminal 底下 git diff 沒有輸出結果 10.10</title><link>https://blog.wu-boy.com/2011/04/%E8%A7%A3%E6%B1%BA%E5%9C%A8-ubuntu-terminal-%E5%BA%95%E4%B8%8B-git-diff-%E6%B2%92%E6%9C%89%E8%BC%B8%E5%87%BA%E7%B5%90%E6%9E%9C-10-10/</link><pubDate>Tue, 19 Apr 2011 12:35:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/04/%E8%A7%A3%E6%B1%BA%E5%9C%A8-ubuntu-terminal-%E5%BA%95%E4%B8%8B-git-diff-%E6%B2%92%E6%9C%89%E8%BC%B8%E5%87%BA%E7%B5%90%E6%9E%9C-10-10/</guid><description>自從把筆電安裝成 Ubuntu 10.10 maverick 後，把所有 github 上面程式碼都用 git clone 下來，最近遇到一個非常奇怪的問題，那就是修改檔案之後，正常來講，可以用 git diff 來查看修改過的程式碼，但是非常奇怪的事情就發生了，『完全沒有輸出』，後來在網路上找到一篇解法 git diff shows no output，原來是 $LESS 這個環境變數搞的鬼，其實可以用 git diff | cat 方式看到 diff 結果。 我們打開 .bashrc 發現底下設定
export EDITOR="vim"
export GIT_PAGER="less"
export LESS="-XEfmrSw"
export PAGER="most" 重點就在於 $LESS 必須加上 -X，並且請裝上 most 這指令
apt-get install most</description></item><item><title>Git 版本控制 branch model 分支模組基本介紹</title><link>https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</link><pubDate>Wed, 02 Mar 2011 04:45:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</guid><description>&lt;p>我相信大家對於 &lt;a href="http://git-scm.com/">Git&lt;/a> 版本控制不陌生了，Git 最大強項就是可以任意建立 branch，讓您開發程式不需要擔心原本的程式碼會被動到，造成不知道該怎麼恢復原來的狀態。為了不影響產品發展，branch 對於大型工作團隊就顯得更重要了，今天在網路上看到一篇 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model&lt;/a> 文章，裡面把 branch 使用方式寫得非常清楚，底下我會透過指令來說明如何使用簡單 branch 指令，當然請大家先去 &lt;a href="https://github.com/">github&lt;/a> 註冊申請帳號，如果不想申請帳號，也可以自己在 local 端去執行。&lt;/p>
&lt;p>底下所引用的圖片都是經由 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model&lt;/a> 文章所提供。&lt;/p>
&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/5488984404/" title="git-flow by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm6.static.flickr.com/5293/5488984404_4f693eec32_z.jpg?resize=480%2C640&amp;#038;ssl=1" alt="git-flow" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>看到這張圖其實就說明了 branch 最重要的精神:『無限建立分支』，大家也不用害怕看不懂這張圖，底下說明 branch 分支狀況&lt;/p></description></item><item><title>[Git] 版本控制: 如何使用標籤(Tag)</title><link>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</link><pubDate>Thu, 18 Nov 2010 14:45:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</guid><description>&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> Tag 功能就如同 Cvs Tag 是一樣的，您可以在專案裡面隨意新增 Tag，方便您紀錄訊息，底下一些基本的操作來學習如何使用標籤(Tag)功能(新增標籤、以及各種不同類型標籤之間的差別)。&lt;/p>
&lt;h2 id="列出既有標籤">列出既有標籤&lt;/h2>
&lt;p>直接使用 git tag 即可&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git tag -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果整個專案過多 Tag 也可以透過底下方式搜尋出來&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#hl-1-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git tag -l &lt;span style="color:#cd5555">&amp;#39;v1.4.2.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v1.4.2.4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Git 版本控制：利用 git reset 恢復檔案、暫存狀態、commit 訊息</title><link>https://blog.wu-boy.com/2010/08/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%88%A9%E7%94%A8-git-reset-%E6%81%A2%E5%BE%A9%E6%AA%94%E6%A1%88%E3%80%81%E6%9A%AB%E5%AD%98%E7%8B%80%E6%85%8B%E3%80%81commit-%E8%A8%8A%E6%81%AF/</link><pubDate>Fri, 20 Aug 2010 12:15:50 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2010/08/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%88%A9%E7%94%A8-git-reset-%E6%81%A2%E5%BE%A9%E6%AA%94%E6%A1%88%E3%80%81%E6%9A%AB%E5%AD%98%E7%8B%80%E6%85%8B%E3%80%81commit-%E8%A8%8A%E6%81%AF/</guid><description>&lt;p>這次來介紹一下 &lt;a href="http://git-scm.com/">git&lt;/a> reset 的用法，為什麼會介紹這指令呢？因為今天想要看專案狀態，用 git status 觀看，發現被我玩爛了，所以出現了底下錯誤訊息：&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">$ git status
error: bad index file sha1 signature
fatal: index file corrupt&lt;/pre> 解決此問題非常簡單，要先刪除 index 檔案，請先砍掉
&lt;p>&lt;span style="color:green">&lt;strong>.git/index&lt;/strong>&lt;/span>，恢復此 index 請用&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">git reset&lt;/pre> 這行指令相當於
&lt;p>&lt;span style="color:red">&lt;strong>git reset &amp;ndash;mixed HEAD&lt;/strong>&lt;/span>，或者是可以用 &lt;span style="color:red">&lt;strong>git read-tree&lt;/strong>&lt;/span> 來取代 git reset，當然 git reset 不只是有這功能而已，假如您已經建立了 commit 訊息，也可以將此訊息拿掉，重新在 commit，或者是您修改過的檔案在暫存區，git 也可以幫您恢復到未暫存，或者是不想要這次的修改，也可以恢復到未修改的檔案喔。&lt;/p>
&lt;h3 id="取消已經暫存的檔案-假如我們有兩個檔案需要-commit但是不小心按到-git-add--全部加入到暫存區那該怎麼恢復呢">取消已經暫存的檔案 假如我們有兩個檔案需要 commit，但是不小心按到 git add * 全部加入到暫存區，那該怎麼恢復呢？&lt;/h3>
&lt;pre class="brush: bash; title: ; notranslate" title=""># On branch master
# Changes to be committed:
# (use "git reset HEAD &lt;file>..." to unstage)
#
# modified: Makefile
# modified: user/easy_setup/easysetup.h
#&lt;/pre> 上面是以經在暫存區裡面等待被 commit 檔案(
&lt;p>&lt;span style="color:green">Changes to be committed&lt;/span>)，大家可以看到括號裡面有提示如何拿掉 (use &amp;ldquo;git reset HEAD &lt;file>&amp;hellip;&amp;rdquo; to unstage)，所以我們下：&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">git reset HEAD user/easy_setup/easysetup.h&lt;/pre> 之後會看到 『
&lt;p>&lt;span style="color:red">user/easy_setup/easysetup.h: locally modified&lt;/span>』此訊息，這時候在用 git status 看狀態&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title=""># On branch master
# Changes to be committed:
# (use "git reset HEAD &lt;file>..." to unstage)
#
# modified: Makefile
#
# Changed but not updated:
# (use "git add &lt;file>..." to update what will be committed)
#
# modified: user/easy_setup/easysetup.h
#&lt;/pre></description></item><item><title>Git 版本控制: 「You have some suspicious patch lines」</title><link>https://blog.wu-boy.com/2010/08/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E3%80%8Cyou-have-some-suspicious-patch-lines%E3%80%8D/</link><pubDate>Wed, 18 Aug 2010 06:18:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2010/08/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E3%80%8Cyou-have-some-suspicious-patch-lines%E3%80%8D/</guid><description>相信大家對 Git 並不陌生，這次在升級 Moztw 的討論區，從 3.0.5 升級到 3.0.7 p1，過程由其他 Moztw 成員升級，我在將最後程式 commit 到 github，因為兩個版本差異性很大，所以有新增多個檔案，commit 過程出現了錯誤訊息：「You have some suspicious patch lines」，這是因為 git 會檢查每行程式碼最後是否有多餘空白或者是 Tab 按鍵，為瞭解決此問題，可以去修改 .git/hooks/pre-commit，將底下程式碼：
if (s/^\+//) {
$lineno++;
chomp;
if (/\s$/) {
bad_line("trailing whitespace", $_);
}
if (/^\s* \t/) {
bad_line("indent SP followed by a TAB", $_);
}
if (/^([])\1{6} |^={7}$/) {
bad_line("unresolved merge conflict", $_);
}
} 改成： if (s/^\+//) {
$lineno++;
chomp;
# if (/\s$/) {
# bad_line("</description></item><item><title>[Git] how to remove file and commit from history(如何移除 commit 歷史紀錄)</title><link>https://blog.wu-boy.com/2009/12/git-how-to-remove-file-and-commit-from-history%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4-commit-%E6%AD%B7%E5%8F%B2%E7%B4%80%E9%8C%84/</link><pubDate>Tue, 29 Dec 2009 12:59:40 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2009/12/git-how-to-remove-file-and-commit-from-history%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4-commit-%E6%AD%B7%E5%8F%B2%E7%B4%80%E9%8C%84/</guid><description>今天在 commit 程式碼到 github 網站，不小心把 Plurk 帳號密碼給 commit 上去，發生這種事情，所以趕快上網查了一下如何移除 commit 歷史紀錄： 假設我們的 commit tree 如下：
R&amp;ndash;A&amp;ndash;B&amp;ndash;C&amp;ndash;D&amp;ndash;E&amp;ndash;HEAD 接下來要移除 B 跟 C 的 commit tree，變成
R&amp;ndash;A&amp;ndash;D&amp;rsquo;&amp;ndash;E&amp;ndash;HEAD 有兩種方式可以移除 B &amp;amp; C
# detach head and move to D commit
git checkout
# move HEAD to A, but leave the index and working tree as for D
git reset --soft
# Redo the D commit re-using the commit message, but now on top of A
git commit -C
# Re-apply everything from the old D onwards onto this new place git rebase --onto HEAD master
# push it
git push --force
另一種方法是利用 cherry-pick 方式 git rebase --hard git cherry-pick git cherry-pick 這會直接忽略 B 跟 C 的 history，詳細資料可以查詢 git help cherry-pick 或者是 git help rebase 參考： Git: removing selected commits from repository Git: how to remove file and commit from history Re: !</description></item><item><title>[FreeBSD] 簡易架設 git Server，git 使用教學</title><link>https://blog.wu-boy.com/2009/10/freebsd-%E7%B0%A1%E6%98%93%E6%9E%B6%E8%A8%AD-git-server%EF%BC%8Cgit-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</link><pubDate>Mon, 05 Oct 2009 06:18:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2009/10/freebsd-%E7%B0%A1%E6%98%93%E6%9E%B6%E8%A8%AD-git-server%EF%BC%8Cgit-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</guid><description>&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 是一套免費 open source 的版本控制軟體，另外還有很多套版本控制軟體，如：&lt;a href="http://mercurial.selenic.com/wiki/">Mercurial&lt;/a>, &lt;a href="http://bazaar-vcs.org/">Bazaar&lt;/a>, &lt;a href="http://subversion.tigris.org/">Subversion&lt;/a>, &lt;a href="http://www.nongnu.org/cvs/">CVS&lt;/a>, &lt;a href="http://www.perforce.com/">Perforce&lt;/a>, and &lt;a href="http://msdn.microsoft.com/en-us/vstudio/aa718670.aspx">Visual SourceSafe&lt;/a>，其中 Mercurial 又是 &lt;a href="http://googlecode.blogspot.com/2009/04/mercurial-support-for-project-hosting.html">Google Code Project Hosting 採用的版本控制系統&lt;/a>，當然 google 也支援原本的 &lt;a href="http://subversion.tigris.org/">Subversion&lt;/a>，Git 為現在很紅的一套版本控制 Software，底下紀錄在 &lt;a href="http://www.freebsd.org/">FreeBSD&lt;/a> 如何架設簡易 Git Server。 1. 利用 FreeBSD ports 安裝：&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">cd /usr/ports/devel/git; make install clean&lt;/pre> 2. 修改 /etc/rc.conf
&lt;pre class="brush: bash; title: ; notranslate" title="">git_daemon_enable="YES"
git_daemon_directory="/path/git/repo"
git_daemon_flags="--export-all --syslog --enable=receive-pack --listen=192.168.1.1"&lt;/pre> 注意 git\_daemon\_flags 可以加入 --verbose 參數，以方便 debug 3. 新增使用者 git
&lt;pre class="brush: bash; title: ; notranslate" title="">pw user add git&lt;/pre> 4. 啟動 git daemon
&lt;pre class="brush: bash; title: ; notranslate" title="">/usr/local/etc/rc.d/git_daemon start&lt;/pre> 您會發現多出 9418 連接埠，就是成功了</description></item></channel></rss>