<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Travis CI on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/travis-ci/</link><description>Recent content in Travis CI on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 17 Sep 2016 08:25:13 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/travis-ci/feed.xml" rel="self" type="application/rss+xml"/><item><title>在 Travis 實現 Docker Cache</title><link>https://blog.wu-boy.com/2016/09/docker-cache-on-travis/</link><pubDate>Sat, 17 Sep 2016 08:25:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/docker-cache-on-travis/</guid><description>&lt;p>&lt;a href="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?ssl=1">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>前一篇寫了『&lt;a href="https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/">用 Travis 自動上傳 Docker Image&lt;/a>』，Travis 跑完測試成功後才自動編譯 Docker Image 並且上傳到 Docker Hub。在每次 commit 後，&lt;a href="https://travis-ci.com/">Travis&lt;/a> 執行 docker build 時間總是非常長，當然原因很多。如果選用的 Docker base image 非常肥，指令非常多，每次編譯都要重新下載及執行指令，所以執行時間就是這麼長。本篇就是想辦法減少 Travis 編譯 Image 時間，就像把 &lt;code>node_modules&lt;/code> 壓縮起來，下次執行測試前先解壓縮再安裝，可以大幅減少 npm install 時間(可以參考之前的『&lt;a href="https://blog.wu-boy.com/2016/07/speed-up-npm-install-command/">用一行指令加速 npm install&lt;/a>』)。這邊我們就需要用到 Travis 的 &lt;a href="https://docs.travis-ci.com/user/caching/">Cache 功能&lt;/a>。&lt;/p></description></item><item><title>用 Travis 自動上傳 Docker Image 到 Docker Registry</title><link>https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/</link><pubDate>Sat, 17 Sep 2016 07:13:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/09/upload-docker-image-to-registry-using-travis/</guid><description>&lt;p>&lt;a href="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?ssl=1">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_c.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在今年七月寫了一篇『&lt;a href="https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/">在 Travis 升級 Docker 和 docker-compose 版本&lt;/a>』，就在上個月底 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 終於將 &lt;a href="https://www.docker.com/">Docker&lt;/a> 預設版本換成 1.12.x 版本，並且將 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 也一併升級到 1.8.0，這樣就可以不用手動升級了。那這篇會紀錄如何用 Travis 自動編譯 Docker Image 並且上傳到 &lt;a href="https://hub.docker.com/">Docker Hub&lt;/a>。Docker Hub 提供兩種方式讓開發者上傳 Image，第一種是透過 Command line 下指令手動上傳，另外一種則是在 Docker Hub 後台指定 Dockerfile 路徑及需要執行編譯的分支，這樣只要 Push commit 到 &lt;a href="https://github.com/">Github&lt;/a>，Docker Hub 就會根據 &lt;a href="https://docs.docker.com/engine/reference/builder/">Dockerfile&lt;/a> 來自動編譯 Docker Image。本篇會介紹如何透過 Travis 服務來自動上傳 Dokcer Image，像是 Golang 的部屬方式通常是編譯出 Binary 執行檔後，將此執行檔加入 Image 最後才上傳。&lt;/p></description></item><item><title>在 Travis 升級 Docker 和 docker-compose 版本</title><link>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</link><pubDate>Mon, 25 Jul 2016 13:10:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://travis-ci.org/">Travis&lt;/a> 是在 &lt;a href="https://github.com/">Github&lt;/a> 上常用的整合測試服務，支援了各種程式語言 &lt;a href="https://golang.org/">Golang&lt;/a>, PHP, Node.js ..等測試及部署，也同時支援了一些常用 Service，像是 &lt;a href="https://www.docker.com/">Docker&lt;/a>, Redis 或 Database。這次來聊聊&lt;a href="https://docs.travis-ci.com/user/docker/">在 Travis 如何使用 Docker&lt;/a>，在 Travis 內建的 Docker 跟 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 版本都是非常舊，所以使用預設的 docker-compose 指令常常會出現 (詳細 build log 可以參考&lt;a href="https://travis-ci.org/appleboy/golang-testing/jobs/147125401">這裡&lt;/a>)&lt;/p></description></item><item><title>新的 code coverage 線上服務 codecov.io</title><link>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</link><pubDate>Sat, 16 Jul 2016 07:50:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/28259851031/in/dateposted-public/" title="Screen Shot 2016-07-16 at 3.04.50 PM">&lt;img src="https://i1.wp.com/c8.staticflickr.com/9/8684/28259851031_de845f4e56_z.jpg?resize=640%2C355&amp;#038;ssl=1" alt="Screen Shot 2016-07-16 at 3.04.50 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>代碼覆蓋率 (code coverage) 是開發流程蠻重要的一環，用來評估專案內測試的覆蓋率，也代表了自己寫的程式，至少要測試過一次。在 &lt;a href="https://github.com">Github&lt;/a> 上面最常用的一套就是 &lt;a href="https://coveralls.io/">Coveralls&lt;/a> 相信大家對於此服務並不陌生，一個好的 Open Source 專案一定會在 Readme 上附上 Coveralls badge，證明自己寫的專案都有經過測試，請安心使用。在導入 Coveralls 服務到專案內時，安裝步驟有點小複雜，雖然不難，但是還是需要安裝一些 Tool 才能完成，底下用 &lt;a href="https://golang.org/">Golang&lt;/a> 為例。&lt;/p></description></item><item><title>Ruby Compass and Sass Auto Testing Environment</title><link>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</link><pubDate>Tue, 11 Mar 2014 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6213260474/" title="Compass Home Compass Documentation by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm7.static.flickr.com/6217/6213260474_e0e51eeefe_o.png?resize=486%2C110&amp;#038;ssl=1" alt="Compass Home Compass Documentation" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://compass-style.org/">Compass&lt;/a> 是一套 CSS Authoring Framework，也是基於 &lt;a href="http://sass-lang.com/">Sass&lt;/a> 語法的一套 Framework，先前寫了 &lt;a href="http://gulpjs.com/">Gulp&lt;/a> 的 &lt;a href="https://github.com/appleboy/gulp-compass">Compass Plugin&lt;/a>，在針對自動化測試時候出現版本相依性不同，造成無法自動測試成功。自動化測試目前跟 &lt;a href="http://github.com">Github&lt;/a> 最常搭配的就是 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 或者是 &lt;a href="https://www.codeship.io/">Codeship&lt;/a>，當然如果非 Open source 專案可能就要自己架設 &lt;a href="http://en.wikipedia.org/wiki/Continuous_integration">CI&lt;/a> 伺服器，個人推薦就是 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a>。這次遇到的問題其實跟 Ruby Gem 版本相依性有關，由於要測試 Compass 所有 Command 語法，所以使用了 &lt;a href="http://susy.oddbird.net/">Susy&lt;/a> + sass + compass，如果在 &lt;code>.travis.yml&lt;/code> 內直接寫&lt;/p></description></item></channel></rss>