<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>queue on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/queue/</link><description>Recent content in queue on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sun, 19 Sep 2021 14:50:42 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/queue/feed.xml" rel="self" type="application/rss+xml"/><item><title>NSQ Consumers 處理 Graceful Shutdown 技巧</title><link>https://blog.wu-boy.com/2021/09/graceful-shutdown-with-nsq-consumers/</link><pubDate>Sun, 19 Sep 2021 14:50:42 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/09/graceful-shutdown-with-nsq-consumers/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/i98snGt.png" alt="Imgur">&lt;/p>
&lt;p>&lt;a href="https://nsq.io/">NSQ&lt;/a> 是一套即時分散式處理消息平台，目的在於提供大量的訊息傳遞，團隊可以依據不同的任務來設計分散式架構去消化大量的訊息。而我在最近開發了一套開源項目 &lt;a href="https://github.com/golang-queue/queue">golang-queue/queue&lt;/a>，這套詳細的資訊會再開另一篇進行討論，簡單來說這個套件可以讓開發者使用在單機的 Producer 及 Consumer 架構，使用的就是 &lt;a href="https://golang.org">Go 語言&lt;/a>的 Goroutine 及 Channel，又或者直接搭配 &lt;a href="https://nsq.io/">NSQ&lt;/a>, &lt;a href="https://nats.io/">NATs&lt;/a> 或 &lt;a href="https://redis.io/topics/pubsub">Redis Pub/Sub&lt;/a> 第三方的系統取代內建的 Channel 機制。而本篇會講在整合 NSQ 要處理 &lt;a href="https://blog.wu-boy.com/2020/02/what-is-graceful-shutdown-in-golang/">Graceful Shutdown&lt;/a> 所遇到的問題跟解決方式。&lt;/p></description></item></channel></rss>