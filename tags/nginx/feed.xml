<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/nginx/</link><description>Recent content in nginx on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 17 Mar 2018 02:28:08 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/nginx/feed.xml" rel="self" type="application/rss+xml"/><item><title>用 Nginx 來架設線上即時縮圖機</title><link>https://blog.wu-boy.com/2018/03/nginx-reverse-proxy-image-resizing/</link><pubDate>Sat, 17 Mar 2018 02:28:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/03/nginx-reverse-proxy-image-resizing/</guid><description>&lt;p>&lt;a href="https://i0.wp.com/farm1.staticflickr.com/790/26946324088_93725a917b_z.jpg?ssl=1">&lt;img src="https://i0.wp.com/farm1.staticflickr.com/790/26946324088_93725a917b_z.jpg?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在更早以前我們怎麼實現縮圖機制，當使用者上傳一張檔案，後端會固定將圖片縮圖成各種前端網頁需要的大小，不管前端頁面是否有使用，後端都會先產生好，這有什麼缺陷？&lt;/p>
&lt;ol>
&lt;li>佔用硬碟空間大小&lt;/li>
&lt;li>前端又需要另外一種格式的縮圖?&lt;/li>
&lt;/ol>
&lt;p>第二個問題比較麻煩，當前端需要另一種縮圖格式，後端就要開始掃描系統的全部圖片，再重新產生一次。非常耗費後端系統效能。後來才改成透過 URL 定義長寬來決定即時縮圖，在 &lt;a href="https://golang.org">Go 語言&lt;/a>內可以選擇使用 &lt;a href="https://github.com/thoas/picfit">picfit&lt;/a> 來當作後端即時的縮圖機。本篇則是要提供另一種解法，就是使用 &lt;a href="http://nginx.org">Nginx&lt;/a> 搭配 &lt;a href="http://nginx.org/en/docs/http/ngx_http_image_filter_module.html">image_filter&lt;/a> 外掛來達成即時縮圖機制。&lt;/p></description></item><item><title>從 Nginx 換到 Caddy</title><link>https://blog.wu-boy.com/2017/11/migrate-nginx-to-caddy/</link><pubDate>Sat, 18 Nov 2017 04:23:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/11/migrate-nginx-to-caddy/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/32758934825/in/dateposted-public/" title="The_Caddy_web_server_logo.svg">&lt;img src="https://i1.wp.com/farm1.staticflickr.com/528/32758934825_665c449ff3_z.jpg?w=840&amp;#038;ssl=1" alt="The_Caddy_web_server_logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>終於下定決心將 &lt;a href="https://nginx.org/en/">Nginx&lt;/a> 換到 &lt;a href="https://caddyserver.com/">Caddy&lt;/a> 這套用 &lt;a href="https://golang.org">Go&lt;/a> 語言所撰寫的開源套件，大家一定會有所疑問『為什麼要換掉 Nginx 而改用 Caddy』，原因其實很簡單，你現在看的 Blog 安裝在 &lt;a href="https://www.linode.com/">Linode&lt;/a> 機器上面，之前跑的是 Nginx 搭配 &lt;a href="https://letsencrypt.org/">letsencrypt&lt;/a>，但是必須要寫一個 Scripts 來自動更新 letsencrypt 憑證，這機制最後不太運作，加上這一年來，每三個月就會有人丟我說『你的 Blog 憑證過期了』，所以就在這時間點，花點時間把 Nginx 設定調整到 Caddy，轉換的時間不會花超過一小時喔。&lt;/p></description></item><item><title>在 Go 語言用一行程式碼自動化安裝且更新 Let’s Encrypt 憑證</title><link>https://blog.wu-boy.com/2017/04/1-line-letsencrypt-https-servers-in-golang/</link><pubDate>Fri, 07 Apr 2017 03:23:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/04/1-line-letsencrypt-https-servers-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在去年寫了一篇『&lt;a href="https://blog.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/">申請 Let’s Encrypt 免費憑證讓網站支援 HTTP2&lt;/a>』教學，如果您是用 Nginx，就可以參考該篇教學讓您的伺服器支援 HTTPS，而 &lt;a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html">Google Security Blog&lt;/a> 也宣布在 56 版本以後將會提示 non-secure 網站，讓使用者可以選擇性瀏覽網站。&lt;a href="https://letsencrypt.org/">Let’s Encrypt&lt;/a> 官方也&lt;a href="https://letsencrypt.org/2017/01/06/le-2016-in-review.html">公布去年 2016 發了多少張憑證&lt;/a>，相當驚人，想必大家對 HTTPS 已經有相當程度的瞭解。底下這張圖說明 2016 年 Let’s Encrypt 發憑證總量的狀況&lt;/p>
&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/33499997070/in/dateposted-public/" title="Screen Shot 2017-04-07 at 9.52.40 AM">&lt;img src="https://i2.wp.com/c1.staticflickr.com/3/2820/33499997070_dfa4f1cf7c_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-04-07 at 9.52.40 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>此篇會介紹在 &lt;a href="https://golang.org">Go 語言&lt;/a>如何跟 Let’s Encrypt 串接，底下有兩種方式。&lt;/p></description></item><item><title>Caddy 搭配 Drone 伺服器設定</title><link>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</link><pubDate>Tue, 07 Feb 2017 06:46:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/02/caddy-setting-with-drone-ci-server/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/32758934825/in/dateposted-public/" title="The_Caddy_web_server_logo.svg">&lt;img src="https://i0.wp.com/c1.staticflickr.com/1/528/32758934825_665c449ff3_z.jpg?resize=640%2C138&amp;#038;ssl=1" alt="The_Caddy_web_server_logo.svg" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;h2 id="緣由">緣由&lt;/h2>
&lt;p>&lt;a href="https://caddyserver.com/">Caddy&lt;/a> 是一套 &lt;a href="https://zh.wikipedia.org/zh-tw/HTTP/2">HTTP/2&lt;/a> 伺服器，你可以想成跟 &lt;a href="https://nginx.org/">Nginx&lt;/a> 是同一種角色，但是 Caddy 有一點不一樣的地方就是自動支援 HTTPS 設定，也就是 Caddy 幫網站自動申請 &lt;a href="https://letsencrypt.org/">Letsencrypt&lt;/a> 憑證，開發者不需要擔心憑證會過期，Caddy 會定期幫忙更換。&lt;a href="https://www.docker.com/">Drone&lt;/a> 則是一套以 &lt;a href="https://www.docker.com/">Docker&lt;/a> 為基礎的 &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration&lt;/a> 平台。就在上個月 Caddy 發佈了 &lt;a href="https://github.com/mholt/caddy/releases/tag/v0.9.5">0.9.5&lt;/a> 版本，更新過後，發現 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> 的 WebSocket 連線會斷線又連線，底下來看看 Caddy 更動了什麼造成 WebSocket 連線失效。&lt;/p></description></item><item><title>申請 Let’s Encrypt 免費憑證讓網站支援 HTTP2</title><link>https://blog.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/</link><pubDate>Sun, 09 Oct 2016 08:23:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/10/website-support-http2-using-letsencrypt/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23840721545/in/dateposted-public/" title="Letsencrypt">&lt;img src="https://i1.wp.com/farm6.staticflickr.com/5803/23840721545_e0350b687f.jpg?w=300&amp;#038;ssl=1" alt="Letsencrypt" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>寫這篇最主要推廣讓網站都支援 &lt;a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS 加密連線&lt;/a>及 &lt;a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP2 協定&lt;/a>，對於網站為什麼要支援 HTTP2，可以直接參考 ihower 寫的&lt;a href="https://ihower.tw/blog/archives/8489">說明文章&lt;/a>，最近在玩 Facebook, Line, Telegram Bot 時，填寫 Webhook URL，都強制要填寫 https:// 開頭，所以更不能忽略 HTTPS 了。，去年底寫了一篇 &lt;a href="https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/">Let&amp;rsquo;s Encrypt 開放申請免費 SSL 憑證&lt;/a> 推廣 Let&amp;rsquo;s Encrypt 的貢獻，讓買不起憑證，又想玩看看 HTTP2 的開發者可以用很簡單的方式來安裝及自動更新憑證，而 &lt;a href="https://blog.gslin.org/">gslin&lt;/a> 大為了推廣 HTTPS 也做了一個&lt;a href="https://letsencrypt.tw/">網站教學&lt;/a>，文章寫得相當清楚，支援 &lt;a href="https://httpd.apache.org/">Apache&lt;/a> 及 &lt;a href="https://nginx.org/">Nginx&lt;/a> 設定。&lt;/p></description></item><item><title>將 wordpress 強制使用 SSL 連線</title><link>https://blog.wu-boy.com/2015/12/force-https-connection-on-wordpress/</link><pubDate>Sat, 19 Dec 2015 10:03:17 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/force-https-connection-on-wordpress/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23840721545/in/dateposted-public/" title="Letsencrypt">&lt;img src="https://i1.wp.com/farm6.staticflickr.com/5803/23840721545_e0350b687f.jpg?w=300&amp;#038;ssl=1" alt="Letsencrypt" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>繼上篇介紹 &lt;a href="https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/">Letsencrypt 開放申請免費 SSL 憑證&lt;/a>，就把我的 Blog 強制使用 https 連線，Wordpress 強制使用 SSL 連線有幾個步驟需要注意，底下會是搭配 Nginx 相關設定，建議如果有裝任何 Plugin，都先進去後台暫時關閉。Nginx 1.9.5 之後有把 &lt;a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html">http2&lt;/a> 模組加入，所以本篇會是以設定 http2 為主，當然跟 &lt;a href="https://www.chromium.org/spdy/spdy-whitepaper">spdy&lt;/a> 設定一樣，只是換個名字而已。&lt;/p></description></item><item><title>Letsencrypt 開放申請免費 SSL 憑證</title><link>https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/</link><pubDate>Sat, 19 Dec 2015 07:03:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23840721545/in/dateposted-public/" title="Letsencrypt">&lt;img src="https://i1.wp.com/farm6.staticflickr.com/5803/23840721545_e0350b687f.jpg?w=300&amp;#038;ssl=1" alt="Letsencrypt" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>很高興在今年 12/03 &lt;a href="https://letsencrypt.org">Letsencrypt&lt;/a> 宣布進入 &lt;a href="https://letsencrypt.org/2015/12/03/entering-public-beta.html">public beta 階段&lt;/a>，開放免費 SSL 提供給開發者或正式網站使用，在這之前屬於封測階段，必須透過申請的方式才可以拿到 SSL 憑證。在知道 Letsencrypt 之前，我都是使用免費的 &lt;a href="https://www.startssl.com/">StartSSL&lt;/a>，這家申請的分式比較複雜，你可以在網路上找到許多&lt;a href="https://www.google.com.tw/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=startSSL%20%E6%95%99%E5%AD%B8">申請教學&lt;/a>，但是就是按部就班操作，就可以拿到一年份的 SSL 憑證，也就是一年申請一次啦，但是 Letsencrypt 申請的方式可以直接透過 command line 快速產生相對應的憑證，支援的 Plugin 也非常多 (像是 &lt;a href="https://httpd.apache.org/">Apache&lt;/a>, &lt;a href="http://nginx.org/">Nginx&lt;/a>)，詳細的操作方式可以參考&lt;a href="https://letsencrypt.readthedocs.org/en/latest/">線上文件&lt;/a>。這邊就不多說了，只要安裝好 Letsencrypt 指令，就可以無痛拿到各網站憑證，在 &lt;a href="https://github.com/">Github&lt;/a> 上面你可以找到許多別人&lt;a href="https://github.com/search?utf8=%E2%9C%93&amp;amp;q=Letsencrypt">寫好的 Plugin&lt;/a>，隨便挑一個來使用吧。&lt;/p></description></item><item><title>Ngnix 搭配 PHP-FPM 噴 php5-fpm.sock failed (13: Permission denied)</title><link>https://blog.wu-boy.com/2014/06/ngnix-php5-fpm-sock-failed-permission-denied/</link><pubDate>Wed, 25 Jun 2014 02:43:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/06/ngnix-php5-fpm-sock-failed-permission-denied/</guid><description>Nginx 搭配 PHP-FPM 已經是架設 PHP 伺服器基本入門款了，這次升級 CentOS 機器完後，發現 Log 一直噴出底下訊息
nginx error connect to php5-fpm.sock failed (13: Permission denied) 透過 Stackoverflow 查到這篇解答 nginx error connect to php5-fpm.sock failed (13: Permission denied)，裡面提到兩種作法，其中一解法是直接修改 /var/run/php5-fpm.sock 為 666，讓其他使用者可以直接存取此檔案，但是此作法在下次重新開機後一樣會出現同問題，最終解法請修改 /etc/php-fpm.d/www.conf 如果是搭配 Nginx 請使用底下設定
user = nginx group = nginx ; Set permissions for unix socket, if one is used. In Linux, read/write ; permissions must be set in order to allow connections from a web server.</description></item><item><title>在 Ubuntu 或 Debian 上跑 Ruby on Rails + Nginx</title><link>https://blog.wu-boy.com/2014/02/ruby-with-nginx-on-ubuntu-debian/</link><pubDate>Thu, 06 Feb 2014 14:58:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/02/ruby-with-nginx-on-ubuntu-debian/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/12343631243/" title="Ruby_logo by appleboy46, on Flickr">&lt;img style="max-height:200px; " src="https://i2.wp.com/farm6.staticflickr.com/5492/12343631243_7bc052fa05.jpg?w=840&amp;#038;ssl=1" alt="Ruby_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>本篇用來紀錄學習 &lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a> 所需要的開發環境，請不要輕易嘗試使用 Windows 當開發環境，因為真的很不好裝，又很難除錯，所以作者建議開發環境一定要有 Linux 機器，如果是個人電腦用 Mac 也沒這問題。用 Rails 可以快速開發 Web 搭配 MySQL 資料庫，完成後可以透過 &lt;a href="https://github.com/capistrano/capistrano">Capistrano&lt;/a> 工具幫助 Deploy 到 Production Server。底下會一一介紹如何在 Debian 機器上架設好 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> + &lt;a href="http://nginx.org">Nginx&lt;/a> 環境&lt;/p></description></item><item><title>Jenkins + Nginx User Auth</title><link>https://blog.wu-boy.com/2013/11/jenkins-nginx-auth/</link><pubDate>Wed, 13 Nov 2013 02:57:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/11/jenkins-nginx-auth/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/10830034484/" title="jenkins_logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm6.staticflickr.com/5507/10830034484_95cba45707.jpg?resize=398%2C128&amp;#038;ssl=1" alt="jenkins_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://jenkins-ci.org/" target="_blank">Jenkins CI&lt;/a> 是一套非常好的 Job 執行 Tool，可以幫忙跑專案測試，測試完成後繼續 Deploy 到相對應的伺服器，也可以自動寄信給開發者或者是指定的內部人員。在 &lt;a href="http://www.ubuntu.com/" target="_blank">Ubuntu&lt;/a> 或 &lt;a href="http://www.debian.org/" target="_blank">Debian&lt;/a> 安裝方式非常簡單，按照下述操作就可以簡易架設完成&lt;/p>
&lt;div>
 &lt;pre class="brush: bash; title: ; notranslate" title="">$ aptitude -y install openjdk-7-jre openjdk-7-jdk
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
$ sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
$ aptitude -y update
$ aptitude -y install jenkins&lt;/pre>
&lt;/div></description></item><item><title>Nginx 搭配 Laravel PHP Framework 設定</title><link>https://blog.wu-boy.com/2013/09/setup-laravel-with-nginx/</link><pubDate>Thu, 12 Sep 2013 07:45:45 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/09/setup-laravel-with-nginx/</guid><description> 筆記在 Nginx 設定 Laravel 專案，現在的 PHP Framework 都將 query string 整個導向首頁 index.php，就拿 CodeIgniter 來說，在 Apache 只要設定
RewriteEngine onRewriteBase /RewriteCond $1 !^(index\.php|images|robots\.txt|$)RewriteRule ^(.*)$ index.php/$1 [L,QSA] 在 Nginx 內只要透過 try_files 即可
location / {try_files $uri $uri/ /index.php} 正常來說 Laravel 直接用上面的設定即可，但是我發現在 $_GET 這全域變數會拿到空值，解法也很簡單，在 Nginx 將 query string 變數帶到 index.php 後面即可 location / {try_files $uri $uri/ /index.php?$query_string;}</description></item><item><title>HAproxy 搭配 Nginx port redirect issue</title><link>https://blog.wu-boy.com/2013/07/nginx-port-redirect-issue-with-haproxy/</link><pubDate>Wed, 17 Jul 2013 11:42:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/07/nginx-port-redirect-issue-with-haproxy/</guid><description> HAproxy 是一套高效能分散式系統軟體，後端可搭配 Web 或 SQL 服務，這次在後端搭配 Nginx 出現 port redirect 問題，問題很簡單，在 Haproxy 設定 80 port 對應到內部三台 Nginx 機器，但是 Nginx port 設定 8080，這樣當我們在瀏覽網址如下:
http://aaa.bbb.ccc.ddd/test (請注意，最後沒有 slash 喔) 你會發現 Nginx 將網址轉成
http://aaa.bbb.ccc.ddd:8080/test/ 為了避免 Nginx 自動將 port 加入到網址列，我們可以透過設定 port_in_redirect，Nginx 預設將此設定為 On，所以將此設定為 off，並且重新啟動 Nginx 即可
port_in_redirect off;</description></item><item><title>Nginx + phpMyAdmin 搭配 SSL 設定</title><link>https://blog.wu-boy.com/2013/06/force-phpmyadmin-ssl-with-nginx/</link><pubDate>Sat, 08 Jun 2013 07:51:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/06/force-phpmyadmin-ssl-with-nginx/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/8171305355/" title="mysql_logo by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm9.staticflickr.com/8488/8171305355_7fb578fdc9.jpg?w=300&amp;#038;ssl=1" alt="mysql_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://www.phpmyadmin.net/home_page/index.php" target="_blank">phpMyAdmin&lt;/a> 是一套用來管理 &lt;a href="http://www.mysql.com/" target="_blank">MySQL&lt;/a> 的 Web 介面，如果要讓 phpMyAdmin 強制走 https 的話，可以透過兩種方式，一種是直接設定 phpMyAdmin，另外一種方式是透過 &lt;a href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html" target="_blank">Apache rewrite&lt;/a> 或 &lt;a href="http://nginx.org/" target="_blank">Nginx&lt;/a> 設定，底下來分別說明。&lt;/p></description></item><item><title>Install Nginx + spdy module on Ubuntu or Debian</title><link>https://blog.wu-boy.com/2013/04/install-nginx-spdy-module-on-ubuntu-or-debian/</link><pubDate>Tue, 30 Apr 2013 15:42:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/04/install-nginx-spdy-module-on-ubuntu-or-debian/</guid><description> 上一篇提到 nginx 1.4.0 釋出並支援 SPDY，教學環境是 CentOS，這次在 Ubuntu 環境編譯遇到
/usr/bin/ld: cannot find -lperl 找不到 perl library，解法可以透過 aptitude 安裝 libperl5.14，安裝好後，到 /usr/lib 底下找到 libperl.so.5.14.2，由於檔案命名關係，請用 ln 將檔案 link 成 libperl.so
$ ln -s libperl.so.5.14.2 libperl.so 接著可以正確編譯了，底下安裝相關套件 $ aptitude -y install libpcre3-dev libgd-dev libgd2-xpm-dev libgeoip-dev</description></item><item><title>nginx 1.4.0 釋出並支援 SPDY</title><link>https://blog.wu-boy.com/2013/04/nginx-1-4-0-support-spdy-module/</link><pubDate>Sun, 28 Apr 2013 08:15:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/04/nginx-1-4-0-support-spdy-module/</guid><description>&lt;p>&lt;strong>Update: 由於 OpenSSL CVE-2014-0160 Heartbleed Security，請將 openssl 升級到 1.0.1g 版本&lt;/strong>&lt;/p>
&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/8684224387/" title="nginx-logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm9.staticflickr.com/8401/8684224387_19de454ebf.jpg?resize=320%2C120&amp;#038;ssl=1" alt="nginx-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>很高興看到 &lt;a href="http://nginx.org/" target="_blank">Nginx&lt;/a> Release 1.4.0 版本，此新版本開始支援 &lt;a href="http://nginx.org/en/docs/http/ngx_http_spdy_module.html" target="_blank">SPDY module&lt;/a>，對於 SPDY 還不熟悉了解的，可以參考今年 &lt;a href="http://www.webconf.tw" target="_blank">2013 WebConf&lt;/a> 講師 ihower 介紹的 &lt;a href="http://www.slideshare.net/ihower/a-brief-introduction-to-spdy-http20" target="_blank">A brief introduction to SPDY - 邁向 HTTP/2.0&lt;/a>，要提升整個 Web Performance，可以將 SPDY 導入，對於使用 Apache 使用者，請參考 &lt;a href="http://code.google.com/p/mod-spdy/" target="_blank">mod_spdy&lt;/a>，如果是 Nginx 用戶，在 1.3.x 版本，可以直接用官方 &lt;a href="http://nginx.org/patches/spdy/patch.spdy.txt">patch&lt;/a>，升級到 1.4.x 就不需要 patch 了，但 OS 是 &lt;a href="http://www.ubuntu.com/" target="_blank">Ubuntu&lt;/a> 或 &lt;a href="http://www.centos.org/" target="_blank">CentOS&lt;/a> 系列是需要自行編譯，這次會筆記在 CentOS 下將 spdy 編譯進系統。&lt;/p>
&lt;h3 id="安裝方式">安裝方式&lt;/h3>
&lt;p>先看 Ngix 是否有支援 spdy，直接下 nginx -V 觀看&lt;/p>
&lt;blockquote>
&lt;p>nginx version: nginx/1.1.19 TLS SNI support enabled configure arguments: &amp;ndash;prefix=/etc/nginx &amp;ndash;conf-path=/etc/nginx/nginx.conf &amp;ndash;erth=/var/lib/nginx/body &amp;ndash;http-fastcgi-temp-path=/var/lib/nginx/fastcgi &amp;ndash;http-lb/nginx/proxy &amp;ndash;http-scgi-temp-path=/var/lib/nginx/scgi &amp;ndash;http-uwsgi-temp-path==/var/run/nginx.pid &amp;ndash;with-debug &amp;ndash;with-http_addition_module &amp;ndash;with-http_dav_moith-http_image_filter_module &amp;ndash;with-http_realip_module &amp;ndash;with-http_stub_status__xslt_module &amp;ndash;with-ipv6 &amp;ndash;with-sha1=/usr/include/openssl &amp;ndash;with-md5=/usr/includ/buildd/nginx-1.1.19/debian/modules/nginx-auth-pam &amp;ndash;add-module=/build/buildd/d/nginx-1.1.19/debian/modules/nginx-upstream-fair &amp;ndash;add-module=/build/buildd/ng&lt;/p>
&lt;/blockquote></description></item><item><title>Nginx 判斷檔案是否存在</title><link>https://blog.wu-boy.com/2012/11/nginx-check-if-file-exists/</link><pubDate>Thu, 29 Nov 2012 13:58:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/11/nginx-check-if-file-exists/</guid><description>如果你有在使用 CodeIgniter + Nginx + PHP-FPM 使用者，務必看到這篇 CLI problem nginx php-fpm，在使用 CLI 時候會有些問題，解決方式也非常簡單，只要在 index.php 裡面加上
$_SERVER['PATH_INFO'] = NULL; 當然這篇最主要不是講這個，而是最後我有提到一篇解法，在 Nginx 裡面如何設定 rewrite 功能，比較不同的是，現在不用在設定這麼複雜了，要判斷檔案是否存在，不要在使用下面方式
server {root /var/www/domain.com;location / {if (!-f $request_filename) {break;}}} 而必須改成 location / {try_files $uri $uri/ /index.php;} 請看 Check IF File Exists，看完之後可以拿掉很多設定，讓 Nginx 設定檔看起來更簡單容易。 參考: try_files</description></item><item><title>PHP MVC Framework 搭配 Nginx + PHP-FPM 設定檔</title><link>https://blog.wu-boy.com/2012/10/php-mvc-framework-nginx-php-fpm/</link><pubDate>Mon, 08 Oct 2012 12:03:03 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/10/php-mvc-framework-nginx-php-fpm/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6248708214/" title="Laravel PHP Framework by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm7.static.flickr.com/6038/6248708214_ef1133d0e9_o.png?resize=283%2C101&amp;#038;ssl=1" alt="Laravel PHP Framework" data-recalc-dims="1" />&lt;/a>
&lt;/div> 相信大家都知道 
&lt;p>&lt;a href="http://nginx.com/" target="_blank">Nginx&lt;/a> 搭配 &lt;a href="http://php-fpm.org/" target="_blank">PHP-FPM&lt;/a> 用起來效能還不錯，這次來筆記如何設定 Nginx 去除 PHP MVC Framework 討厭的 index.php 字串，不管是 &lt;a href="http://laravel.com/" target="_blank">Laravel&lt;/a> 或 &lt;a href="http://codeigniter.org.tw" target="_blank">CodeIgniter&lt;/a> 教學文件都是在 &lt;a href="http://www.apache.org/" target="_blank">Apache&lt;/a> 設定 &lt;a href="http://en.wikipedia.org/wiki/Htaccess" target="_blank">.htaccess&lt;/a> 來達成 Cleaner URL，Apache 最大好處支援 .htaccess，但是 Nginx 也有強大的效能，此篇紀錄如何設定 Nginx 達成 &lt;a href="http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html" target="_blank">mod_rewrite&lt;/a> 效果。&lt;/p></description></item><item><title>在 Fedora 或 Amazon Linux AMI 架設 Nginx + PHP FastCGI</title><link>https://blog.wu-boy.com/2012/05/install-nginx-php-fastcgi-on-amazon-linux/</link><pubDate>Mon, 28 May 2012 11:34:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/05/install-nginx-php-fastcgi-on-amazon-linux/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/7285947094/" title="799px-Amazon.com-Logo.svg by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7221/7285947094_9e34eeb903.jpg?resize=500%2C101&amp;#038;ssl=1" alt="799px-Amazon.com-Logo.svg" data-recalc-dims="1" />&lt;/a>
&lt;/div> 上一篇介紹
&lt;p>&lt;a href="http://blog.wu-boy.com/2012/05/php-fastcgi-with-nginx-on-ubuntu-10-10-maverick/" target="_blank">如何在 Ubuntu 底下安裝 Nginx + PHP FastCGI&lt;/a>，這次來紀錄如何安裝在 Fedora 系統，目前環境是使用 &lt;a href="http://aws.amazon.com/amazon-linux-ami/" target="_blank">Amazon Linux AMI&lt;/a>，如果有在玩 &lt;a href="http://aws.amazon.com/ec2/" target="_blank">AWS EC2&lt;/a> 或是 &lt;a href="http://fedoraproject.org/" target="_blank">Fedora Linux&lt;/a> 的話，對這 OS 就不會很陌生了。&lt;/p></description></item><item><title>在 Ubuntu 10.10 (Maverick) 架設 Nginx + PHP FastCGI</title><link>https://blog.wu-boy.com/2012/05/php-fastcgi-with-nginx-on-ubuntu-10-10-maverick/</link><pubDate>Fri, 25 May 2012 13:41:19 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/05/php-fastcgi-with-nginx-on-ubuntu-10-10-maverick/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/6760100409/" title="logo-Ubuntu by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm8.staticflickr.com/7153/6760100409_b23d1ce67b_m.jpg?resize=240%2C165&amp;#038;ssl=1" alt="logo-Ubuntu" data-recalc-dims="1" />&lt;/a>
&lt;/div> 今天來筆記如何在 
&lt;p>&lt;a href="http://www.ubuntu-tw.org/" target="_blank">Ubuntu&lt;/a> 底下完整安裝 &lt;a href="http://nginx.org/" target="_blank">Nginx&lt;/a> + &lt;a href="http://www.fastcgi.com/drupal/" target="_blank">PHP FastCGI&lt;/a>，以及了解 Nginx 基本設定。我想大家都知道 &lt;a href="http://www.apache.org/" target="_blank">Apache&lt;/a> 是一個很好的 Web Server 伺服器，也常常用在個人網站，或者一般小型專案，網路上也有一堆懶人包，如 &lt;a href="http://www.appservnetwork.com/" target="_blank">Appserv&lt;/a>, &lt;a href="http://www.apachefriends.org/zh_tw/xampp.html" target="_blank">Xampp&lt;/a>，對於新手入門來說 Apache 是一個很好的選擇，但是您會發現用了 Apache 後，系統記憶體常常飆高 XD，載入太多額外不必要的模組，所以非常肥大，那這次就來嘗試另外一套 Web 伺服器 Nginx 吧。&lt;/p></description></item><item><title>[轉貼] RoR：Ruby on Rails的部署方案選擇</title><link>https://blog.wu-boy.com/2008/07/%E8%BD%89%E8%B2%BC-ror%EF%BC%9Aruby-on-rails%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E9%81%B8%E6%93%87/</link><pubDate>Thu, 10 Jul 2008 02:04:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2008/07/%E8%BD%89%E8%B2%BC-ror%EF%BC%9Aruby-on-rails%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E9%81%B8%E6%93%87/</guid><description>我沒在玩 Ruby on Rails，但是底下這一篇我覺得寫的不錯，可以參考看看，裡面有介紹一下目前當紅 web daemon 的一些基本知識
RoR的部署方式從架構上來說分為前端和後端： 一、前端 前端的作用就是處理靜態資源，將動態請求分發到後端，有時候也帶有一些額外的功能，例如對特定URL進行rewrite和redirect，對HTTP輸出進行gzip壓縮等等。 前端目前已知的可以選擇apache, lighttpd, litespeed, nginx, haproxy 1、apache2.2 apache是全球市場佔有率最高的web server，超過全球互聯網網站50%的網站都用apache。apache2.2 + mod_proxy_balancer是一個非常流行，非常穩定的方案。 使用apache2.2唯一的問題就是apache的性能和後面那些輕量級web server相比，差太遠了。一方面在處理靜態請求方面apache要比lighttpd慢3-5倍，內存消耗和CPU消耗也高出一個數量級，另一方面 mod_proxy_balancer的分發性能也不高，比haproxy差很遠。 2、lighttpd lighttpd 是一個輕量級高性能web server，一個在MySQL Inc工作的德國人寫的。性能很好，內存和CPU資源消耗很低，支持絕大多數apache的功能，是apache的絕好替代者。目前lighttpd已經上升到全球互聯網第四大web server，市場佔有率僅此於apache，IIS和Sun。 lighttpd唯一的問題是proxy功能不完善，因此不適合搭配mongrel來使用。lighttpd下一個版本1.5.0的proxy模塊重寫過了，將會解決這個問題。 3、litespeed 和 lighttpd差不多，商業產品，收費的。比lighttpd來說，多一個web管理界面，不用寫配置文件了。litespeed專門為單機運行的 RoR開發了一個lsapi協議，號稱性能最好，比httpd和fcgi都要好。他的proxy功能比lighttpd完善。 litespeed 的缺點我卻認為恰恰是這個lsapi。因為lsapi不是web server啟動的時候啟動固定數目的ruby進程，而是根據請求繁忙程度，動態創建和銷毀ruby進程，貌似節省資源，實則和apache2.2進程模型一樣，留下很大的黑客攻擊漏洞。只要黑客瞬時發起大量動態請求，就會讓服務器忙於創建ruby進程而導致CPU資源耗盡，失去響應。 當然，litespeed也支持httpd和fcgi，這個和lighttpd用法一樣的，到沒有這種問題。 4、nginx 一個俄國人開發的輕量級高性能web server，特點是做proxy性能很好，因此被推薦取代apache2.2的mod_proxy_balancer，來和mongrel cluster搭配。其他方面和lighttpd到差不多。 要說缺點，可能就是發展的時間比較短，至今沒有正式版本，還是beta版。沒有經過足夠網站的驗證。 5、haproxy 就是一個純粹的高性能proxy，不處理靜態資源的，所有請求統統分發到後端。 二、後端 後端就是跑ruby進程，處理RoR動態請求了。運行後端ruby進程有兩種方式： 1、fcgi方式 準確的說，不能叫做fcgi方式，其實就是啟動一個ruby進程，讓這個ruby進程監聽一個tcp/unix socket，以fcgi協議和前端通訊。所以fcgi不是指ruby進程的運行方式，而是ruby進程使用的通訊協議。這就好比你tomcat可以用 http也可以使用ajp通訊一樣，tomcat自己的運行方式都一樣的，只是通訊方式不一樣。 fcgi方式啟動ruby進程，可以使用lighttpd帶的一個spawn-fcgi工具來啟動(JavaEye目前採用這種方式)。 值得一提的是，apache2.2的mod_fastcgi的方式和上面還不太一樣，由apache動態創建fcgi進程和管理fcgi進程，這種方式和 litespeed的lsapi面臨的問題是一樣的，此外apache的mod_fastcgi自己也有很多嚴重的bug，是一種很糟糕的部署方式。這種糟糕的部署方式也敗壞了fcgi的名聲。 fastcgi只是一種協議，雖然古老，但並不是不好用，http協議也很古老。沒有必要因為 apache的mod_fastcgi的運行方式的問題而連帶把fastcgi都一同否定了。fastcgi只是一個協議(程序之間的語言)，是 apache的mod_fastcgi這個模塊有問題。打個比方，有個人英語水平很差，和你用英語對話，總是結結巴巴的，那你說是英語(fastcgi) 這種語言有問題呢？還是和你對話的這個人 (mod_fastcgi)有問題呢？ 2、http方式 也就是用mongrel去跑ruby進程，由於mongrel實際上已經是一個簡單的http server，所以也可以單獨作為web server使用。mongrel現在越來越受歡迎了。 用fcgi方式還是http方式，我個人覺得區別不大，關鍵還是看應用的場合，一般而言，推薦的搭配是： lighttpd ＋ fcgi 或者 nginx ＋mongrel，而apache因為性能差距，而不被推薦。 JavaEye為什麼用lighttpd ＋ fcgi呢？原因如下： 1) lighttpd發展了好幾年了，市場佔有率也相當高，是一個經過實踐檢驗的server，它的文檔也很全；而nginx還沒有經過足夠的市場檢驗，文檔也很缺乏 2) JavaEye的ruby進程和web server在一台機器上面跑，通過unix socket使用fcgi協議通訊可以避免tcp的網絡開銷，其通訊速度比使用tcp socket使用http協議通訊要快一些。 什麼場合使用haproxy？ 大規模部署，例如你的RoR應用到十幾台服務器上面去，你用haproxy會更好，可以方便的添加刪除應用服務器節點，proxy性能更好。 資料來源： Csdn – http://news.</description></item></channel></rss>