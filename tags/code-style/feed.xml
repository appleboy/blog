<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Style on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/code-style/</link><description>Recent content in Code Style on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Sat, 11 Apr 2015 15:05:34 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/code-style/feed.xml" rel="self" type="application/rss+xml"/><item><title>Git Flow and JavaScript Coding Style</title><link>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</link><pubDate>Sat, 11 Apr 2015 15:05:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 已經是每日必備使用的指令，在平常工作上常常使用到 &lt;a href="http://git-scm.com/docs/git-rebase">git rebase&lt;/a> 或 &lt;a href="http://git-scm.com/docs/git-merge">git merge&lt;/a>，發現很多工程師不知道什麼時候該用 rebase 什麼時候該用 merge，所以做了底下投影片來清楚描述 git rebase 及 merge 的優缺點及使用時機。&lt;/p></description></item><item><title>統一開發者編輯器 Coding Style</title><link>https://blog.wu-boy.com/2013/03/coding-style-tool-editorconfig/</link><pubDate>Thu, 28 Mar 2013 06:50:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/03/coding-style-tool-editorconfig/</guid><description>在多人開發專案時候，一定會遇到大家使用的編輯器大不相同 TextMate, Vim, Sublime Text 2, Geany, Notepad++…等，該如何統一程式碼的一致性呢？這邊要講得不是各種語言的 Coding Style，而是編輯器的設定，例如大家一定會遇到有的開發者使用 Tab 另外一群人使用 Space，在同一專案裡面就會發現有的 tab 有的 space，這樣看起來非常的亂，該如何統一大家的預設 indent style，就是要使用 EditorConfig 啦。使用方式很簡單，可以在專案目錄內加入 .editorconfig 內容設定如下
; EditorConfig is awesome: http://EditorConfig.org
root = true ; top-most EditorConfig file
; Unix-style newlines with a newline ending every file
[*]
end_of_line = lf
insert_final_newline = true
; 4 space indentation
[*.py]
indent_style = space
indent_size = 4
; Tab indentation (no size specified)
[*.js]
indent_style = tab
; Indentation override for all JS under lib directory
[lib/**.</description></item><item><title>寫出好維護的 PHP 程式碼</title><link>https://blog.wu-boy.com/2012/07/how-to-write-maintainable-php-source-code/</link><pubDate>Sat, 21 Jul 2012 08:30:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/07/how-to-write-maintainable-php-source-code/</guid><description>今天有機會到台中幫創業團隊制定 PHP Coding Style，相信程式設計師每天花最多時間的就是 maintain code 了，如何寫出大家都易於維護的程式碼，必須先制定團隊的 coding style 為首要目標，底下分享個人推薦的寫法給大家參考，希望對於未來維護，轉移程式碼或教育訓練剛起步的團隊有些幫助。</description></item></channel></rss>