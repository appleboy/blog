<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/ruby/</link><description>Recent content in Ruby on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Wed, 18 Mar 2015 04:25:53 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby Deploy With Capistrano 碰到 SSH Connection Closed</title><link>https://blog.wu-boy.com/2015/03/ruby-deploy-with-capistrano-ssh-connection-closed/</link><pubDate>Wed, 18 Mar 2015 04:25:53 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/03/ruby-deploy-with-capistrano-ssh-connection-closed/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/13256445484/" title="CapistranoLogo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3756/13256445484_d0ca222f48.jpg?resize=500%2C125&amp;#038;ssl=1" alt="CapistranoLogo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>在 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 開發環境最常用的 Deploy 工具就是 &lt;a href="https://github.com/capistrano/capistrano">Capistrano&lt;/a>，讓開發者可以快速部署程式碼，在部署進行中，由於大量的 js 及 css 需要處理，所以花最長的時間就是 &lt;code>assets:precompile&lt;/code>，執行 &lt;code>cap deploy&lt;/code> 就會發現卡在底下錯誤訊息&lt;/p>
&lt;blockquote>
&lt;p>** [whenever:update_crontab] exception while rolling back: Net::SSH::Disconnect, connection closed by remote host *** [deploy:update_code] rolling back * executing &amp;ldquo;rm -rf /home/deploy/nami/releases/20150317135422; true&amp;rdquo; servers: [&amp;ldquo;xxxxx.tw&amp;rdquo;] ** [deploy:update_code] exception while rolling back: Net::SSH::Disconnect, connection closed by remote host&lt;/p>
&lt;/blockquote></description></item><item><title>Using Capistrano to deploy current branch</title><link>https://blog.wu-boy.com/2014/03/using-capistrano-to-deploy-current-branch/</link><pubDate>Wed, 19 Mar 2014 03:14:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/using-capistrano-to-deploy-current-branch/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/13256445484/" title="CapistranoLogo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3756/13256445484_d0ca222f48.jpg?resize=500%2C125&amp;#038;ssl=1" alt="CapistranoLogo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://capistranorb.com/">Capistrano&lt;/a> 是一套用 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 語言所寫的 Deploy Tool，可以用來管理多台伺服器自動化流程，在 &lt;a href="http://rubyonrails.org/">Rails&lt;/a> 專案內都會使用這套 Deploy Tool，也方便管理遠端機器。這次有個問題是，假設我們在 Staging 或 Production 設定檔分別定義了 &lt;code>:branch&lt;/code> 變數如下&lt;/p>
&lt;div>
&lt;pre class="brush: ruby; title: ; notranslate" title="">set :branch, "master"
set :env, "production"&lt;/pre>
&lt;/div></description></item><item><title>Ruby Compass and Sass Auto Testing Environment</title><link>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</link><pubDate>Tue, 11 Mar 2014 02:37:51 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/ruby-compass-and-sass-auto-testing-environment/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6213260474/" title="Compass Home Compass Documentation by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm7.static.flickr.com/6217/6213260474_e0e51eeefe_o.png?resize=486%2C110&amp;#038;ssl=1" alt="Compass Home Compass Documentation" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://compass-style.org/">Compass&lt;/a> 是一套 CSS Authoring Framework，也是基於 &lt;a href="http://sass-lang.com/">Sass&lt;/a> 語法的一套 Framework，先前寫了 &lt;a href="http://gulpjs.com/">Gulp&lt;/a> 的 &lt;a href="https://github.com/appleboy/gulp-compass">Compass Plugin&lt;/a>，在針對自動化測試時候出現版本相依性不同，造成無法自動測試成功。自動化測試目前跟 &lt;a href="http://github.com">Github&lt;/a> 最常搭配的就是 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 或者是 &lt;a href="https://www.codeship.io/">Codeship&lt;/a>，當然如果非 Open source 專案可能就要自己架設 &lt;a href="http://en.wikipedia.org/wiki/Continuous_integration">CI&lt;/a> 伺服器，個人推薦就是 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a>。這次遇到的問題其實跟 Ruby Gem 版本相依性有關，由於要測試 Compass 所有 Command 語法，所以使用了 &lt;a href="http://susy.oddbird.net/">Susy&lt;/a> + sass + compass，如果在 &lt;code>.travis.yml&lt;/code> 內直接寫&lt;/p></description></item><item><title>Ruby 安裝 debugger package 發生 No source for ruby 錯誤</title><link>https://blog.wu-boy.com/2014/02/ruby-debugger-and-no-source-for-ruby-error/</link><pubDate>Thu, 27 Feb 2014 03:22:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/02/ruby-debugger-and-no-source-for-ruby-error/</guid><description>當您在特定 Ruby 版本下安裝 debugger gem 套件，會碰到底下錯誤訊息
Using debugger-ruby_core_source (1.2.4) Installing debugger-linecache (1.2.4) with native extensions Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension. checking for vm_core.h&amp;hellip; no checking for vm_core.h&amp;hellip; no Makefile creation failed
No source for ruby-2.0.0-p451 provided with debugger-ruby_core_source gem. **************************************************************************
會發生此錯誤的最大原因是在 debugger-ruby_core_source 原始碼內，只有包含特定少數的 Headers，解決此錯誤也非常簡單，可以直接將目前的 ruby 版本 headers 安裝到 debugger-ruby_core_source 目錄內即可，透國 rake 就可以完成
$ cd /usr/local/rvm/gems/ruby-2.0.0-p451/gems/debugger-ruby_core_source-1.2.4/lib/debugger/ruby_core_source $ rake add_source VERSION=2.0.0-p451 --trace 執行完成後，就可以回到原專案目錄透過 bundle install 繼續安裝套件。</description></item><item><title>在 Ubuntu 或 Debian 上跑 Ruby on Rails + Nginx</title><link>https://blog.wu-boy.com/2014/02/ruby-with-nginx-on-ubuntu-debian/</link><pubDate>Thu, 06 Feb 2014 14:58:14 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/02/ruby-with-nginx-on-ubuntu-debian/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/12343631243/" title="Ruby_logo by appleboy46, on Flickr">&lt;img style="max-height:200px; " src="https://i2.wp.com/farm6.staticflickr.com/5492/12343631243_7bc052fa05.jpg?w=840&amp;#038;ssl=1" alt="Ruby_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>本篇用來紀錄學習 &lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a> 所需要的開發環境，請不要輕易嘗試使用 Windows 當開發環境，因為真的很不好裝，又很難除錯，所以作者建議開發環境一定要有 Linux 機器，如果是個人電腦用 Mac 也沒這問題。用 Rails 可以快速開發 Web 搭配 MySQL 資料庫，完成後可以透過 &lt;a href="https://github.com/capistrano/capistrano">Capistrano&lt;/a> 工具幫助 Deploy 到 Production Server。底下會一一介紹如何在 Debian 機器上架設好 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> + &lt;a href="http://nginx.org">Nginx&lt;/a> 環境&lt;/p></description></item><item><title>Cross Site Request Forgery in JS Web Apps and CodeIgniter PHP Framework</title><link>https://blog.wu-boy.com/2013/08/cross-site-request-in-js-web-apps-and-codeigniter-php-framework/</link><pubDate>Thu, 15 Aug 2013 03:43:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/08/cross-site-request-in-js-web-apps-and-codeigniter-php-framework/</guid><description>&lt;p>Cross Site Request Forgery 簡稱 &lt;a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank">CSRF&lt;/a> 是網路上最常見的攻擊方式，由於前端的盛行，現在開發網站偏向前後端拆開，前端使用大量的 Javascript 及 CSS3 效果，後端則是使用 PHP, Ruby, Python… 等，前端如何拿到資料庫資料呢，必需透 過 AJAX 方式來存取，常見的後端 API 會設計成 &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">RESTful&lt;/a> (GET/PUT/POST/DELETE)，後端為了擋住 CSRF 攻擊，所以限定了特殊 Content-Type Header，前端需要帶 application/json 給後端才可以拿到資料，這只能透過 Ajax requests 才可以做到。&lt;/p></description></item><item><title>Fabric 管理多台 Linux 機器的 command tool</title><link>https://blog.wu-boy.com/2013/04/fabric-ssh-for-deploy-or-systems-administration/</link><pubDate>Thu, 25 Apr 2013 16:35:37 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/04/fabric-ssh-for-deploy-or-systems-administration/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/8679381967/" title="python-logo-master-v3-TM by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm9.staticflickr.com/8123/8679381967_75cee4e0e9_n.jpg?resize=320%2C108&amp;#038;ssl=1" alt="python-logo-master-v3-TM" data-recalc-dims="1" />&lt;/a>
&lt;/div> 相信 Administrator 管理過兩台以上的 Linux Server 都一定會找 tool 讓多台機器同時執行指令，這也應用在 Deploy 任何 application 到多台機器或者是同時更新系統套件…等，網路上有蠻多套 command line tool 像是
&lt;p>&lt;a href="https://github.com/capistrano/capistrano" target="_blank">capistrano&lt;/a>、&lt;a href="http://docs.fabfile.org" target="_blank">Fabric&lt;/a>、&lt;a href="http://code.google.com/p/parallel-ssh/" target="_blank">pssh&lt;/a>、&lt;a href="http://packages.debian.org/search?keywords=dsh" target="_blank">dsh&lt;/a>…等都，本篇會以 &lt;a href="http://www.python.org/" target="_blank">Python&lt;/a> 所推的 Fabric 來做介紹。另外 Ruby 所寫的 capistrano tool 也是不錯的選擇，這兩套其實大同小異，可以將 Deploy 的邏輯寫成單一 file 再透過 task 定義來決定執行的工作。當然你也可以透過此 tool 來管理 local 端動作，但是這有點多此一舉，因為基本的 Shell 就可以完成了，如果熟悉 Python 則選 fabric，如果喜歡寫 &lt;a href="http://www.ruby-lang.org/en/" target="_blank">Ruby&lt;/a> 則可以試試看 capistrano。&lt;/p>
&lt;h3 id="安裝方式installation-如果是">安裝方式(Installation) 如果是&lt;/h3>
&lt;p>&lt;a href="http://www.centos.org/" target="_blank">CentOS&lt;/a> 系列可以透過 yum 套件管理，&lt;a href="http://www.ubuntu.com/" target="_blank">Ubuntu&lt;/a> 或 &lt;a href="http://www.debian.org/" target="_blank">Debian&lt;/a> 則是透過 aptitude 方式安裝。 Yum&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title=""># install python pip tool and fabric command
yum -y install python-pip
pip-python install fabric&lt;/pre> APT
&lt;pre class="brush: bash; title: ; notranslate" title=""># install python easy_install
aptitude -y install python-pip
# install fabric command
pip install fabric&lt;/pre> 安裝 capistrano 可以透過 Ruby gem。
&lt;pre class="brush: bash; title: ; notranslate" title="">$ gem install capistrano&lt;/pre></description></item><item><title>LiveReload 網頁程式設計師必備工具</title><link>https://blog.wu-boy.com/2011/10/how-to-install-livereload/</link><pubDate>Thu, 27 Oct 2011 09:55:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/how-to-install-livereload/</guid><description>&lt;p>如果讀者目前從事的工作跟 Web Develop 相關，相信每天在按 Ctrl + R 的次數至少在上百次吧，也許花在這上面的時間會真的很煩，有沒有想過如果每次修改 html php css s[ca]ss js 檔案後，網頁會自動幫忙 reload 呢，這樣就可以另外買個螢幕把網頁拉過去，修改好檔案，螢幕就會幫忙重新整理，大家省下這些時間就可以專心寫 Code 了啦，解決此問題非常容易，那就是裝上 &lt;a href="https://github.com/mockko/livereload" target="_blank">livereload&lt;/a> 這套 &lt;a href="http://rubygems.org/" target="_blank">rubygem&lt;/a> 程式，底下先看看 livereload 影片:&lt;/p></description></item><item><title>在 CentOS 上面安裝 Ruby 環境</title><link>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</link><pubDate>Thu, 13 Oct 2011 08:20:11 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/install-ruby-rubygems-compass-on-centos/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/6239698353/" title="centos by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm7.static.flickr.com/6176/6239698353_3e6c99f692_o.png?resize=293%2C79&amp;#038;ssl=1" alt="centos" data-recalc-dims="1" />&lt;/a>
&lt;/div> 目前開發網站都傾向於用
&lt;p>&lt;a href="http://compass-style.org" target="_blank">Compass&lt;/a> 這套 CSS Framework 來 develop，開發之前必須把環境先弄好，就是要有 &lt;a href="http://www.ruby-lang.org/" target="_blank">Ruby&lt;/a> 套件才可以安裝 Compass，網路上的教學幾乎都在是 Ubuntu 底下用 apt-get 方式來安裝，其實相當方便，但是 &lt;a href="http://fedoraproject.org/" target="_blank">Fedora&lt;/a> 或 &lt;a href="http://www.centos.org/" target="_blank">CentOS&lt;/a> 就是要用 yum 方式來安裝，這次碰到 CentOS 竟然 yum search git 出來的結果是空的，所以決定全部都透過 tar 的方式來安裝全部套件了。由於 Fedora 幾乎都可以找到套件，但是碰到 &lt;a href="http://rubygems.org/" target="_blank">rubygems&lt;/a> 需要用到 ruby 1.8.7 以上版本，所以還是乖乖的用 tar 方式吧。 大家可以試試看透過底下 yum 方式安裝:&lt;/p>
&lt;pre class="brush: bash; title: ; notranslate" title="">yum install -y ruby ruby-devel rubygems&lt;/pre> 雖然 Fedora 透過上面可以安裝成功，可是 ruby 跟 rubygems 的版本根本是...太舊了吧 ...</description></item><item><title>[網站] 好站連結 (三)</title><link>https://blog.wu-boy.com/2009/06/%E7%B6%B2%E7%AB%99-%E5%A5%BD%E7%AB%99%E9%80%A3%E7%B5%90-%E4%B8%89/</link><pubDate>Thu, 11 Jun 2009 03:01:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2009/06/%E7%B6%B2%E7%AB%99-%E5%A5%BD%E7%AB%99%E9%80%A3%E7%B5%90-%E4%B8%89/</guid><description/></item></channel></rss>