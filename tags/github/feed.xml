<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/github/</link><description>Recent content in github on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Wed, 06 Oct 2021 22:02:25 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/github/feed.xml" rel="self" type="application/rss+xml"/><item><title>如何發佈高品質的 Pull Request (簡稱 PR)</title><link>https://blog.wu-boy.com/2021/10/how-to-write-high-quality-pull-request/</link><pubDate>Wed, 06 Oct 2021 22:02:25 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/10/how-to-write-high-quality-pull-request/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/iQ6TfHQ.png" alt="code review">&lt;/p>
&lt;p>除了在公司團隊內負責審核各專案 PR 之外，也在 &lt;a href="https://github.com/">GitHub&lt;/a> 上面提交多個 PR，並且與全世界各地開發者一起共同維護大型專案，一個好的 PR 可以加速專案的進行，且省下多數 Reviewr 寶貴的時間，故我自己整理底下幾點，來確保團隊同事之前有個共同的標準外，也大大降低 Review 時間，提升專案品質。&lt;/p></description></item><item><title>用五分鐘安裝好 Drone 搭配 GitHub 自動化環境</title><link>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</link><pubDate>Wed, 26 Feb 2020 03:07:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/install-drone-with-github-in-five-minutes/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/vD-ucUYf5HyaiqFcboabD13gP0b_ZQeTKdceFqim75J5z3jiA-D_H4BZEbd0hPf9Go1h-kN06yPcYoT-qpym7jLbFNAjadLvhWMx8XdAQRdAa7Bg61I5pYO2U3fqVEh6n6D4I38sdoo=w1920-h1080" alt="">&lt;/p>
&lt;p>之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/">用 10 分鐘安裝好 Drone 搭配 GitLab&lt;/a>』。團隊內還沒導入自動化 CI/CD 測試部署環境的朋友們，可以來嘗試看看用 &lt;a href="https://golang.org">Go 語言&lt;/a>打造的 Drone CI/CD 開源專案，不用五分鐘的時間就可以在您的電腦上安裝好 CI/CD 的流程，真的是簡單到不行，只要一個 docker-compose 檔案就可以完成架設了。&lt;/p></description></item><item><title>用 Drone 部署靜態檔案到 GitHub Pages</title><link>https://blog.wu-boy.com/2020/02/deploy-static-files-to-github-using-drone/</link><pubDate>Sat, 22 Feb 2020 06:34:20 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2020/02/deploy-static-files-to-github-using-drone/</guid><description>&lt;blockquote>
&lt;p>新課程上架:『&lt;a href="https://www.udemy.com/course/docker-practice/?couponCode=20200222" title="Docker 容器實用實戰">Docker 容器實用實戰&lt;/a>』目前特價 &lt;strong>$800 TWD&lt;/strong>，優惠代碼『&lt;strong>20200222&lt;/strong>』，也可以直接匯款（價格再減 &lt;strong>100&lt;/strong>），如果想搭配另外兩門課程合購可以透過 &lt;a href="http://facebook.com/appleboy46">FB 聯絡我&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/vD-ucUYf5HyaiqFcboabD13gP0b_ZQeTKdceFqim75J5z3jiA-D_H4BZEbd0hPf9Go1h-kN06yPcYoT-qpym7jLbFNAjadLvhWMx8XdAQRdAa7Bg61I5pYO2U3fqVEh6n6D4I38sdoo=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com">GitHub&lt;/a> 提供一個非常方便的功能，就是可以將&lt;a href="https://pages.github.com">靜態檔案&lt;/a>部署在 GitHub 上，基本上開發者不用負擔任何 Host 費用，就可以使用靜態檔案來做 Demo 介紹，或者是文件系統。而本篇將教您如何用 &lt;a href="https://drone.io">Drone&lt;/a> 來自動化部署靜態檔案到 GitHub 上。作者直接用 Vue.js 來介紹整個流程。&lt;/p></description></item><item><title>用 GitHub Actions 部署 Go 語言服務</title><link>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</link><pubDate>Sat, 14 Dec 2019 11:44:47 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/12/deploy-golang-app-using-github-actions/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/NI2lnMOEhkrZJ-x_bmre_RoQxLnzYcpPXVB_p6eBMmPQ73yDgoftVmUHvk0P86Tt2MM_Q23IHNu7qq7j99RXzTEzG95BU1u1vdpell9krVGHlUmW3Ng7J7egj1LHugWHcHoezCty9o0=w1920-h1080" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> 也推出一陣子了，相信有不少雷，也是有很多優勢，未來在 GitHub 上面串接任何開源專案，都可以免費使用，過幾年可以看看 GitHub Actions 對 &lt;a href="https://travis-ci.org/">Travis&lt;/a> 的影響是多少？本篇要來介紹如何透過 GitHub Actions 來部署 &lt;a href="https://golang.org">Go 語言&lt;/a>服務，會用一個簡單 httpd 範例教大家如何透過 &lt;a href="https://docker.com">Docker&lt;/a> 方式來更新。使用 Go 語言基本服務流程大致上會是『測試 -&amp;gt; 編譯 -&amp;gt; 上傳 -&amp;gt; 啟動』，透過這四個步驟來學習 GitHub Actions 該如何設定。&lt;/p>
&lt;ul>
&lt;li>測試: Unit Testing 多一層保護&lt;/li>
&lt;li>編譯: 透過 go build 編譯出 Binary 檔案&lt;/li>
&lt;li>上傳: 寫 Dockerfile 將 Binary 包進容器內&lt;/li>
&lt;li>啟動: 透過 docker-compose 方式來更新服務&lt;/li>
&lt;/ul></description></item><item><title>GitHub 推出 CI/CD 服務 Actions 之踩雷經驗</title><link>https://blog.wu-boy.com/2019/05/introduction-to-github-actions/</link><pubDate>Tue, 21 May 2019 09:12:40 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/05/introduction-to-github-actions/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/vs6XKU4keYmwiBUeWrTVbYl4WKH7cTcmu6Lcggv0QWEBK81D06mbPg7skrmlnYrUf0JlEzhwjJwtmjVJ4p9wLXmbTs4mmzviiCK1RRwBhRXGom5w_3JSQwnV6UUbfH5Pd9uNNU5SCQE=w1920-h1080" title="GitHub Actions 簡介">&lt;img src="https://lh3.googleusercontent.com/vs6XKU4keYmwiBUeWrTVbYl4WKH7cTcmu6Lcggv0QWEBK81D06mbPg7skrmlnYrUf0JlEzhwjJwtmjVJ4p9wLXmbTs4mmzviiCK1RRwBhRXGom5w_3JSQwnV6UUbfH5Pd9uNNU5SCQE=w1920-h1080" alt="GitHub Actions 簡介" title="GitHub Actions 簡介">&lt;/a>&lt;/p>
&lt;p>今年很高興又去 &lt;a href="https://cloudsummit.ithome.com.tw/">Cloud Summit 研討會&lt;/a>給一場議程『初探 GitHub 自動化流程工具 Actions』，這場議程沒有講很多如何使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>，反倒是講了很多設計上的缺陷，以及為什麼我現在不推薦使用。GitHub Actions 在去年推出來，在這麼多 CI/CD 的免費服務，GitHub 自家出來做很正常，我還在想到底什麼時候才會推出，beta 版出來馬上就申請來試用，但是使用下來體驗非常的不好，有蠻多不方便的地方，底下我們就來聊聊 GitHub Acitons 有哪些缺陷以及該改進的地方。&lt;/p></description></item><item><title>GitHub Flow 及 Git Flow 流程使用時機</title><link>https://blog.wu-boy.com/2017/12/github-flow-vs-git-flow/</link><pubDate>Tue, 19 Dec 2017 03:48:08 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/12/github-flow-vs-git-flow/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/39143290882/in/dateposted-public/" title="Screen Shot 2017-12-20 at 11.45.04 AM">&lt;img src="https://i2.wp.com/farm5.staticflickr.com/4726/39143290882_877ebfcf8e_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2017-12-20 at 11.45.04 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在 Facebook 上面看到這篇『&lt;a href="http://blog.hellojcc.tw/2017/12/14/the-flaw-of-git-flow/">git flow 實戰經驗談&lt;/a>』，想說來寫一下對於團隊內該導入 &lt;a href="https://guides.github.com/introduction/flow/">GitHub Flow&lt;/a> 還是 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git Flow&lt;/a>，寫下自己的想法給大家參考看看。當你加入團隊，第一件事情就是嘗試了解目前團隊是走哪一種 Git 流程，但是在團隊內可能使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a>或者是傳統 &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git 流程&lt;/a>，在開始進入開發流程時，請務必先了解團隊整個 Release 流程。後者流程在筆者幾年前有發表一篇『&lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">branch model 分支模組基本介紹&lt;/a>』，如果大家有興趣可以先看看，而我自己在團隊內使用這兩種流程，嘗試過幾個團隊，得到底下結論:&lt;/p>
&lt;ul>
&lt;li>公司內部請使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a>&lt;/li>
&lt;li>開源專案請使用 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 流程&lt;/a> + &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">Git 流程&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>底下來探討為什麼我會有這些想法。首先先來看看公司團隊內部如果是走 Git 流程會有哪些缺陷。&lt;/p></description></item><item><title>開發者另類的自架 Git 服務選擇: Gitea</title><link>https://blog.wu-boy.com/2017/01/new-git-code-hosting-option-gitea/</link><pubDate>Sat, 07 Jan 2017 14:31:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/01/new-git-code-hosting-option-gitea/</guid><description>&lt;p>&lt;a href="https://i2.wp.com/c1.staticflickr.com/1/306/32012549582_3de35c29c8_o.png?ssl=1">&lt;img src="https://i2.wp.com/c1.staticflickr.com/1/306/32012549582_3de35c29c8_o.png?w=840&amp;#038;ssl=1" alt="" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>現在 Git 服務最有名的就是 &lt;a href="https://github.com/">Github&lt;/a>，如果是開放原始碼，我很推薦 Github。如果是想要放大量私有專案或企業內及個人使用，想必大家會推薦 &lt;a href="https://about.gitlab.com/">Gitlab&lt;/a>，在這裡就不多介紹 Gitlab 了，可以從 &lt;a href="https://www.google.com.tw/?gfe_rd=cr&amp;amp;ei=AO1wWPbPJMb48Aee1aqoBQ&amp;amp;gws_rd=ssl#q=gitlab&amp;amp;tbs=lr:lang_1zh-TW&amp;amp;lr=lang_zh-TW">Google 找到許多相關資料&lt;/a>，本篇會介紹另類的 Git 自架服務選擇 &lt;a href="http://gitea.io/">Gitea&lt;/a>，在介紹之前可以先參考我在 2014 年寫了一篇用 &lt;a href="https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/">Go 語言開發的 Git 服務叫做 Gogs&lt;/a>。&lt;/p></description></item><item><title>在 Travis 升級 Docker 和 docker-compose 版本</title><link>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</link><pubDate>Mon, 25 Jul 2016 13:10:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/upgrade-docker-and-docker-compose-on-travis/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/25660808075/in/dateposted-public/" title="docker">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1600/25660808075_c8190290f7_z.jpg?resize=640%2C217&amp;#038;ssl=1" alt="docker" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://travis-ci.org/">Travis&lt;/a> 是在 &lt;a href="https://github.com/">Github&lt;/a> 上常用的整合測試服務，支援了各種程式語言 &lt;a href="https://golang.org/">Golang&lt;/a>, PHP, Node.js ..等測試及部署，也同時支援了一些常用 Service，像是 &lt;a href="https://www.docker.com/">Docker&lt;/a>, Redis 或 Database。這次來聊聊&lt;a href="https://docs.travis-ci.com/user/docker/">在 Travis 如何使用 Docker&lt;/a>，在 Travis 內建的 Docker 跟 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 版本都是非常舊，所以使用預設的 docker-compose 指令常常會出現 (詳細 build log 可以參考&lt;a href="https://travis-ci.org/appleboy/golang-testing/jobs/147125401">這裡&lt;/a>)&lt;/p></description></item><item><title>新的 code coverage 線上服務 codecov.io</title><link>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</link><pubDate>Sat, 16 Jul 2016 07:50:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/07/new-coverage-service-codecov-io/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/28259851031/in/dateposted-public/" title="Screen Shot 2016-07-16 at 3.04.50 PM">&lt;img src="https://i1.wp.com/c8.staticflickr.com/9/8684/28259851031_de845f4e56_z.jpg?resize=640%2C355&amp;#038;ssl=1" alt="Screen Shot 2016-07-16 at 3.04.50 PM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>代碼覆蓋率 (code coverage) 是開發流程蠻重要的一環，用來評估專案內測試的覆蓋率，也代表了自己寫的程式，至少要測試過一次。在 &lt;a href="https://github.com">Github&lt;/a> 上面最常用的一套就是 &lt;a href="https://coveralls.io/">Coveralls&lt;/a> 相信大家對於此服務並不陌生，一個好的 Open Source 專案一定會在 Readme 上附上 Coveralls badge，證明自己寫的專案都有經過測試，請安心使用。在導入 Coveralls 服務到專案內時，安裝步驟有點小複雜，雖然不難，但是還是需要安裝一些 Tool 才能完成，底下用 &lt;a href="https://golang.org/">Golang&lt;/a> 為例。&lt;/p></description></item><item><title>在 Github 專案內搜尋 Golang 函式，Golang 開發者必裝 Chrome Extension</title><link>https://blog.wu-boy.com/2016/05/sourcegraph-chrome-extension-for-github/</link><pubDate>Sun, 08 May 2016 13:20:42 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/05/sourcegraph-chrome-extension-for-github/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>在 IDE 編輯器我們可以用內建的 go to definition 直接跳到該函式，但是身為工程師，每天接觸最多的就是觀看 &lt;a href="https://github.com">Github&lt;/a> 程式碼，有沒有什麼方式可以透過 Web 介面直接搜尋專案內 &lt;a href="https://golang.org/">Golang&lt;/a> 所有函式，讓 Golang 開發者快速跳到該函式，這時就要來安裝 &lt;a href="https://sourcegraph.com/blog/announcing-the-sourcegraph-chrome-extension-for/">Sourcegraph Chrome extension for GitHub&lt;/a> 啦。&lt;/p></description></item><item><title>Git Flow 與團隊合作</title><link>https://blog.wu-boy.com/2016/04/git-flow-tips/</link><pubDate>Thu, 28 Apr 2016 02:30:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/git-flow-tips/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/26620468361/in/dateposted-public/" title="branching-illustration@2x">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1584/26620468361_7fe972425a_z.jpg?resize=640%2C413&amp;#038;ssl=1" alt="branching-illustration@2x" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本月最後一篇投影片來介紹 &lt;a href="https://git-scm.com/">Git&lt;/a> Flow 流程該如何導入團隊，之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">Git branch model&lt;/a> 文章，裡面提到該如何正確使用 branch，但是現在回想起來要導入團隊內真的是有點麻煩，也遇到蠻多問題的，後來最後只採用 &lt;a href="https://guides.github.com/introduction/flow/">Github Flow&lt;/a>，簡單又容易理解，如果開發者很常在 &lt;a href="https://github.com">Github&lt;/a> 活動，相信對於此方法並不會很陌生。&lt;/p></description></item><item><title>Git tips: 更改 commit log 作者</title><link>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</link><pubDate>Thu, 11 Feb 2016 16:11:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</guid><description>在 Github 上面看到這 git-blame-someone-else 專案，用來隨時修改 commit log 作者，也就是可以任意改 commit id 內的 `Author` 欄位資訊，作者也相當幽默，直接拿此 commit id 改成 Linux 作者 Linus Torvalds。
使用時機 大家會問到什麼時候才會用到需要修改 commit 作者，以我自己的狀況為例，在團隊內開發新功能會直接開新的 Branch 來開發，完成後會進行 code review，此時原開發者目前正在忙其他專案，其他團隊成員就必須幫忙修改原先 commit 內容，通常我是直接建議透過 `git reset &amp;ndash;soft HEAD^` 來更動原本 commit，而不是產生新的 commit，修改後作者就會變成自己，此時後這功能就派上用場了。
安裝方式 根據源專案是透過 root 權限，將執行檔丟到 `/usr/loca/bin` 目錄底下，但是我個人不建議用這方式，因為還需要 root 權限，要打密碼有點麻煩，我建議透過在家目錄建立 `bin` 目錄，並將此目錄加到 `$PATH` 變數內即可。
1 2 3 $ mkdir ~/bin $ wget https://raw.githubusercontent.com/jayphelps/git-blame-someone-else/master/git-blame-someone-else -O ~/bin/git-blame-someone-else $ chmod 755 ~/bin/git-blame-someone-else 修改 .bashrc，加入底下程式碼</description></item><item><title>快樂學習 Linux 指令懶人包</title><link>https://blog.wu-boy.com/2016/01/simplified-and-community-driven-man-pages/</link><pubDate>Fri, 01 Jan 2016 08:03:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/01/simplified-and-community-driven-man-pages/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95.jpg?resize=500%2C198&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>以前在推廣 Linux 的時候，大家最不喜歡 Command Line 介面，都是被 Windows 慣壞了，相信剛接觸 Linux 最痛苦的就是學習指令，新人學習指令遇到困難，上網發問，一定會看到有人回答說，怎麼不看 man page，但是每個指令的 man page 都非常的長，連我自己看到都直接關掉，何況是剛入門 Linux 的新人。現在 &lt;a href="https://github.com">Github&lt;/a> 上面有看到這專案 &lt;a href="http://tldr-pages.github.io/">tldr&lt;/a>，這專案把每個指令文件簡單化，讓剛學習 Linux 的新人可以快速上手，像是底下 &lt;code>find&lt;/code> 指令&lt;/p></description></item><item><title>TJ 的新作品 frontend boilerplate 前端工具整合</title><link>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</link><pubDate>Thu, 31 Dec 2015 01:26:39 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/tj-frontend-boilerplate/</guid><description>今天突然看到 TJ 開了一個新 Repo 是 frontend boilerplate 嚇到我了，自從 TJ 去年發表要轉向 Go 之後，就把他自己很多的 Node.js Project 轉給其他人維護，也漸漸沒在 Github 上面活動，但是今天又看到她整理了一份 frontend boilerplate，內容含了現代流行的前端開發工具，大家可以參考看看，是個不錯的 Template:
Webpack React Redux Babel Autoprefixer PostCSS CSS modules Rucksack Hot reloading Redux router Redux effects TodoMVC example 期待 TJ 能有其他新作品啊。</description></item><item><title>Letsencrypt 開放申請免費 SSL 憑證</title><link>https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/</link><pubDate>Sat, 19 Dec 2015 07:03:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/letsencrypt-entering-public-beta-free-ssl/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/23840721545/in/dateposted-public/" title="Letsencrypt">&lt;img src="https://i1.wp.com/farm6.staticflickr.com/5803/23840721545_e0350b687f.jpg?w=300&amp;#038;ssl=1" alt="Letsencrypt" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>很高興在今年 12/03 &lt;a href="https://letsencrypt.org">Letsencrypt&lt;/a> 宣布進入 &lt;a href="https://letsencrypt.org/2015/12/03/entering-public-beta.html">public beta 階段&lt;/a>，開放免費 SSL 提供給開發者或正式網站使用，在這之前屬於封測階段，必須透過申請的方式才可以拿到 SSL 憑證。在知道 Letsencrypt 之前，我都是使用免費的 &lt;a href="https://www.startssl.com/">StartSSL&lt;/a>，這家申請的分式比較複雜，你可以在網路上找到許多&lt;a href="https://www.google.com.tw/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=startSSL%20%E6%95%99%E5%AD%B8">申請教學&lt;/a>，但是就是按部就班操作，就可以拿到一年份的 SSL 憑證，也就是一年申請一次啦，但是 Letsencrypt 申請的方式可以直接透過 command line 快速產生相對應的憑證，支援的 Plugin 也非常多 (像是 &lt;a href="https://httpd.apache.org/">Apache&lt;/a>, &lt;a href="http://nginx.org/">Nginx&lt;/a>)，詳細的操作方式可以參考&lt;a href="https://letsencrypt.readthedocs.org/en/latest/">線上文件&lt;/a>。這邊就不多說了，只要安裝好 Letsencrypt 指令，就可以無痛拿到各網站憑證，在 &lt;a href="https://github.com/">Github&lt;/a> 上面你可以找到許多別人&lt;a href="https://github.com/search?utf8=%E2%9C%93&amp;amp;q=Letsencrypt">寫好的 Plugin&lt;/a>，隨便挑一個來使用吧。&lt;/p></description></item><item><title>Mac iTerm2 + tmux 搭配 Mouse mode</title><link>https://blog.wu-boy.com/2015/05/mac-iterm2-tmux-with-mouse-mode/</link><pubDate>Sat, 02 May 2015 02:56:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/05/mac-iterm2-tmux-with-mouse-mode/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/17151857929" title="Screen Shot 2015-05-02 at 10.17.10 AM by Bo-Yi Wu, on Flickr">&lt;img src="https://i0.wp.com/farm8.staticflickr.com/7708/17151857929_cd5bd6c97b_z.jpg?resize=640%2C368&amp;#038;ssl=1" alt="Screen Shot 2015-05-02 at 10.17.10 AM" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>在 Mac 上必裝 &lt;a href="http://iterm2.com/">iTerm2&lt;/a> 終端機軟體搭配 copy mode 相當好用，只要用滑鼠選擇了一段文字，系統就會自動幫忙 copy，接著在任何地方就可以直接使用 &lt;code>command + v&lt;/code> 貼上，如果要多視窗操作，可以安裝 &lt;a href="http://tmux.sourceforge.net/">tmux&lt;/a> 多視窗軟體，如果使用了 tmux 你會發現滾輪滑鼠無法使用了，也就是看不到執行過的畫面跟指令，這時候就要調整 tmux 設定檔，補上 &lt;a href="https://github.com/appleboy/dotfiles/blob/master/.tmux.conf#L77-L82">Mouse mode 設定檔&lt;/a>&lt;/p></description></item><item><title>用 Go 語言寫的 Github Git 服務</title><link>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</link><pubDate>Mon, 07 Apr 2014 07:22:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</guid><description>&lt;img src="https://i1.wp.com/farm4.staticflickr.com/3762/13686798143_dd15f54076_o.png?w=840&amp;#038;ssl=1" alt="null" data-recalc-dims="1" />
&lt;p>最近看到大陸那邊用 &lt;a href="http://golang.org/">Go&lt;/a> 語言寫了一套類似 &lt;a href="https://github.com/">Github&lt;/a> 服務叫做 &lt;a href="https://github.com/gogits/gogs">Gogs&lt;/a>(Go Git Service)，目前個人裝起來速度方面相當快，跟 &lt;a href="http://gitlab.org">GitLab&lt;/a> 用 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 寫的 Git Service 速度有差，以功能完整性來說，GitLab 還是大勝 Gogs，安裝方式則是 Gogs 勝於 GitLab，如果最後要推薦用 Gogs 還是 GitLab，我個人還是會選 GitLab 因為畢竟還是要搭配 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a> 等 CI 服務才能發揮作用，這次來筆記如何在 Ubuntu 上安裝 Gogs。&lt;/p></description></item><item><title>在 Local 端處理 Github 專案 Pull Request</title><link>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</link><pubDate>Sat, 15 Mar 2014 03:00:27 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/03/checkout-github-pull-request/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo">&lt;img src="https://i2.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95.jpg?resize=500%2C198&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>這篇會筆記如何將 &lt;a href="https://github.com/">Github&lt;/a> 上專案內的 &lt;a href="https://help.github.com/articles/using-pull-requests">Pull Request&lt;/a> 拉到 Local 端電腦，雖然現在大部分的 Open Source 都會寫 Unit Test 並且搭配免費的 &lt;a href="https://travis-ci.org/">Travis CI&lt;/a> 自動化測試，但是有時候也是需要把別人的 Pull Request 拉下來測試後再進行 Merge，而 Github 官方有提供一篇說明文件 &lt;a href="https://help.github.com/articles/checking-out-pull-requests-locally">Checking out pull requests locally&lt;/a>，底下紀錄操作步驟。&lt;/p></description></item><item><title>Gitlab CE + Gitlab CI 打造版本控制及自動測試流程</title><link>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</link><pubDate>Fri, 01 Nov 2013 09:00:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/10605193576/" title="gitlab_logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?resize=320%2C206&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>Git 版本控制不管在嵌入式或 Web 領域都是很受歡迎的工具，尤其是不會遇到像 svn 搞爛 source tree，然後又要 Google 一堆解法。一般公司入門大概就是買 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 服務，一個月才五美金，可以提供五個 Private Project，當然你也可以不付錢，而去使用 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a>，好處就是無限的 Private Project，唯一的限制就是開發者數量，只能在五個以內，設定超過五個，就不給 push 或 pull 了，完成版本控制後，接著就是專案的自動測試，在 github 上面，推的就是 &lt;a href="https://travis-ci.org/" target="_blank">travis-ci&lt;/a>，這也是全部 open source 專案的喜好，你會發現大部分的專案都會放上 &lt;a href="https://github.com/appleboy/backbone-template-engine/blob/master/.travis.yml" target="_blank">.travis.yml&lt;/a>，來告訴 travis 需要的測試步驟，測試步驟完成後，就要將 source code deploy 到 Amazone 或其他雲端服務，到這個服務基本上都要收費了，所以&lt;a href="http://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/" target="_blank">上一篇&lt;/a>有介紹 &lt;a href="https://drone.io/" target="_blank">Drone.io&lt;/a> 服務，可以自動測試加上 Deploy 到遠端機器，不過缺點就是不支援 Private Project，要的話就是要收費。&lt;/p></description></item><item><title>Drone.io 搭配 Ruby 環境測試</title><link>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</link><pubDate>Thu, 17 Oct 2013 02:54:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/</guid><description>&lt;p>相信現在 &lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 已經是大家共通的版本控制工具，每當專案有新的 commit，我們可以透過 &lt;a href="https://travis-ci.org/" target="_blank">Travis&lt;/a> 來幫忙做測試，但是 Travis 真的只有支援測試而已，如果測試成功想要進一步 Deploy 到任何機器或者是繼續做任何動作，這些都不支援的，那國外有些 Service 可以整合 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 或 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a> Project 幫忙做到自動測試及 Deploy，比較常見的就是 &lt;a href="https://www.codeship.io" target="_blank">Codeship&lt;/a>，這服務非常強大，整合了 &lt;a href="https://www.heroku.com/" target="_blank">Heroku&lt;/a>，&lt;a href="https://appengine.google.com/" target="_blank">App Engine&lt;/a>，&lt;a href="https://www.nodejitsu.com/" target="_blank">Nodejitsu&lt;/a> .. 等服務，Deploy 也支援 &lt;a href="https://github.com/fabric/fabric" target="_blank">Fabric&lt;/a>, &lt;a href="http://puppetlabs.com/" target="_blank">Puppet&lt;/a>, Shell script 等等，這家的收費是看每個月做了多少次編譯測試動作，最便宜的方案每個月 $9 美金，只能編譯 50 次。&lt;/p></description></item><item><title>Git denying non-fast forward 問題</title><link>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</link><pubDate>Thu, 14 Mar 2013 08:21:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/03/git-denying-non-fast-forward/</guid><description>最近幫別公司處理 denying non-fast forward 的 git server 問題，沒事就別動檔案權限，不管是不是修改內容，只要用 chmod 指令，Git 還是會判別檔案變動。處理 git push 直接給我噴
$ git push --force origin master
Total 0 (delta 0), reused 0 (delta 0) error: denying non-fast forward refs/heads/master (you should pull first) To git@git.example.com:myrepo.git ! [remote rejected] master - master (non-fast forward) error: failed to push some refs to 'git@git.example.com:myrepo.git' 會遇到這問題的原因是使用者將不該 commit 的程式碼都 push 到伺服器上面，例如資料庫帳號密碼，個人帳蜜等等，這真的是不應該，解決方式也沒有很難，只要用 git reset --hard 到您需要的 commit hash 值，並且 git push --force 方式蓋掉 Server 上面的程式碼，但是如果遇到 git push &amp;ndash;force origin 或 git push &amp;ndash;force origin master 都無作用，那就請加上底下設定</description></item><item><title>在 git Commit 之前檢查 PHP 是否有錯誤</title><link>https://blog.wu-boy.com/2013/02/git-hooks-parse-php-error-before-commit/</link><pubDate>Fri, 08 Feb 2013 07:12:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/02/git-hooks-parse-php-error-before-commit/</guid><description> 在 commit code 之前，程式設計師必須確保程式碼的正確性，包含不要放入 debug message 到 git server，寫了一個簡單的 pre-commit 程式，來確保 PHP 是否有 Parse error，或者是在寫 CoffeeScript 及 JavaScript 時，常常會用到 console.* 來當作中斷點或者是顯示變數資料，這也是需要盡量避免 commit 到伺服器，你可不想要長官 review 的時候看到這麼多 debug 訊息吧。這時候就是需要 git-hooks 的 pre-commit 幫忙檢查這些 Syntax 語法，可以直接參考我的 git-hooks 專案。安裝方式很簡單:
$ git clone https://github.com/appleboy/git-hooks.git
$ chmod +x bin/hooks.sh pre-commit
$ ./bin/hooks.sh your_project_path 如果使用 git commit 之前，就會檢查 .js、.coffee、.php 等副檔名。</description></item><item><title>CodeIgniter 台灣官網原始碼釋出</title><link>https://blog.wu-boy.com/2013/01/taiwain-codeigniter-source-code-release/</link><pubDate>Sun, 20 Jan 2013 02:06:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/01/taiwain-codeigniter-source-code-release/</guid><description>2009 年開始接觸 CodeIgniter，拿到第1版原始碼來自 中國 CodeIgniter ，版本是很舊的 1.7.x 版本，目前官方已經是 2.1.3 版本，現在朝 3.0.x 版本邁進，這次有機會將整個原始碼改寫成 3.0.x develop 分支版本，也將整個官方 source code 分享出來，讓需要原始碼範例初學者可以參考，Source Code 已經放在 github 上面，由於是拿大陸那邊的原始碼，也許有些地方寫的不是很完整，歡迎大家 pull request。 台灣 CodeIgniter Source Code Github</description></item><item><title>新人 Git 版本控制教學</title><link>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</link><pubDate>Mon, 06 Feb 2012 03:34:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2012/02/how-to-use-git-version-control-for-new-beginner/</guid><description>昨日去台北簡報如何快速學習 git，投影片主要是給新手 git 基礎介紹，如何使用 branch model，git submodule 及 tag。內容不會很難，適合之前就玩過任何一套 version control 的使用者來閱讀，如果有 svn 基礎，學習會比較輕鬆。簡報搭配 github 內容來教學。
投影片內容參考 Git Pro book 這網站教學，大家可以直接看原文說明，會更清楚 Git 使用。</description></item><item><title>Github 支援 SVN Client</title><link>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</link><pubDate>Sun, 23 Oct 2011 05:43:00 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/github-improved-subversion-client-support/</guid><description>Github 一年前宣佈開始支援 SVN Client，不過這是必須透過 https://svn.github.com 才可以取得資料，跟一般 git 的網址不一樣，然而就在最近宣佈了同步支援 svn 也可以存取 https://github.com/，並且過不久的將來會移除 https://svn.github.com/ 網域。
URL 處理 git 方式: $ git clone https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan git-ds
Cloning into git-ds...
remote: Counting objects: 4177, done.
remote: Compressing objects: 100% (665/665), done.
remote: Total 4177 (delta 3544), reused 4140 (delta 3509)
Receiving objects: 100% (4177/4177), 2.65 MiB | 239 KiB/s, done.
Resolving deltas: 100% (3544/3544), done. svn 方式: $ svn checkout https://github.com/appleboy/PHP-CodeIgniter-Framework-Taiwan svn-ds
A svn-ds/branches
A svn-ds/branches/develop
A svn-ds/branches/develop/README
A svn-ds/branches/develop/changelog.</description></item><item><title>轉移 Github 上的 Private Repository 到 BitBucket …</title><link>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</link><pubDate>Mon, 17 Oct 2011 06:45:49 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/transfer-github-private-repository-to-bitbucket/</guid><description>&lt;div style="margin:auto 0; text-align: center;">
&lt;a href="https://www.flickr.com/photos/appleboy/6209323485/" title="Bitbucket by appleboy46, on Flickr">&lt;img src="https://i1.wp.com/farm7.static.flickr.com/6161/6209323485_9ffbcb2911_o.png?resize=256%2C256&amp;#038;ssl=1" alt="Bitbucket" data-recalc-dims="1" />&lt;/a>
&lt;/div> 看到
&lt;p>&lt;a href="http://blog.gslin.org/" target="_blank">gslin 大神&lt;/a>寫了一篇 &lt;a href="http://blog.gslin.org/archives/2011/10/10/2750/%e6%8a%8a-github-%e4%b8%8a%e7%9a%84-private-repository-%e6%90%ac%e5%88%b0-bitbucket-%e4%b8%8a/" target="_blank">把 GitHub 上的 private repository 搬到 BitBucket 上…&lt;/a>，最近自己也把一些不能公開的專案轉到 &lt;a href="https://bitbucket.org/" target="_blank">BitBucket&lt;/a> 上面，由於在 BitBucket 上面可以無限開 private repository，所以我想也沒有必要付費給 &lt;a href="https://github.com/" target="_blank">Github&lt;/a>，雖然論 Web 功能上而言，Github 還是略勝一籌，個人還是比較習慣 github 有 Network 的圖形可以看，不過平常還是都是在打指令，所以也沒差了，在 push 速度上面，感覺 BitBucket 也沒有輸 github 許多，所以決定就轉過去了，人總是為了錢所考量，當然 BitBucket 還是有些缺點的，可以參考之前寫的 &lt;a href="http://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/" target="_blank">Bitbucket 開始支援 Git Repository&lt;/a>&lt;/p></description></item><item><title>Bitbucket 開始支援 Git Repository</title><link>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</link><pubDate>Tue, 04 Oct 2011 02:30:16 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/10/bitbucket-support-git-repository-now/</guid><description>很高興剛剛收到 Bitbucket 寄來一封會員信，標題非常吸引大家的注意，那就是 Bitbucket now rocks Git.，是的，你沒看錯，Bitbucket 現在開始支援 Git repository，不再只有 Mercurial 可以使用，這還不算什麼，Bitbucket 更是推出**無限制免費 private repos for free **，這樣的推出，不知道會有多少 Github 用戶轉移到 Bitbucket 上面，還有另一項主因就是 Unlimited disk space 無限制硬碟容量，不過也許不用高興的太早，Bitbucket 在使用者人數上面有些限制，可以參考 Plans &amp;amp; Pricing，免費方案每個 Repository 只能有5個 User，反觀 Github 並沒有這限制，不過我想這也不是問題，大家可以 Fork 到自己的專案，在 Pull Request 即可。 補充官方網站提供了轉換各大 Source Hosting 工具，目前支援 Github、SourceForge、Google Code、Subversion、Mercurial…等。</description></item><item><title>Git Submodule 介紹與使用</title><link>https://blog.wu-boy.com/2011/09/introduction-to-git-submodule/</link><pubDate>Thu, 22 Sep 2011 12:30:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/09/introduction-to-git-submodule/</guid><description>&lt;p>自己用 &lt;a href="http://git-scm.com/" target="_blank">Git&lt;/a> 已經很長一段時間了，沒用過 git submodule 的話真的是對不起自己，今天來筆記 &lt;a href="http://book.git-scm.com/5_submodules.html" target="_blank">Git Submodule&lt;/a> 一些操作步驟及說明。&lt;/p>
&lt;h2 id="git-submodule-使用時機">git Submodule 使用時機&lt;/h2>
&lt;p>大家在開發新專案的時候，不知道有沒有用到其他專案的程式碼，像是 Web 專案，也許會用到 &lt;a href="http://www.blueprintcss.org/" target="_blank">Blueprintcss CSS Framwork&lt;/a> 或者是 &lt;a href="http://sass-lang.com/" target="_blank">Sass&lt;/a>，這些專案目前都放在 &lt;a href="http://github.com" target="_blank">Github&lt;/a> 上面進行維護，以前的作法就是先 git clone 下來，把要的檔案分別複製到自己專案，可是問題來了，如果官方更新了程式碼，那自己的專案如何更新呢？難道是重複步驟把檔案複製到原來地方嗎？這樣會不會太麻煩，這時候就是需要 &lt;span style="color:green">&lt;strong>git submodule&lt;/strong>&lt;/span> 來幫助大家進行程式碼的更新，這樣隨時隨地都可以取得最新的程式碼。補充說明一點，git 目前無法針對單一專案底下的單一檔案或目錄進行 clone，而必須 clone 整個目錄，這點跟 &lt;a href="http://subversion.tigris.org/" target="_blank">svn&lt;/a> 有很大的不同，所以 git 可以建立各個不同的 submodule 來整合成一個大型 Project。換句話說就是: 在您的專案底下，&lt;strong>&lt;span style="color:red">你可以任意將其他人的專案掛載在自己任何目錄底下&lt;/span>&lt;/strong>。&lt;/p></description></item><item><title>CodeIgniter 轉移版本控制到 Github 順便 Release 2.0.3</title><link>https://blog.wu-boy.com/2011/08/codeigniter-%E8%BD%89%E7%A7%BB%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%B0-github-%E9%A0%86%E4%BE%BF-release-2-0-3/</link><pubDate>Mon, 22 Aug 2011 07:33:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2011/08/codeigniter-%E8%BD%89%E7%A7%BB%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%88%B0-github-%E9%A0%86%E4%BE%BF-release-2-0-3/</guid><description>在我上禮拜 8/20,8/21 參加 COSCUP 2011 會議的時候，CodeIgniter 偷偷 Release 了 2.0.3 版本，也不算偷偷 Release，因為剛好8月20,21號也是 CICON 2011 會議，CodeIgniter 想給來聽演講的學員們一個驚喜吧，也因為這個 CodeIgniter Con 2011 會議，官方也宣佈將轉換版本控制，原本放在 bitbucket 的程式碼也都轉換到 Github 上面了，另外順便把 CodeIgniter Reactor 取消後面 Reactor 字串，改成 CodeIgniter 了，那 Reactor 呢，就變成 Develop 分支，這個消息真的是太棒了，轉換到大家所熟悉的 Git 版本控制，有些常常在貢獻程式碼的開發者，都是在使用 Github。不管是不是 CodeIgniter，其他許多 opensource 包含 jQuery, phpBB…等都是在使用 github。 [
直接下載 2.0.3 玩看看吧]1 參考: 繁體中文 CodeIgniter 官方公告</description></item><item><title>[Git] 版本控制: 如何使用標籤(Tag)</title><link>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</link><pubDate>Thu, 18 Nov 2010 14:45:52 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2010/11/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A8%99%E7%B1%A4tag/</guid><description>&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> Tag 功能就如同 Cvs Tag 是一樣的，您可以在專案裡面隨意新增 Tag，方便您紀錄訊息，底下一些基本的操作來學習如何使用標籤(Tag)功能(新增標籤、以及各種不同類型標籤之間的差別)。&lt;/p>
&lt;h2 id="列出既有標籤">列出既有標籤&lt;/h2>
&lt;p>直接使用 git tag 即可&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#1">1&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#2">2&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-bash" data-lang="bash">$ git tag -l
v0.1
v1.3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果整個專案過多 Tag 也可以透過底下方式搜尋出來&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="1">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#1">1&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="2">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#2">2&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="3">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#3">3&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="4">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#4">4&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="5">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#5">5&lt;/a>
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="6">&lt;a style="outline: none; text-decoration:none; color:inherit" href="#6">6&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-bash" data-lang="bash">$ git tag -l &lt;span style="color:#cd5555">&amp;#39;v1.4.2.*&amp;#39;&lt;/span>
v1.4.2.1
v1.4.2.2
v1.4.2.3
v1.4.2.4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>