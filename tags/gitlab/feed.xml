<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitLab on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/gitlab/</link><description>Recent content in GitLab on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Wed, 06 Oct 2021 22:02:25 +0800</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/gitlab/feed.xml" rel="self" type="application/rss+xml"/><item><title>如何發佈高品質的 Pull Request (簡稱 PR)</title><link>https://blog.wu-boy.com/2021/10/how-to-write-high-quality-pull-request/</link><pubDate>Wed, 06 Oct 2021 22:02:25 +0800</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2021/10/how-to-write-high-quality-pull-request/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/iQ6TfHQ.png" alt="code review">&lt;/p>
&lt;p>除了在公司團隊內負責審核各專案 PR 之外，也在 &lt;a href="https://github.com/">GitHub&lt;/a> 上面提交多個 PR，並且與全世界各地開發者一起共同維護大型專案，一個好的 PR 可以加速專案的進行，且省下多數 Reviewr 寶貴的時間，故我自己整理底下幾點，來確保團隊同事之前有個共同的標準外，也大大降低 Review 時間，提升專案品質。&lt;/p></description></item><item><title>Ansible 設定 Google Container Registry 搭配 Drone 自動上傳</title><link>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</link><pubDate>Thu, 03 Oct 2019 02:14:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/10/ansible-setup-google-container-registry-and-upload-image-via-drone-ci-cd/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/mese3VEnyNElOz7iL-z3w0nxM4PcNjC6lfPWxLbPrHTFr3PvKeyxGwIxTXoRztpidxN7gX8WlRtzBsfxkOVb_Pt-jEwCbZtYDD3l0DLeBger7XaC40XVyPUgAyT6yU_FdqJeAUCSQik=w1920-h1080" alt="blog logo">&lt;/p>
&lt;p>最近剛好有需求要串接 &lt;a href="https://cloud.google.com/container-registry/">GCR&lt;/a> (Google Container Registry)，專案如果是搭配 GCP 服務，個人建議就直接用 GCR 了。本篇要教大家如何透過 Ansible 管理遠端機器直接登入 GCR，透過特定的帳號可以直接拉 Image，接著用 &lt;a href="https://docs.docker.com/compose/">docker-compose&lt;/a> 來重新起動服務，這算是最基本的部署流程，那該如何用 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 登入呢？請看底下教學。&lt;/p></description></item><item><title>用 10 分鐘安裝好 Drone 搭配 GitLab</title><link>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</link><pubDate>Fri, 23 Aug 2019 01:05:48 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/08/install-drone-with-gitlab-in-10-minutes/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" title="Drone+GitLab">&lt;img src="https://lh3.googleusercontent.com/UBBk430Fl5KSAbDHuu0gyb6VXrjdGM5aj9JV7LqyFbubYDYuUu3KfahdarNJn0SHyEUCN_lWXfhb2BsNxjgD--kFt-MRkDguj1pWRNEpgiTL_zaVn9BDJPmm7wkIFmv0oEm6pt0NHkY=w1920-h1080" alt="Drone+GitLab" title="Drone+GitLab">&lt;/a>&lt;/p>
&lt;p>如果你沒在使用 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a>，那可以來嘗試看看 &lt;a href="https://drone.io/">Drone CI/CD&lt;/a>，用不到 10 分鐘就可以快速架設好 Drone，並且上傳一個 &lt;code>.drone.yml&lt;/code> 並且開啟第一個部署或測試流程，安裝步驟非常簡單，只需要對 &lt;a href="https://docker.com">Docker&lt;/a> 有基本上的了解，通常都可以在短時間完成 Drone CI/CD 架設。&lt;/p></description></item><item><title>在 docker-in-docker 環境中使用 cache-from 提升編譯速度</title><link>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</link><pubDate>Sun, 24 Feb 2019 12:37:23 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2019/02/using-cache-from-can-speed-up-your-docker-builds/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" title="提升 docker build 時間">&lt;img src="https://lh3.googleusercontent.com/NxYD5o3PrenPHddPaNvv8EMK6u-cUdx5KnmmdYMXpxLzD9oDcTAchd0q4GRJxsOLJkeAhhVxzDmcJoWIzHqyo6hTV1FYZXzUbQ-elJNzlqKTYcBJcAOhkansgWHPTleQGOz92xwv_zE=w1920-h1080" alt="提升 docker build 時間" title="提升 docker build 時間">&lt;/a>&lt;/p>
&lt;p>在現代 CI/CD 的環境流程中，使用 &lt;a href="https://github.com/jpetazzo/dind">Docker In Docker&lt;/a> 來編譯容器已經相當流行了，像是 &lt;a href="https://about.gitlab.com/product/continuous-integration/">GitLab CI&lt;/a> 或 &lt;a href="https://github.com/drone/drone" title="Drone">Drone&lt;/a> 都是全走 &lt;a href="https://www.docker.com/" title="Docker">Docker&lt;/a> 環境，然而有很多人建議盡量不要在 CI 環境使用 Docker In Docker，原因在於 CI 環境無法使用 Host Image 資料，導致每次要上傳 Image 到 &lt;a href="https://hub.docker.com/" title="Docker Hub">Docker Hub&lt;/a> 時都需要重新下載所有的 Docker Layer，造成每次跑一次流程都會重複花費不少時間，而這個問題在 &lt;a href="https://github.com/docker/docker/releases/tag/v1.13.0">v1.13&lt;/a> 時被解決，現在只要在編譯過程指定一個或者是多個 Image 列表，先把 Layer 下載到 Docker 內，接著對照 Dockerfile 內只要有被 Cache 到就不會重新再執行，講得有點模糊，底下直接拿實際例子來看看。&lt;/p></description></item><item><title>為什麼我用 Drone 取代 Jenkins 及 GitLab CI</title><link>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</link><pubDate>Thu, 07 Sep 2017 02:58:44 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/09/why-i-choose-drone-as-ci-cd-tool/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/36906030282/in/dateposted-public/" title="Logo-DevOpsDays">&lt;img src="https://farm5.staticflickr.com/4382/36906030282_f489c96be3_z.jpg" alt="Logo-DevOpsDays">&lt;/a>&lt;/p>
&lt;p>終於有機會正式跟大家介紹為什麼我會捨棄 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 跟 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a>，取而代之的是用 &lt;a href="https://golang.org">Go&lt;/a> 語言寫的 &lt;a href="https://github.com/drone/drone">Drone&lt;/a>。今年很高興錄取台灣第一屆 &lt;a href="https://devopsdays.tw/">DevOps Day&lt;/a> 講師，在今年主題是『用 Drone 打造輕量級容器持續交付平台』，主要推廣這套 &lt;a href="https://github.com/drone/drone">Drone&lt;/a> CI/CD 工具，會議內容圍繞在 &lt;a href="https://jenkins.io/">Jenkins&lt;/a>, &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 跟 Drone 的比較。也提到為什麼我不用 Jenkins 及 GitLab CI 的幾個原因。底下整理議程大綱。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>為什麼選擇 Drone&lt;/li>
&lt;li>Drone 基礎簡介&lt;/li>
&lt;li>Drone 架構擴展&lt;/li>
&lt;li>Drone 安裝方式&lt;/li>
&lt;li>Drone 管理介面&lt;/li>
&lt;li>Drone 測試部署&lt;/li>
&lt;li>Drone 自訂套件&lt;/li>
&lt;/ul></description></item><item><title>Drone 自動觸發 GitLab CI 或 Jenkins 任務</title><link>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</link><pubDate>Wed, 28 Jun 2017 04:24:31 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2017/06/trigger-gitlab-ci-or-jenkins-using-drone/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/34957940160/in/dateposted-public/" title="drone-logo_512">&lt;img src="https://i1.wp.com/c1.staticflickr.com/5/4236/34957940160_435d83114f_z.jpg?w=840&amp;#038;ssl=1" alt="drone-logo_512" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/drone/drone">Drone&lt;/a> 是一套由 &lt;a href="https://golang.org/">Go 語言&lt;/a>所開發的開源碼專案，讓開發者可以使用 &lt;a href="http://docker.com/">Docker&lt;/a> Container 快速設定自動化測試及部署，上篇有提到『&lt;a href="https://blog.wu-boy.com/2017/06/how-to-schedule-builds-in-drone/">Cronjob 搭配 Drone 服務&lt;/a>』，讓 &lt;a href="https://jenkins.io/">Jenkins&lt;/a> 或 &lt;a href="https://about.gitlab.com/features/gitlab-ci-cd/">GitLab CI&lt;/a> 用戶可以轉換 Cron Job 任務到 Drone 上面。本篇則是會介紹如何透過 Drone 去觸發 Jenkins 或 GitLab CI 上的工作，當然這是過渡時期，希望大家最後能將工作完整移轉到 Drone 上面，不要再依靠 Jenkins 或 GitLab CI 了。本篇會教大家用三種方式來觸發 GitLab CI 或 Jenkins 任務。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>使用 Drone CI/CD&lt;/li>
&lt;li>使用 Docker 指令&lt;/li>
&lt;li>使用 Command Line (命令列)&lt;/li>
&lt;/ul></description></item><item><title>在 Debian 7.8 安裝 Gitlab 筆記</title><link>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</link><pubDate>Sat, 12 Dec 2015 09:22:02 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/12/install-gitlab-on-debian-7-8/</guid><description>&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?w=840&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />
&lt;p>之前寫過一篇 &lt;a href="http://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/">GitLab 快速安裝筆記&lt;/a>，但是這次在 Debian 7.8 上安裝起來遇到蠻多問題，故寫此篇來記錄安裝遇到的問題，也會寫到如何搭配 Nginx 設定。GitLab 分兩種版本，一種是 Community Edition packages 另一種是 Enterprise Edition packages，本篇是記錄 Community 版本安裝步驟，可以到&lt;a href="https://about.gitlab.com/downloads/">下載頁面&lt;/a>選擇您的作業系統，就可以看到安裝方式&lt;/p></description></item><item><title>GitLab 快速安裝</title><link>https://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/</link><pubDate>Wed, 24 Dec 2014 08:12:25 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/12/easy-to-install-gitlab-quickly/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/10605193576/" title="gitlab_logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?resize=320%2C206&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>最近想安裝新版的 &lt;a href="https://about.gitlab.com/">GitLab&lt;/a>，竟然發現 GitLab 推出&lt;a href="https://about.gitlab.com/downloads/">快速懶人包&lt;/a>，終於可以不用打很多指令來安裝了，大幅降低了安裝困難度，目前支援 &lt;a href="http://nginx.org/">CentOS&lt;/a>, &lt;a href="http://www.ubuntu.com/">Ubutnu&lt;/a>, &lt;a href="https://www.debian.org/">Debian&lt;/a> 等安裝包，GitLab 各版本也可以從&lt;a href="https://about.gitlab.com/downloads/archives/">這邊列表&lt;/a>找到，另外安裝前請確保你的硬體環境是符合 &lt;a href="http://doc.gitlab.com/ce/install/requirements.html">GitLab 所要求&lt;/a>，來看看有沒有這麼簡單安裝。&lt;/p></description></item><item><title>用 Go 語言寫的 Github Git 服務</title><link>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</link><pubDate>Mon, 07 Apr 2014 07:22:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/04/go-git-service-using-go-language/</guid><description>&lt;img src="https://i1.wp.com/farm4.staticflickr.com/3762/13686798143_dd15f54076_o.png?w=840&amp;#038;ssl=1" alt="null" data-recalc-dims="1" />
&lt;p>最近看到大陸那邊用 &lt;a href="http://golang.org/">Go&lt;/a> 語言寫了一套類似 &lt;a href="https://github.com/">Github&lt;/a> 服務叫做 &lt;a href="https://github.com/gogits/gogs">Gogs&lt;/a>(Go Git Service)，目前個人裝起來速度方面相當快，跟 &lt;a href="http://gitlab.org">GitLab&lt;/a> 用 &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 寫的 Git Service 速度有差，以功能完整性來說，GitLab 還是大勝 Gogs，安裝方式則是 Gogs 勝於 GitLab，如果最後要推薦用 Gogs 還是 GitLab，我個人還是會選 GitLab 因為畢竟還是要搭配 &lt;a href="http://jenkins-ci.org/">Jenkins&lt;/a> 等 CI 服務才能發揮作用，這次來筆記如何在 Ubuntu 上安裝 Gogs。&lt;/p></description></item><item><title>Git Server 噴 git upload-pack: git-pack-objects died with error</title><link>https://blog.wu-boy.com/2014/02/git-server-git-pack-objects-died-with-error/</link><pubDate>Fri, 07 Feb 2014 10:32:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2014/02/git-server-git-pack-objects-died-with-error/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/8455538800/" title="Git-Logo-2Color by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm9.staticflickr.com/8523/8455538800_30f65954f8.jpg?w=840&amp;#038;ssl=1" style="max-width: 250px;" alt="Git-Logo-2Color" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>透過 &lt;a href="http://gitlab.org/">Gitlab&lt;/a> 架設 &lt;a href="http://git-scm.com/">Git&lt;/a> Server 來放一些 Document 資料，由於個人 Document 都是 pdf 檔案，所以整個 Git Repository 就非常肥大，今天在 Clone 下來的時候，不僅是主機 CPU 飆高，然後記憶體被吃到快沒了，最後還噴出底下錯誤訊息&lt;/p>
&lt;div>
&lt;pre class="brush: bash; title: ; notranslate" title="">remote: Counting objects: 4912, done.
remote: fatal: Out of memory, malloc failed
error: git upload-pack: git-pack-objects died with error.
fatal: git upload-pack: aborting due to possible repository corruption on the remote side.
remote: aborting due to possible repository corruption on the remote side.
fatal: early EOF
fatal: index-pack failed&lt;/pre>
&lt;/div></description></item><item><title>Jenkins + Nginx User Auth</title><link>https://blog.wu-boy.com/2013/11/jenkins-nginx-auth/</link><pubDate>Wed, 13 Nov 2013 02:57:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/11/jenkins-nginx-auth/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/10830034484/" title="jenkins_logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm6.staticflickr.com/5507/10830034484_95cba45707.jpg?resize=398%2C128&amp;#038;ssl=1" alt="jenkins_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://jenkins-ci.org/" target="_blank">Jenkins CI&lt;/a> 是一套非常好的 Job 執行 Tool，可以幫忙跑專案測試，測試完成後繼續 Deploy 到相對應的伺服器，也可以自動寄信給開發者或者是指定的內部人員。在 &lt;a href="http://www.ubuntu.com/" target="_blank">Ubuntu&lt;/a> 或 &lt;a href="http://www.debian.org/" target="_blank">Debian&lt;/a> 安裝方式非常簡單，按照下述操作就可以簡易架設完成&lt;/p>
&lt;div>
&lt;pre class="brush: bash; title: ; notranslate" title="">$ aptitude -y install openjdk-7-jre openjdk-7-jdk
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
$ sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
$ aptitude -y update
$ aptitude -y install jenkins&lt;/pre>
&lt;/div></description></item><item><title>Gitlab CE + Gitlab CI 打造版本控制及自動測試流程</title><link>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</link><pubDate>Fri, 01 Nov 2013 09:00:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/11/intergrate-work-flow-with-gitlab/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://www.flickr.com/photos/appleboy/10605193576/" title="gitlab_logo by appleboy46, on Flickr">&lt;img src="https://i2.wp.com/farm4.staticflickr.com/3830/10605193576_54b54e4dfc_n.jpg?resize=320%2C206&amp;#038;ssl=1" alt="gitlab_logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>Git 版本控制不管在嵌入式或 Web 領域都是很受歡迎的工具，尤其是不會遇到像 svn 搞爛 source tree，然後又要 Google 一堆解法。一般公司入門大概就是買 &lt;a href="https://github.com/" target="_blank">Github&lt;/a> 服務，一個月才五美金，可以提供五個 Private Project，當然你也可以不付錢，而去使用 &lt;a href="https://bitbucket.org/" target="_blank">Bitbucket&lt;/a>，好處就是無限的 Private Project，唯一的限制就是開發者數量，只能在五個以內，設定超過五個，就不給 push 或 pull 了，完成版本控制後，接著就是專案的自動測試，在 github 上面，推的就是 &lt;a href="https://travis-ci.org/" target="_blank">travis-ci&lt;/a>，這也是全部 open source 專案的喜好，你會發現大部分的專案都會放上 &lt;a href="https://github.com/appleboy/backbone-template-engine/blob/master/.travis.yml" target="_blank">.travis.yml&lt;/a>，來告訴 travis 需要的測試步驟，測試步驟完成後，就要將 source code deploy 到 Amazone 或其他雲端服務，到這個服務基本上都要收費了，所以&lt;a href="http://blog.wu-boy.com/2013/10/drone-io-with-runy-compass-setup/" target="_blank">上一篇&lt;/a>有介紹 &lt;a href="https://drone.io/" target="_blank">Drone.io&lt;/a> 服務，可以自動測試加上 Deploy 到遠端機器，不過缺點就是不支援 Private Project，要的話就是要收費。&lt;/p></description></item></channel></rss>