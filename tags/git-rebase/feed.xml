<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git rebase on 小惡魔 - AppleBOY</title><link>https://blog.wu-boy.com/tags/git-rebase/</link><description>Recent content in git rebase on 小惡魔 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Thu, 28 Apr 2016 02:30:06 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/git-rebase/feed.xml" rel="self" type="application/rss+xml"/><item><title>Git Flow 與團隊合作</title><link>https://blog.wu-boy.com/2016/04/git-flow-tips/</link><pubDate>Thu, 28 Apr 2016 02:30:06 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/git-flow-tips/</guid><description>&lt;p>&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/appleboy/26620468361/in/dateposted-public/" title="branching-illustration@2x">&lt;img src="https://i2.wp.com/farm2.staticflickr.com/1584/26620468361_7fe972425a_z.jpg?resize=640%2C413&amp;#038;ssl=1" alt="branching-illustration@2x" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>本月最後一篇投影片來介紹 &lt;a href="https://git-scm.com/">Git&lt;/a> Flow 流程該如何導入團隊，之前寫過一篇 &lt;a href="https://blog.wu-boy.com/2011/03/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-branch-model-%E5%88%86%E6%94%AF%E6%A8%A1%E7%B5%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">Git branch model&lt;/a> 文章，裡面提到該如何正確使用 branch，但是現在回想起來要導入團隊內真的是有點麻煩，也遇到蠻多問題的，後來最後只採用 &lt;a href="https://guides.github.com/introduction/flow/">Github Flow&lt;/a>，簡單又容易理解，如果開發者很常在 &lt;a href="https://github.com">Github&lt;/a> 活動，相信對於此方法並不會很陌生。&lt;/p></description></item><item><title>Git tips: 更改 commit log 作者</title><link>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</link><pubDate>Thu, 11 Feb 2016 16:11:43 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/02/git-tips-blame-someone-else/</guid><description>在 Github 上面看到這 git-blame-someone-else 專案，用來隨時修改 commit log 作者，也就是可以任意改 commit id 內的 `Author` 欄位資訊，作者也相當幽默，直接拿此 commit id 改成 Linux 作者 Linus Torvalds。
使用時機 大家會問到什麼時候才會用到需要修改 commit 作者，以我自己的狀況為例，在團隊內開發新功能會直接開新的 Branch 來開發，完成後會進行 code review，此時原開發者目前正在忙其他專案，其他團隊成員就必須幫忙修改原先 commit 內容，通常我是直接建議透過 `git reset &amp;ndash;soft HEAD^` 來更動原本 commit，而不是產生新的 commit，修改後作者就會變成自己，此時後這功能就派上用場了。
安裝方式 根據源專案是透過 root 權限，將執行檔丟到 `/usr/loca/bin` 目錄底下，但是我個人不建議用這方式，因為還需要 root 權限，要打密碼有點麻煩，我建議透過在家目錄建立 `bin` 目錄，並將此目錄加到 `$PATH` 變數內即可。
1 2 3 $ mkdir ~/bin $ wget https://raw.githubusercontent.com/jayphelps/git-blame-someone-else/master/git-blame-someone-else -O ~/bin/git-blame-someone-else $ chmod 755 ~/bin/git-blame-someone-else 修改 .bashrc，加入底下程式碼
1 2 3 4 # add bin folder to $PATH.</description></item><item><title>git tips 找尋遺失的 commit 紀錄</title><link>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</link><pubDate>Sat, 04 Jul 2015 11:58:32 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/07/undo-git-reset-hard/</guid><description>個人每天常用的常用的三大 Git 指令分別是 git reset, git pull, git rebase，但是呢有時候手殘，常常把 git reset --soft 打成 git reset --hard 造成不可預期的錯誤，朋友圈內也有人常常問我該如何救不見的 commit，其實很容易，git 對於每隔操作後產生的 commit 都會存放在 Local 端，所以基本上不用擔心 commit 記錄會不見，有一種狀況會永遠消失，那就是假設尚未 commit 目前修正過的檔案，然後下 git reset --hard HEAD，這樣的話我想誰都無法幫忙把已修正過的檔案找回來了，原因是連 git 都不知道你改了什麼啊。所以為了避免這情況方生，個人建議開發者，只要開發到一定的階段，務必要下一個 commit 當作記錄，但是你會說，這樣功能開發完後，就會有很多個 commit 非常不好看，這時候可以嘗試 git rebase 將整個功能合併成一個 commit，這樣其他開發者 review 時就會非常清楚。
現在的問題是如果開發者不小心下了 git reset --hard HEAD^，上一個 commit 就會消失了，這時候該如何救回來呢？答案可以使用 git reflog 指令然觀看開發者全部 git 的操作記錄，裡面詳細記載你曾經下過的 git 指令
1 2 3 4 5 6 7 8 $ git reflog 794be8b HEAD@{0}: reset: moving to HEAD^ 5e2be6f HEAD@{1}: commit (amend): update bfa593c HEAD@{2}: cherry-pick: update 794be8b HEAD@{3}: reset: moving to 649c658 794be8b HEAD@{4}: reset: moving to HEAD^ 649c658 HEAD@{5}: commit: update 794be8b HEAD@{6}: commit (initial): addd 上面可以看到之前 commit 的記錄，接著可以透過 git reset --hard xxxxx，或者是用 git cherry-pick xxxxx 將上一個 commit ID 記錄抓回來即可。</description></item><item><title>Git Flow and JavaScript Coding Style</title><link>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</link><pubDate>Sat, 11 Apr 2015 15:05:34 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2015/04/git-flow-and-javascript-coding-style/</guid><description>&lt;div style="margin:0 auto; text-align:center">
 &lt;a href="https://www.flickr.com/photos/appleboy/13158675193/" title="github-logo by appleboy46, on Flickr">&lt;img src="https://i0.wp.com/farm3.staticflickr.com/2238/13158675193_2892abac95_n.jpg?resize=320%2C127&amp;#038;ssl=1" alt="github-logo" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>&lt;a href="http://git-scm.com/">Git&lt;/a> 已經是每日必備使用的指令，在平常工作上常常使用到 &lt;a href="http://git-scm.com/docs/git-rebase">git rebase&lt;/a> 或 &lt;a href="http://git-scm.com/docs/git-merge">git merge&lt;/a>，發現很多工程師不知道什麼時候該用 rebase 什麼時候該用 merge，所以做了底下投影片來清楚描述 git rebase 及 merge 的優缺點及使用時機。&lt;/p></description></item><item><title>Git rebase + stash 小技巧</title><link>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</link><pubDate>Sun, 18 Aug 2013 03:37:01 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2013/08/git-rebase-stash-tip/</guid><description>&lt;p>每天打開電腦，第一件事情就是將專案程式碼更新的最新，以便整合同事新開發的功能，免的跟自己寫的功能衝突，所以最常用用的就是 &lt;code>git pull --rebase origin master&lt;/code>，此命令使用 &lt;code>rebase&lt;/code> 來取代 &lt;code>merge&lt;/code> 程式碼，也可以避免在 log 清單內出現 &lt;code>merge branch master into master&lt;/code> 等字樣，但是如果在開發一半進度時，想同時將同事的程式碼先 merge 進來，會發現無法 merge，git 會請你先將 local 修改過的檔案 commit，才可以讓您更新，所以這時候我們可以用 git stash 方式來解決&lt;/p>
&lt;p>如果你在 master 分支上，並且想 pull 最新的 commit，可以透過底下指令步驟&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git stash --include-untracked
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull --rebase origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git stash pop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>