<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gofight on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>https://blog.wu-boy.com/tags/gofight/</link><description>Recent content in gofight on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 25 Sep 2018 01:20:29 +0000</lastBuildDate><atom:link href="https://blog.wu-boy.com/tags/gofight/index.xml" rel="self" type="application/rss+xml"/><item><title>gofight 支援多個檔案上傳測試</title><link>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</link><pubDate>Tue, 25 Sep 2018 01:20:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2018/09/gofight-support-upload-file-testing/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 HTTP API 測試套件，之前已經寫過&lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">一篇介紹用法&lt;/a>，當時候尚未支援檔案上傳測試，也就是假設寫了一個&lt;a href="https://github.com/gin-gonic/gin/#upload-files">檔案上傳的 http handler&lt;/a> 在專案內如何寫測試，底下來看看該如何使用。&lt;/p></description></item><item><title>輕量級 Gofight 支援 Echo 框架測試</title><link>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</link><pubDate>Thu, 17 Nov 2016 15:19:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">Gofight&lt;/a> 是一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫的輕量級測試工具，專門測試 Golang Web Framework API，可以參考之前一篇教學: &lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">用 gofight 來測試 golang web API handler&lt;/a>，在 &lt;a href="https://echo.labstack.com/">Echo&lt;/a> 框架發布 &lt;a href="https://github.com/labstack/echo/releases/tag/v3.0.0">v3.0.0&lt;/a> 之前，Echo 不支援 golang 標準的 &lt;code>http.Request&lt;/code> 及 &lt;code>http.ResponseWriter&lt;/code>，反倒是支援 &lt;a href="https://github.com/valyala/fasthttp">fasthttp&lt;/a>，所以我發了 &lt;a href="https://github.com/labstack/echo/issues/439">Issue&lt;/a> 希望作者可以支援原生的 http 標準，最後沒有得到回應。就在前幾天 Echo 在 v3.0.0 版本把 &lt;code>fasthttp&lt;/code> 拿掉，這樣 Gofight 就可以移除特定函示，改用原生 http。&lt;/p></description></item><item><title>用 gofight 來測試 golang web API handler</title><link>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</link><pubDate>Wed, 06 Apr 2016 07:18:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>身為一位後端工程師，如果專案初期階段不導入測試，等到專案越來越大時，您就會發現，解了一個 bug，又產生好多個額外 bug，讓產品一直處於不穩定狀態。後端最主要提供前端或手機端 RESTFul API，所以今天來介紹一套 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 工具，用來測試 &lt;a href="https://golang.org/">Golang&lt;/a> 的 http &lt;a href="https://golang.org/pkg/net/http/#Handler">handler&lt;/a>，讓開發者可以送 Form, JSON, Raw 資料，後端處理後，可以拿到 response 資料，透過 &lt;a href="https://github.com/stretchr/testify">Testify&lt;/a> 來測試資料是否符合需求。&lt;/p>
&lt;p>目前大部份的 Golang Web Framework 都可以透過 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 來測試，除非作者有把 &lt;code>ServeHTTP&lt;/code> 改成自己定義 Response，不然基本上都是可以支援的，我自己測試了 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a>, &lt;a href="https://github.com/gorilla/mux">Mux&lt;/a>, &lt;a href="https://github.com/julienschmidt/httprouter">HttpRouter&lt;/a> 都是可以使用的，底下來看看 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 該如何使用。&lt;/p></description></item></channel></rss>