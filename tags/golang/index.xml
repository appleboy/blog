<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>http://example.org/tags/golang/</link><description>Recent content in golang on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Fri, 21 May 2021 04:52:17 +0000</lastBuildDate><atom:link href="http://example.org/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>如何取得上傳進度條 progress bar 相關數據及實作 Graceful Shutdown</title><link>http://example.org/2021/05/graceful-shutdown-with-progress-bar-in-golang/</link><pubDate>Fri, 21 May 2021 04:52:17 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/05/graceful-shutdown-with-progress-bar-in-golang/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/ASkclquxfpPTlJ_QWnhZjB5katrz18NyK4zt2w47UM8gS71MCjWodDoGp50nHRyeQx8MfbJJbwWjfIWCoKbZYLkec7a-FqMEw-r9Lh3U8XGAuwEqWa3DVMB2lkhdgMQUI1IMiKWL5Ss=w1920-h1080" alt="">&lt;/p>
&lt;p>由於專案需求，需要開發一套 CLI 工具，讓 User 可以透過 CLI 上傳大檔案來進行 Model Training，請參考上面的流程圖。首先第一步驟會先跟 API Server 驗證使用者，驗證完畢就開始上傳資料到 &lt;a href="https://aws.amazon.com/tw/s3/">AWS S3&lt;/a> 或其他 Storage 空間，除了上傳過程需要在 CLI 顯示目前進度，另外也需要將目前上傳的進度 (速度, 進度及剩餘時間) 都上傳到 API Server，最後在 Web UI 介面透過 &lt;a href="https://www.apollographql.com/docs/react/data/subscriptions/">GraphQL Subscription&lt;/a> 讓使用者可以即時看到上傳進度數據。&lt;/p>
&lt;p>而 CLI 上傳進度部分，我們選用了一套開源套件 &lt;a href="https://github.com/cheggaaa/pb">cheggaaa/pb&lt;/a>，相信有在寫 &lt;a href="https://golang.org">Go 語言&lt;/a>都並不會陌生。而此套件雖然可以幫助在 Terminal 顯示進度條，但是有些接口是沒有提供的，像是即時速度，上傳進度及剩餘時間。本篇教大家如何實作這些數據，及分享過程會遇到相關問題。&lt;/p></description></item><item><title>使用 RESTful API 串接 Open Policy Agent</title><link>http://example.org/2021/05/comunicate-with-open-policy-agent-using-resful-api/</link><pubDate>Tue, 04 May 2021 02:14:12 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/05/comunicate-with-open-policy-agent-using-resful-api/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" title="Open Policy Agent">&lt;img src="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" alt="Open Policy Agent" title="Open Policy Agent">&lt;/a>&lt;/p>
&lt;p>上一篇『&lt;a href="https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/">初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管&lt;/a>』介紹了如何透過 &lt;a href="https://golang.org">Go 語言&lt;/a>直接嵌入 Open Policy Agent (簡稱 OPA)設定檔，並透過 Go 套件直接查詢使用者權限。由於目前 OPA 只有支援三種模式串接各種不同的 Application，一種是透過 Go 語言直接整合，詳細請看上一篇教學，另一種是透過 RESTful API，也就是本篇的教學，最後一種是透過 &lt;a href="https://webassembly.org/">WebAssembly&lt;/a> 讓其他 application 可以直接讀取。之後有機會再來寫 WebAssembly 教學。而本篇將帶您了解如何透過 RESTful API 方式來完成 &lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control">RBAC 權限控管&lt;/a>，其實我比較期待支援 &lt;a href="https://grpc.io/">gRPC&lt;/a> 模式，但是看到這篇 &lt;a href="https://github.com/open-policy-agent/opa/issues/841">issue 提到&lt;/a>，OPA 現在已經支援 Plugin 模式，大家想擴充的，可以自行處理。&lt;/p></description></item><item><title>初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管</title><link>http://example.org/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/</link><pubDate>Sun, 18 Apr 2021 07:24:13 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" title="Open Policy Agent">&lt;img src="https://lh3.googleusercontent.com/qLGheyjm3eVL-TRP_MT1X9j2QrNrtIIAlVPmLbvNGWcLkqfUTpH87D2GCzYmce8eU88oMF-82lSqT6DwOByPWEKVZP4nGWT-IZFDvpVwnil2AeXZaYxZN5J33IpfsYfP6mljV3S51R4=w1920-h1080" alt="Open Policy Agent" title="Open Policy Agent">&lt;/a>&lt;/p>
&lt;p>最近公司內部多個專案都需要用到 &lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">RBAC&lt;/a> (Role-based access control) 權限控管，所以決定來找尋 Go 語言的解決方案及套件，在 Go 語言比較常聽到的就是 &lt;a href="https://casbin.org/">Casbin&lt;/a>，大家眾所皆知，但是隨著專案變大，系統複雜性更高，希望未來可以打造一套可擴充性的權限機制，故網路上看到一篇 &lt;a href="https://gist.github.com/Wang-Kai/18fe4e662ef795805c14b1ec94932834">ladon vs casbin&lt;/a> 的介紹文章，文章留言有中國開發者對於 Casbin 的一些看法，以及最後他推薦另一套 &lt;a href="https://www.cncf.io/">CNCF&lt;/a> 的專案叫 &lt;a href="https://www.openpolicyagent.org/">Open Policy Agent&lt;/a> 來實作權限控管機制。本篇直接來針對 Open Policy Agent 簡稱 (OPA) 來做介紹，並且用 Go 語言來驗證 RBAC 權限。底下是文章內其他開發者用過 Casbin 的感想&lt;/p>
&lt;blockquote>
&lt;p>1.使用覺得ladon的質量更好，支持類ACL和RBAC的權限系統，跟亞馬遜AWS的IAM非常契合 2.casbin那些庫的質量真的是無力吐槽，都沒有經常測試的東西就往github發，UI也到處bug，全都是畢業生寫的一樣，試用便知 3.casbin這個項目不讓提問題，提問題就給你關閉，作者很涉別人提問題 4.這些確實是本人的經歷，大家慎重選擇吧&lt;/p>
&lt;/blockquote>
&lt;p>最後的推薦&lt;/p>
&lt;blockquote>
&lt;p>強烈推薦CNCF今年畢業的策略引擎OPA（維護團隊主要是Google，微軟，Styra等），可以實現ABAC，RBAC，PBAC等各種權限模型，目前我們已經在生產環境中使用。 也是基於OPA實現的。&lt;/p>
&lt;/blockquote>
&lt;p>本篇所使用的範例程式碼請從&lt;a href="https://github.com/go-training/opa-demo/tree/v0.0.1">這邊下載或觀看&lt;/a>。&lt;/p></description></item><item><title>即時效能分析工具 Pyroscope</title><link>http://example.org/2021/03/debug-performance-issues-using-pyroscope/</link><pubDate>Mon, 01 Mar 2021 13:20:59 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/03/debug-performance-issues-using-pyroscope/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/PIRK3Qj4WiToHgB0QDDf6fMHZxDmEswjWJdTIfVJ8xY7UtSau5C0mosjALev5qbJMflIfrIWsC3bPjjxHRRWQNAiFZSCLbVlin-r1-ICV-lOnopbnpRj4BiMKJnTbslpdo-n3CS2zbQ=w1920-h1080" alt="">&lt;/p>
&lt;p>當網站上線後，流量增加或短暫功能故障，都會造成使用者體驗相當不好，而這時該怎麼快速找到效能的瓶頸呢？通常 CPU 衝到 100% 時，有時候也蠻難複製及找出關鍵問題點。本篇會介紹一套工具叫 &lt;a href="https://pyroscope.io/">pyroscope&lt;/a>，讓開發者可以快速找到效能瓶頸的程式碼。之前也寫了相關的效能瓶頸文章，可以參考看看『&lt;a href="https://blog.wu-boy.com/2020/06/golang-benchmark-pprof/">Go 語言用 pprof 找出程式碼效能瓶頸&lt;/a>』或『&lt;a href="https://blog.wu-boy.com/2020/11/improve-parser-performance-using-go-benchmark-tool/">善用 Go 語言效能測試工具來提升執行效率&lt;/a>』，上述兩篇都是針對 &lt;a href="https://golang.org">Go 語言&lt;/a>的效能分析文章，而 pyroscope 目前可以支援在 &lt;a href="https://www.python.org/">Python&lt;/a>, &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a> 或 &lt;a href="https://golang.org">Go&lt;/a> 的環境。底下筆者會針對 Go 環境做介紹。&lt;/p></description></item><item><title>兩台電腦透過 croc 工具來傳送檔案 (簡單, 加密, 快速)</title><link>http://example.org/2021/02/share-files-between-two-computer-using-croc-tool/</link><pubDate>Tue, 16 Feb 2021 03:46:33 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/02/share-files-between-two-computer-using-croc-tool/</guid><description>&lt;p>&lt;img src="https://lh3.googleusercontent.com/VHlioiLpLfqBnh5PnGjYhU6l7dZ2V3PURxz5RfulFL74xYYr4kL5EgkOa-OfLQyIALLgmRIcKlLHnbIENFe0cyv82XQW5ia0HgeNwm4u2ijNsjSQQjkrY4JJjloB_pHTOT-EtxzxOlw=w1920-h1080" alt="croc">&lt;/p>
&lt;p>兩台電腦之間該如何傳送檔案，其實方法有超多種的，像是 FTP 或透過 SSH 方式來傳送檔案，但是這些方法步驟都有點複雜，FTP 需要架設 FTP 服務，SSH 要學習 SCP 指令，那有沒有更好的方式從單一電腦點對點傳送檔案到另一台呢？傳送過程需要快速又要安全，本篇介紹一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>寫的工具叫 &lt;a href="https://github.com/schollz/croc">croc&lt;/a>，詳細的介紹可以參考看看&lt;a href="https://schollz.com/blog/croc6/">作者的 Blog 介紹&lt;/a>，此工具有底下功能及優勢。&lt;/p></description></item><item><title>初探 Pulumi 上傳靜態網站到 AWS S3 (二)</title><link>http://example.org/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/</link><pubDate>Thu, 11 Feb 2021 07:55:36 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" title="cover">&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>上一篇『&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/">初探 Pulumi 上傳靜態網站到 AWS S3 (一)&lt;/a>』主要介紹 Pulumi 基本使用方式，而本篇會延續上一篇教學把剩下的章節教完，底下是本篇會涵蓋的章節內容:&lt;/p>
&lt;ol>
&lt;li>設定 Pulumi Stack 環境變數&lt;/li>
&lt;li>建立第二個 Pulumi Stack 環境&lt;/li>
&lt;li>刪除 Pulumi Stack 環境&lt;/li>
&lt;/ol>
&lt;p>讓開發者可以自由新增各種不同環境，像是 Testing 或 Develop 環境，以及該如何動態帶入不同環境的變數內容，最後可以透過單一指令將全部資源刪除。&lt;/p></description></item><item><title>初探 Pulumi 上傳靜態網站到 AWS S3 (一)</title><link>http://example.org/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/</link><pubDate>Thu, 11 Feb 2021 07:29:56 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/02/upload-static-content-to-aws-s3-using-pulumi-01/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" title="cover">&lt;img src="https://lh3.googleusercontent.com/pw/ACtC-3f_62JD9fB_bxTcLFJRGhsADlda4hjJjFkzsuDAx0SnMTGZNlX0kl1j4n3WMpjBcPP9BpNOYrIVsy80vqXwjhKSLP7hH_d01FqpdCjA_S9cCdrBXnqE14LndovknJXimWkPHVKo56bcaJgP0SpqDw3Vog=w1283-h571-no?authuser=0" alt="cover" title="cover">&lt;/a>&lt;/p>
&lt;p>上一篇作者提到了兩套 &lt;a href="https://www.pulumi.com/docs/get-started/install/">Infrastructure as Code&lt;/a> 工具，分別是 &lt;a href="https://www.terraform.io/">Terraform&lt;/a> 跟 &lt;a href="https://www.pulumi.com/">Pulumi&lt;/a>，大家對於前者可能會是比較熟悉，那本篇用一個實際案例『建立 AWS S3 並上傳靜態網站』來跟大家分享如何從無開始一步一步使用 Pulumi。本教學使用的程式碼都可以在 &lt;a href="https://github.com/go-training/infrastructure-as-code-workshop/tree/main/pulumi/labs/lab01-modern-infrastructure-as-code">GitHub 上面瀏覽及下載&lt;/a>。教學會拆成七個章節:&lt;/p>
&lt;ol>
&lt;li>建立 Pulumi 新專案&lt;/li>
&lt;li>設定 AWS 環境&lt;/li>
&lt;li>初始化 Pulumi 架構 (建立 S3 Bucket)&lt;/li>
&lt;li>更新 AWS 架構 (S3 Hosting)&lt;/li>
&lt;li>設定 Pulumi Stack 環境變數 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;li>建立第二個 Pulumi Stack 環境 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;li>刪除 Pulumi Stack 環境 (&lt;a href="https://blog.wu-boy.com/2021/02/upload-static-content-to-aws-s3-using-pulumi-02/">教學二&lt;/a>)&lt;/li>
&lt;/ol></description></item><item><title>使用 GraphQL Gateway 串接多個 Data Schema</title><link>http://example.org/2021/02/graphql-gateway-in-golang/</link><pubDate>Sat, 06 Feb 2021 01:12:54 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>http://example.org/2021/02/graphql-gateway-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/eWR5fi9ipIuscey-E940I6fhwU5ZySehbItzPLyPVchJxBlq8N1uXT-psLHdX_wV6xojac3_EeCFZH6vs6C1R910vzDV1mY2uOo33so6QqpWgNqbDjGZPB6ar2NwspITQ7paTfjqSo8=w1920-h1080" title="infra">&lt;img src="https://lh3.googleusercontent.com/eWR5fi9ipIuscey-E940I6fhwU5ZySehbItzPLyPVchJxBlq8N1uXT-psLHdX_wV6xojac3_EeCFZH6vs6C1R910vzDV1mY2uOo33so6QqpWgNqbDjGZPB6ar2NwspITQ7paTfjqSo8=w1920-h1080" alt="infra" title="infra">&lt;/a>&lt;/p>
&lt;p>不久之前寫過一篇『&lt;a href="https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/">從 graphql-go 轉換到 gqlgen&lt;/a>』，目前團隊舊有的專案還是繼續用 &lt;a href="https://github.com/graphql-go/graphql">graphql-go&lt;/a> 來撰寫，不過之後需求量越來越大，維護 graphql-go 就越來越困難，故有在想怎麼把 &lt;a href="https://gqlgen.com/">gqlgen&lt;/a> 跟 graphql-go 相容在一起，那就是把這兩個套件想成不同的服務，再透過 Gateway 方式完成 &lt;a href="https://principledgraphql.com/integrity#1-one-graph">single data graph&lt;/a>。至於怎麼選擇 GraphQL Gateway 套件，最容易的方式就是使用 &lt;a href="https://www.apollographql.com/docs/federation/gateway/">@apollo/gateway&lt;/a>，但是由於個人比較偏好 &lt;a href="https://golang.org">Go 語言&lt;/a>的解決方案，就稍微找看看有無人用 Go 實現了 Gateway，後來找到 &lt;a href="https://github.com/nautilus/gateway">nautilus/gateway&lt;/a>，官方有&lt;a href="https://gateway.nautilus.dev/">提供文件&lt;/a>以及&lt;a href="https://medium.com/@aaivazis/a-guide-to-schema-federation-part-1-995b639ac035">教學 Blog&lt;/a> 可以供開發者參考。底下會教大家使用 nautilus/gateway 將兩個不同的服務串接在一起。&lt;/p></description></item></channel></rss>