<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</title><link>https://demo.gh.wu-boy.com/tags/testing/</link><description>Recent content in Testing on 小惡魔 - 電腦技術 - 工作筆記 - AppleBOY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>appleboy.tw@gmail.com (Appleboy)</managingEditor><webMaster>appleboy.tw@gmail.com (Appleboy)</webMaster><lastBuildDate>Tue, 25 Sep 2018 01:20:29 +0000</lastBuildDate><atom:link href="https://demo.gh.wu-boy.com/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>gofight 支援多個檔案上傳測試</title><link>https://demo.gh.wu-boy.com/2018/09/gofight-support-upload-file-testing/</link><pubDate>Tue, 25 Sep 2018 01:20:29 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/09/gofight-support-upload-file-testing/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 是一套用 &lt;a href="https://golang.org">Go 語言&lt;/a>撰寫的 HTTP API 測試套件，之前已經寫過&lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">一篇介紹用法&lt;/a>，當時候尚未支援檔案上傳測試，也就是假設寫了一個&lt;a href="https://github.com/gin-gonic/gin/#upload-files">檔案上傳的 http handler&lt;/a> 在專案內如何寫測試，底下來看看該如何使用。&lt;/p></description></item><item><title>Go 語言實戰 GraphQL</title><link>https://demo.gh.wu-boy.com/2018/07/graphql-in-go/</link><pubDate>Thu, 19 Jul 2018 01:12:07 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/07/graphql-in-go/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/41690303080/in/dateposted-public/" title="Screen Shot 2018-07-19 at 8.58.48 AM">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1769/41690303080_3d1a278b8a_z.jpg?w=840&amp;#038;ssl=1" alt="Screen Shot 2018-07-19 at 8.58.48 AM" data-recalc-dims="1" />&lt;/a> 很高興能在 &lt;a href="http://modernweb.tw/">2018 ModernWeb&lt;/a> 研討會跟大家分享用 &lt;a href="https://golang.org">Go 語言&lt;/a>實戰 &lt;a href="https://graphql.org/">GraphQL&lt;/a>，相信大家都知道 GraphQL 帶給前端後端及手機開發者很多好處，強烈推薦大家來嘗試看看。這場議程最主要是推廣 GraphQL 及 Go 語言。底下有投影片大家可以參考看看。&lt;/p></description></item><item><title>如何在 Go 專案內寫測試</title><link>https://demo.gh.wu-boy.com/2018/05/how-to-write-testing-in-golang/</link><pubDate>Mon, 14 May 2018 03:19:28 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2018/05/how-to-write-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://www.flickr.com/photos/appleboy/24407557644/in/dateposted-public/" title="Go-brown-side.sh">&lt;img src="https://i1.wp.com/farm2.staticflickr.com/1622/24407557644_36087ca6de.jpg?w=840&amp;#038;ssl=1" alt="Go-brown-side.sh" data-recalc-dims="1" />&lt;/a>&lt;/p>
&lt;p>相信大家都知道專案內不導入測試，未來越來越多功能，技術債就會越來越多，接手的人罵聲連連，而寫測試的簡單與否決定專案初期是否要先導入。為什麼專案要導入測試，導入測試有什麼好處，對於團隊而言，導入測試好處實在太多了，底下列了幾點是我個人覺得非常重要的。&lt;/p>
&lt;ol>
&lt;li>減少 Review 時間&lt;/li>
&lt;li>降低修改程式碼產生的的錯誤&lt;/li>
&lt;li>確保程式碼品質&lt;/li>
&lt;/ol>
&lt;p>第一點非常實用，尤其在專案很忙的時候，同事間只有少許的時間可以幫忙看程式碼或討論，如果大家都有寫測試，在時間的壓力下，只要稍微看一下，CI/CD 驗證過無誤，大致上就可以上線了。第二點在於，團隊其他成員需要修改一個不確定的地方，商業邏輯修正可能會造成很大的錯誤，而測試在這時候就發揮效果。最後一點就是程式碼品質，不管是新功能，或者是 Bug，任何時間點都需要補上測試，就算 code coverage 已經很高了，但是只要有任何 bug 就要補測試，測試寫的越多，專案的品質相對會提高。在 Go 語言專案內該如何寫測試了，為什麼專案要導入 Go 語言的原因之一就是『寫測試太簡單』了，底下來介紹如何寫基本的測試。&lt;/p></description></item><item><title>輕量級 Gofight 支援 Echo 框架測試</title><link>https://demo.gh.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</link><pubDate>Thu, 17 Nov 2016 15:19:57 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/11/golang-gofight-support-echo-framework/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/appleboy/gofight">Gofight&lt;/a> 是一套用 &lt;a href="https://golang.org/">Golang&lt;/a> 撰寫的輕量級測試工具，專門測試 Golang Web Framework API，可以參考之前一篇教學: &lt;a href="https://blog.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/">用 gofight 來測試 golang web API handler&lt;/a>，在 &lt;a href="https://echo.labstack.com/">Echo&lt;/a> 框架發布 &lt;a href="https://github.com/labstack/echo/releases/tag/v3.0.0">v3.0.0&lt;/a> 之前，Echo 不支援 golang 標準的 &lt;code>http.Request&lt;/code> 及 &lt;code>http.ResponseWriter&lt;/code>，反倒是支援 &lt;a href="https://github.com/valyala/fasthttp">fasthttp&lt;/a>，所以我發了 &lt;a href="https://github.com/labstack/echo/issues/439">Issue&lt;/a> 希望作者可以支援原生的 http 標準，最後沒有得到回應。就在前幾天 Echo 在 v3.0.0 版本把 &lt;code>fasthttp&lt;/code> 拿掉，這樣 Gofight 就可以移除特定函示，改用原生 http。&lt;/p></description></item><item><title>用 gofight 來測試 golang web API handler</title><link>https://demo.gh.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</link><pubDate>Wed, 06 Apr 2016 07:18:21 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2016/04/gofight-tool-for-api-handler-testing-in-golang/</guid><description>&lt;p>&lt;a href="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080">&lt;img src="https://lh3.googleusercontent.com/jsocHCR9A9yEfDVUTrU0m42_aHhTEVDGW5p5PsQSx7GSlkt3gLjohfXH3S7P7p982332ruU_e-EtW0LwmiuZjvN65VIcyME-zE35C6EM0IV1nqY6KoNw3dwW2djjid3F-T5YgnJothA=w1920-h1080" alt="">&lt;/a>&lt;/p>
&lt;p>身為一位後端工程師，如果專案初期階段不導入測試，等到專案越來越大時，您就會發現，解了一個 bug，又產生好多個額外 bug，讓產品一直處於不穩定狀態。後端最主要提供前端或手機端 RESTFul API，所以今天來介紹一套 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 工具，用來測試 &lt;a href="https://golang.org/">Golang&lt;/a> 的 http &lt;a href="https://golang.org/pkg/net/http/#Handler">handler&lt;/a>，讓開發者可以送 Form, JSON, Raw 資料，後端處理後，可以拿到 response 資料，透過 &lt;a href="https://github.com/stretchr/testify">Testify&lt;/a> 來測試資料是否符合需求。&lt;/p>
&lt;p>目前大部份的 Golang Web Framework 都可以透過 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 來測試，除非作者有把 &lt;code>ServeHTTP&lt;/code> 改成自己定義 Response，不然基本上都是可以支援的，我自己測試了 &lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a>, &lt;a href="https://github.com/gorilla/mux">Mux&lt;/a>, &lt;a href="https://github.com/julienschmidt/httprouter">HttpRouter&lt;/a> 都是可以使用的，底下來看看 &lt;a href="https://github.com/appleboy/gofight">gofight&lt;/a> 該如何使用。&lt;/p></description></item><item><title>Node.js Mocha 延遲測試</title><link>https://demo.gh.wu-boy.com/2015/05/node-js-mocha-delay-testing/</link><pubDate>Fri, 08 May 2015 01:24:30 +0000</pubDate><author>appleboy.tw@gmail.com (Appleboy)</author><guid>https://demo.gh.wu-boy.com/2015/05/node-js-mocha-delay-testing/</guid><description>&lt;div style="margin:0 auto; text-align:center">
&lt;a href="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png">&lt;img src="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67-300x134.png?resize=300%2C134" alt="687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67" class="aligncenter size-medium wp-image-5729" srcset="https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/blog.wu-boy.com/wp-content/uploads/2015/05/687474703a2f2f662e636c2e6c792f6974656d732f336c316b306e32413155334d3149314c323130702f53637265656e25323053686f74253230323031322d30322d32342532306174253230322e32312e3433253230504d2e706e67.png?w=500&amp;ssl=1 500w" sizes="(max-width: 300px) 85vw, 300px" data-recalc-dims="1" />&lt;/a>
&lt;/div>
&lt;p>如果大家有在寫 &lt;a href="http://expressjs.com/">Node.js Express Framework&lt;/a>，一定對 &lt;a href="http://mochajs.org/">Mocha&lt;/a> Unit Testing 不陌生，&lt;code>各位工程師不要太相信自己寫的程式碼&lt;/code>，產品上線前，務必要把 Unit Test 寫完整，如果是要 Code Refactor，那測試的重要性更是大。網站架構越來越大，功能越來越多，每寫一個新功能，都會產生 side effect，造成其他程式或邏輯出錯，這時候就需要 Unit Test 來驗證邏輯的正確性。使用 Express 寫 API 我個人會建議使用 &lt;a href="https://github.com/visionmedia/supertest">Supertest&lt;/a> + &lt;a href="https://github.com/tj/should.js/">Should.js&lt;/a> 來驗證後端程式碼即可，這幾套框架都是由 &lt;a href="https://github.com/tj">TJ Holowaychuk&lt;/a> 完成。使用 supertest 也可以讓 express 不用 listen port 就可以測試。&lt;/p></description></item></channel></rss>